

/*----------------------------------------------------------------------------------------------------------------------
	26.10.2019
	Merhaba Dünya programı
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		System.out.println("Merhaba Dünya");	
	}
}
/*----------------------------------------------------------------------------------------------------------------------
	27.10.2019
	Java' da yorum satırları
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{		
		System.out.println("Merhaba Dünya"); //Burasi gorulmeyecek
/*
	Burasi
	da
	gorulmeyecek
*/
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Merhaba Dünya programının atomları:
	package 		: anahtar sözcük (as)
	csd				: değişken (d)
	;				: ayraç (a)
	class			: as
	App				: d
	{}				: a
	public			: as
	static			: as
	void			: as
	main			: d
	()				: a
	String			: d
	[]				: a
	args			: d
	System			: d
	.				: operator (o)
	out				: d
	println			: d
	()				: o
	"Merhaba Dünya"	: String
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		System.out.println("Merhaba Dünya");	
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Java' da kod yazım kuralları:
	1. Atomlar arasında istenildiği kadar boşluk (whitespace) bırakılabilir
	2. Anahtar sözcükler ve değişken atomlar dışından tüm tomlar bitişk yazılabilir

----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
	Atomlar arasında istenildiği kadar boşluk (whitespace) bırakılabilir
----------------------------------------------------------------------------------------------------------------------*/

package					











 csd					



         ;

class



 App 






{
	public 




		static void main(String [] 






args)
	{
		



				       					
	}
}
/*----------------------------------------------------------------------------------------------------------------------
	Anahtar sözcükler ve değişken atomlar dışından tüm tomlar bitişk yazılabilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;class App{public static void main(String[]args){System.out.println("Merhaba Dünya");}}
/*----------------------------------------------------------------------------------------------------------------------
	Anahtar sözcükler ve değişken atomlar dışından tüm tomlar bitişk yazılabilir
----------------------------------------------------------------------------------------------------------------------*/
packagecsd;classApp{public static void main(String[]args){System.out.println("Merhaba Dünya");}}

/*----------------------------------------------------------------------------------------------------------------------
	paket bildiriminin genel biçimi:
	package <isim>;
	
	package csd;
----------------------------------------------------------------------------------------------------------------------*/


/*----------------------------------------------------------------------------------------------------------------------
	sınıf bildiriminin genel biçimi:
	[erişim belirleyici] class <sınıf ismi> {
		//...
	}
----------------------------------------------------------------------------------------------------------------------*/

package csd;

class App {
	public static void main(String [] args)
	{
		
	}
}

class DeviceInfo {
	//...
}

class Sample {
	//...
}

class Mample {
	//...
}


/*----------------------------------------------------------------------------------------------------------------------
	metot bildiriminin genel biçimi:
	[erişim belirleyici] [static] <geri dönüş değeri> <metot ismi>([parametre listesi])
	{
		//...
	}
	
	erişim belirleyici: public, protected, private, no-modifier (hiç bir yazmamak)
----------------------------------------------------------------------------------------------------------------------*/

package csd;

class App {
	public static void main(String [] args)
	{
		
	}
}

class Sample {
	public static void foo()
	{
		System.out.println("foo");
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	02.11.2019
	metot çağırmanın (call) genel biçimi:
	[paket ismi].[sınıf ismi].<metot ismi>([argümanlar]);
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		csd.Sample.foo();				
	}
}

class Sample {
	public static void foo()
	{
		System.out.println("foo");
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	metot çağırmanın (call) genel biçimi:
	[paket ismi].[sınıf ismi].<metot ismi>([argümanlar]);
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		System.out.println("Merhaba Dünya");
		csd.Sample.foo();
		System.out.println("Güle güle Dünya");
	}
}

class Sample {
	public static void foo()
	{
		System.out.println("foo");
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Metot çağrılması
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		System.out.println("Merhaba Dünya");
		csd.Sample.foo();
		System.out.println("Güle güle Dünya");
	}
}

class Sample {
	public static void foo()
	{
		System.out.println("foo");
		csd.Sample.bar();
	}
	
	public static void bar()
	{
		System.out.println("bar");		
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Metot çağrılması
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		System.out.println("Merhaba Dünya");
		csd.Sample.foo();
		System.out.println("Güle güle Dünya");
	}
}


class Mample {
	public static void bar()
	{
		System.out.println("Mample bar");		
	}
}

class Sample {
	public static void foo()
	{
		System.out.println("Sample foo");
		csd.Mample.bar();
	}	

}

/*----------------------------------------------------------------------------------------------------------------------
	Bir metodu çağıran metoda İngilizce olarak "caller" denir. Çağrılan metoda ise İngilizce olarak
	"callee" denir
----------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------
	Çağıran metodun ait olduğu sınıf ile ile çağrılan metodun ait olduğu sınıf aynı pakette ise çağırma
	sırasında paket ismi yazılmayabilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{		
		Sample.foo();		
	}
}


class Mample {
	public static void bar()
	{
		System.out.println("Mample bar");		
	}
}

class Sample {
	public static void foo()
	{
		System.out.println("Sample foo");
		Mample.bar();
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Çağıran metot ile çağrılan metot aynı sınıfta ise sınıf ismi de yazılmayabilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{		
		Sample.foo();		
	}
}

class Sample {
	public static void foo()
	{
		System.out.println("Sample foo");
		bar();
	}
	
	public static void bar()
	{
		System.out.println("Sample bar");		
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Temel türler (pre-defined, built-in):
	Tür ismi			Uzunluğu (byte)
	short					2
   *int						4
	long					8
	byte					1
	
   *double					8
	float					4
	
	char					2
	boolean					-
----------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------
	Değişken bildiriminin genel biçimi:
	<tür> <değişken ismi>;
	int a;
	double b;
----------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------
	Bir değişkene ilk değer verilmesi
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int a = 10; //initialization
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	print ve println metotları değişken ismini aldıklarında (argüman) içerisindeki değeri ekrana basarlar
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int a = 10;
		
		System.out.println(a);
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Değişkenler aynı türdense aralarında virgül kullanılarak bir kez tür yazarak bildirilebilirler
	(Bu durum parametre değişkenleri için geçersizdir)
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int a = 10, b = 34, c = 45;
		int d = 33;
		
		System.out.println(a);
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Bir metot içerisinde küme parantezleri arasında kalan bölüme blok denilmektedir. Bir blok içerisinde
	istenildiği kadar içiçe bloklar bulunabilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		{
			//...
			{
				{
					{
						//...
					}
				}
			}
		}
		
		{
			//...
		}
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Scope (faaliyet alanı): Bir değişken isminin derleyici tarafından görülebildiği kod aralığına denir
----------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------
	Yerel değişkenler (local variables) blok içerisinde herhangi bir yerde bildirilen değişkenlere denir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int number;
		//...
		
	}
}

class Sample {
	public static void foo()
	{
		int a;
		
		{
			double b;
			
			{
				boolean flag;
				//...
			}
		}
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Yerel değişkenlerin faaliyet alanı bildirildikleri yerden bildirildikleri bloğun sonuna kadardır
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		
		
	}
}

class Sample {
	public static void foo()
	{
		int a;
		
		{
			double b;
			
			{
				b = 5.6;
		
			}
		}
		
		b = 3.4; //error
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Aynı faaliyet alanı içerisinde aynı isimde yerel değişken bildirimi yapılamaz
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		
		
	}
}

class Sample {
	public static void foo()
	{
		int a;
		
		{
			double a;//error
			
		}
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Farklı faaliyet alanları içerisinde aynı isimde yerel değişken bildirimi geçerlidir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		
		
	}
}

class Sample {
	public static void foo()
	{
		{
			int a;
			//...
		}
		
		{
			int a;
			//...
			
		}
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Farklı faaliyet alanları içerisinde aynı isimde yerel değişken bildirimi geçerlidir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		
		
	}
}

class Sample {
	public static void foo()
	{		
		{
			int a;
			
		}
		
		int a;
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Farklı faaliyet alanları içerisinde aynı isimde yerel değişken bildirimi geçerlidir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		
		
	}
}

class Sample {
	public static void foo()
	{		
		
		int numberOfStudents;
		
	}
	
	public static void bar()
	{		
		
		int numberOfStudents;
		
				
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	İçerisine değer atanmamış bir değişkenin kullanımı geçersizdir. Yerel değişkenlere değer atanması
	programcının sorumluluğundadır. Yani, yerel değişkene faaliyet alanı içerisinde bir değer atanmadan
	kullanılamaz
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int a;
		
		
		System.out.println(a); //error		
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	İçerisine değer atanmamış bir değişkenin kullanımı geçersizdir. Yerel değişkenlere değer atanması
	programcının sorumluluğundadır. Yani, yerel değişkene faaliyet alanı içerisinde bir değer atanmadan
	kullanılamaz
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int a;		
		int b;
		
		b = a * 2; //error

	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Değişken isimleri rakam karakteri ile başlatılamaz
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int 1number; //error
					
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Değişken isimleri uygun bir karakter ile başlatılıp istenildiği kadar rakam karakteri içerebilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int a1234;
		
		a1234 = 34;
		
		System.out.println(a1234);
					
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	03.11.2019
	Değişken isimlerinde alttire karakteri kullanılabilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int number_of_students;
		
		number_of_students = 34;
		
		System.out.println(number_of_students);
					
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Değişken isimleri alttire karakteri ile başlatılabilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int _number_of_students;
		
		_number_of_students = 34;
		
		System.out.println(_number_of_students);
					
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Alttire karakteri tek başına değişken ismi olamaz. Alttire karakterinin tek başına kullanımı 
	Java 8 ile deprecated olmuştur, Java 9 ile değişken ismi olmaktan çıkartılmıştır
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int _; //error
		
		_ = 34;
		
		System.out.println(_);
					
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Değişken isimleri boşluk karakteri içeremez
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int number of students;
		
		
					
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Değişken isimleri büyük-küçük harf duyarlıdır. Aşğıdaki değişkenlerin hepsi farklıdır
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int value, Value, vaLue, VaLuE;
		
		
					
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Değişken isimlerinde $ karakteri kullanılabilir. Ancak $ karakterinin kullanımı tavsiye edilmemektedir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int amountOf$s = 10;
		
		System.out.println(amountOf$s);					
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	$ tek başına değişken ismi de olabilir. Ancak tavsiye edilmez
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int $ = 10;
		
		System.out.println($);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Değişken isimlendirmede UNICODE karakterler kullanılabilir. Örneğin Türkçe karakterler geçerlidir.
	Ancak okunabilirlik açısından İngilizce alfabedeki karakterler dışından ve İngilizce kelimeler 
	dışında kullanmayacağız
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int öğrenciSayısı = 10;
		
		System.out.println(öğrenciSayısı);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Değişken isimleri doğrudan anahtar sözcüklerden olamaz. Ancak bu durumun istisnaları vardır
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int class; //error
						
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Bazı anahtar sözcükler daha sonra Java' ya eklendikleri için kullanıldığı yere göre değişken
	ismi olarak da ele alınabilirler
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int var = 10; //var değişken
		var b = 3.4; //var anahtar sözcük
		
		
						
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Ters bölü u ile bir karakterin sıra numarası hexadecimal olarak verilecek değişken isminde kullanılabilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int \u0144bc = 10;
		
		System.out.println(\u0144bc);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Ters bölü u ile bir karakterin sıra numarası hexadecimal olarak verilecek değişken isminde kullanılabilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int \u0041 = 10;
		
		System.out.println(A);
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Klavyeden int türden değer isteme kalıbı
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		System.out.print("Bir sayı giriniz:");
		int val = Integer.parseInt(kb.nextLine());		
		int result = val * val;
		
		System.out.println(result);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Klavyeden int türden değer isteme kalıbı
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		System.out.print("Birinci sayıyı giriniz:");
		int a = Integer.parseInt(kb.nextLine());		
		
		System.out.print("İkinci sayıyı giriniz:");
		int b = Integer.parseInt(kb.nextLine());		
		
		int result = a * b;
		
		System.out.println(result);	

	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Klavyeden double türden değer isteme kalıbı
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		System.out.print("Birinci sayıyı giriniz:");
		double a = Double.parseDouble(kb.nextLine());		
		
		System.out.print("İkinci sayıyı giriniz:");
		double b = Double.parseDouble(kb.nextLine());		
		
		double result = a * b;
		
		System.out.println(result);	

	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Klavyeden long türden değer isteme kalıbı
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		System.out.print("Birinci sayıyı giriniz:");
		long a = Long.parseLong(kb.nextLine());		
		
		System.out.print("İkinci sayıyı giriniz:");
		long b = Long.parseLong(kb.nextLine());		
		
		long result = a * b;
		
		System.out.println(result);	

	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Klavyeden alınan int türden iki değerin toplamını, farkını ve çarpımını ekrana yazdıran programı
	yazınız
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		System.out.print("Birinci sayıyı giriniz:");
		int a = Integer.parseInt(kb.nextLine());
		
		System.out.print("İkinci sayıyı giriniz:");
		int b = Integer.parseInt(kb.nextLine());
		
		int result;
		
		result = a + b;
		
		System.out.println("Toplam:" + result);
		
		result = a - b;
		
		System.out.println("Fark:" + result);
		
		result = a * b;
		
		System.out.println("Çarpım:" + result);
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Bir metodun geri dönüş değeri çağrılan metoda aktardığı değerdir. Bir metodun geri dönüş değeri
	return deyimi ile oluşturulur. return deyiminin genel biçimi:
		return [ifade];
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int a = Sample.foo() * 2;
		
		System.out.println(a);
	}
}


class Sample {
	public static int foo()
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		int a = Integer.parseInt(kb.nextLine());
		
		int result = a * a;
		
		return result;
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	return deyimine ilişkin ifade önce hesaplanır sonra return edilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int a = Sample.foo() * 2;
		
		System.out.println(a);
	}
}


class Sample {
	public static int foo()
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		int a = Integer.parseInt(kb.nextLine());
		
		return a * a;
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	return deyimi metodu sonlandırır. Aşağıdaki kodda error oluşur
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int a = Sample.foo() * 2;
		
		System.out.println(a);
	}
}


class Sample {
	public static int foo()
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		int a = Integer.parseInt(kb.nextLine());
		
		return a * a;		
		System.out.println("foo sonu"); //error:unreachable code
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Geri dönüş değeri olan metotlarda akışın her noktasında return deyimi bulunmalıdır
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int a = Sample.foo() * 2;
		
		System.out.println(a);
	}
}


class Sample {
	public static int foo() //error
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		int a = Integer.parseInt(kb.nextLine());
		
		
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Geri dönüş değeri olan metotlarda akışın her noktasında return deyimi bulunmalıdır
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int a = Sample.foo() * 2;
		
		System.out.println(a);
	}
}


class Sample {
	public static int foo() //error
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		int a = Integer.parseInt(kb.nextLine());
		
		if (a > 0)
			return a;
		
		
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Geri dönüş değeri olan metotlarda return tek başına kullanılamaz
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int a = Sample.foo() * 2;
		
		System.out.println(a);
	}
}


class Sample {
	public static int foo() //error
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		int a = Integer.parseInt(kb.nextLine());
		
		return;	//error		
	}
}



/*----------------------------------------------------------------------------------------------------------------------
	Geri dönüş değeri olan bir metot geri dönüş değeri yokmuş gibi çağrılabilir. Yani geri dönüş değeri
	olan bir metodun geri dönüş değerini çağrıdan sonra kullanma zorunluluğu yoktur
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Sample.foo();
	}
}


class Sample {
	public static int foo()
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		int a = Integer.parseInt(kb.nextLine());
		
		int result = a * a;
		
		System.out.println(result);
		
		return result;
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Metodun geri dönüş değeri geçici değişkene yapılan bir atama işlemidir:
	Temsili kod:
	int temp = a * a;
	int x = temp * 2;
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int x = Sample.foo() * 2;

		System.out.println(x);
	}
}


class Sample {
	public static int foo()
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		int a = Integer.parseInt(kb.nextLine());

		return a * a;
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Geri dönüş değeri olmayan metotlarda (void metotlar) return ifade ile kullanılamaz
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{

	}
}


class Sample {
	public static void foo()
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		int a = Integer.parseInt(kb.nextLine());

		return a * a; //error
	}
}



/*----------------------------------------------------------------------------------------------------------------------
	Geri dönüş değeri olmayan metotlarda return ifadesiz olarak istenirse kullanılabilir. Bu yalnızca metodu
	sonlandırmak içindir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Sample.foo();
	}
}


class Sample {
	public static void foo()
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		int a = Integer.parseInt(kb.nextLine());

		if (a < 0) {
			System.out.println("Geçersiz değer");
			return;
		}

		System.out.println(a * 2);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Geri dönüş değeri olmayan metotlar geri dönüş varmış gibi çağrılamaz
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int a = Sample.foo() * 2; //error
	}
}


class Sample {
	public static void foo()
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		int a = Integer.parseInt(kb.nextLine());

		if (a < 0) {
			System.out.println("Geçersiz değer");
			return;
		}

		System.out.println(a * 2);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	09.11.2019
	Parametreler aynı türden bile olsa tür bilgisi yazılmalıdır
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{

	}
}

class Sample {
	public static void foo(int a, b)//error
	{

	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Metotların parametre değişkeni faaliyet alanı bakımından metot başında bildirilen yerel değişkenler
	gibidir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{

	}
}

class Sample {
	public static void foo(int a, int b)
	{
		double a; //error

		{
			float b; //error
		}

	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Metot kaç parametreli ise o kadar sayıda argüman ile çağrılmalıdır. Argüman çaırma sırasında
	parametre değişkenlerine aktarılan değere denir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Sample.foo(10, 20);

	}
}

class Sample {
	public static void foo(int a, int b)
	{
		System.out.println(a);
		System.out.println(b);
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Metot kaç parametreli ise o kadar sayıda argüman ile çağrılmalıdır
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Birinci sayıyı giriniz:");
		int x = Integer.parseInt(kb.nextLine());

		System.out.print("İkinci sayıyı giriniz:");
		int y = Integer.parseInt(kb.nextLine());

		Sample.foo(x, y);
	}
}

class Sample {
	public static void foo(int a, int b)
	{
		System.out.println(a);
		System.out.println(b);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Metot çağrısında önce argümanlara ilişkin ifadeler hesaplanır sonra elde edilen değerlerle metot
	çağrılır
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Birinci sayıyı giriniz:");
		int x = Integer.parseInt(kb.nextLine());

		System.out.print("İkinci sayıyı giriniz:");
		int y = Integer.parseInt(kb.nextLine());

		Sample.foo(x + 2, y - 5);
		Sample.foo(x, y);
	}
}

class Sample {
	public static void foo(int a, int b)
	{
		System.out.println(a);
		System.out.println(b);
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Basit bir add metodu
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Birinci sayıyı giriniz:");
		int x = Integer.parseInt(kb.nextLine());

		System.out.print("İkinci sayıyı giriniz:");
		int y = Integer.parseInt(kb.nextLine());

		int result = Operation.add(x, y);

		System.out.println(result);
	}
}

class Operation {
	public static int add(int a, int b)
	{
		return a + b;
	}

	public static int mul(int a, int b)
	{
		return a * b;
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Bir metodun geri dönüş değerinin başka bir metoda argüman olarak verilmesi
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Birinci sayıyı giriniz:");
		int x = Integer.parseInt(kb.nextLine());

		System.out.print("İkinci sayıyı giriniz:");
		int y = Integer.parseInt(kb.nextLine());

		System.out.println(Operation.add(x, y));
	}
}

class Operation {
	public static int add(int a, int b)
	{
		return a + b;
	}

	public static int mul(int a, int b)
	{
		return a * b;
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Bir metodun geri dönüş değerinin başka bir metoda argüman olarak verilmesi
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Birinci sayıyı giriniz:");
		int x = Integer.parseInt(kb.nextLine());

		System.out.print("İkinci sayıyı giriniz:");
		int y = Integer.parseInt(kb.nextLine());

		System.out.println(Operation.add(x + 2, y * 3));
	}
}

class Operation {
	public static int add(int a, int b)
	{
		return a + b;
	}

	public static int mul(int a, int b)
	{
		return a * b;
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	printf metodu ile % kakteri ile özel bazı karakterler (format characters) yer tutucu (placeholder)
	görevi görür. printf metoduna yazıdan sonra geçilecek argümanlar sırasıyla bu yer tutucular yerine
	eklenir. d format karakteri tamsayı türleri için kullanılır
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Birinci sayıyı giriniz:");
		int x = Integer.parseInt(kb.nextLine());

		System.out.print("İkinci sayıyı giriniz:");
		int y = Integer.parseInt(kb.nextLine());

		int result = x + y;

		System.out.printf("Toplam:%d", result);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	printf metodu imleci alt satıra indirmez. Alt satıra indirmek için n format karakteri kullanılabilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Birinci sayıyı giriniz:");
		int x = Integer.parseInt(kb.nextLine());

		System.out.print("İkinci sayıyı giriniz:");
		int y = Integer.parseInt(kb.nextLine());

		int result = x + y;

		System.out.printf("Toplam:%d%n", result);
		System.out.println("Merhaba");
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	printf kullanımı
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Birinci sayıyı giriniz:");
		int x = Integer.parseInt(kb.nextLine());

		System.out.print("İkinci sayıyı giriniz:");
		int y = Integer.parseInt(kb.nextLine());

		int result = x + y;

		System.out.printf("%d + %d = %d%n", x, y, result);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	f format karakteri ile gerçek sayı türleri kullanılabilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		double x = Double.parseDouble(kb.nextLine());

		System.out.printf("Sayı:%f%n", x);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	f format karakteri . kullanımı
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		double x = Double.parseDouble(kb.nextLine());

		System.out.printf("Sayı:%.20f%n", x);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	d format karakteri ile hizalama kullanımı
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Birinci sayıyı giriniz:");
		int x = Integer.parseInt(kb.nextLine());

		System.out.print("İkinci sayıyı giriniz:");
		int y = Integer.parseInt(kb.nextLine());

		int result = x + y;

		System.out.printf("%2d + %02d = %02d%n", x, y, result);
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	char türü c format karakteri ile yazdırılabilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		char ch = 67;

		System.out.printf("ch=%c%n", ch);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	boolean türü b format karakteri ile yazdırılabilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		boolean flag = true;

		System.out.printf("flag=%b%n", flag);
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	printf metodunda x ve X ile hexadecimal o ile de octal gösterim sağlanabilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		int a = Integer.parseInt(kb.nextLine());

		System.out.printf("a=%x%n", a);
		System.out.printf("a=%X%n", a);
		System.out.printf("a=%d%n", a);
		System.out.printf("a=%o%n", a);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	printf metodu ile % karakteri iki tane % karakteri ile gösterilebilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		int a = Integer.parseInt(kb.nextLine());

		System.out.printf("Oran:%% %d", a);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Aşağıdaki örneği inceleyiniz
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		int a = Integer.parseInt(kb.nextLine());

		System.out.printf("Oran:%%d", a);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	format metodu printf ile tamamen aynı biçimde çalışır
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		int a = Integer.parseInt(kb.nextLine());

		System.out.format("Oran:%%%d%n", a);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Klavyeden alınan iki tane int türden sayı için toplama, çıkarma ve çarpma işlemlerini
	formatlı biçimde sayılarla birlikte gösteren programı yazınız. İşlemler için başka bir sınıfta
	ilgili metotlar yazılacaktır. Metotlar klavye ve ekrandan bağımsız çalışmalıdır. örnek çıktı:
	Girilen sayılar 10 ve 20 ise

	10 + 20 = 30
	10 - 20 = -10
	10 * 20 = 200
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		OperationApp.run();
	}
}

class OperationApp {
	public static void run()
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Birinci sayıyı giriniz:");
		int a = Integer.parseInt(kb.nextLine());

		System.out.print("İkinci sayıyı giriniz:");
		int b = Integer.parseInt(kb.nextLine());

		System.out.printf("%d + %d = %d%n", a, b, Operation.add(a, b));
		System.out.printf("%d x %d = %d%n", a, b, Operation.mul(a, b));
		System.out.printf("%d - %d = %d%n", a, b, Operation.sub(a, b));
	}
}

class Operation {
	public static int add(int a, int b)
	{
		return a + b;
	}

	public static int mul(int a, int b)
	{
		return a * b;
	}

	public static int sub(int a, int b)
	{
		return a - b;
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	10.11.2019
	Math sınıfının abs metotları
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		double val = Double.parseDouble(kb.nextLine());

		System.out.printf("|%f| = %f%n", val, Math.abs(val));
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Math sınıfının sqrt metodu
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		double val = Double.parseDouble(kb.nextLine());

		System.out.printf("sqrt(%f) = %f%n", val, Math.sqrt(val));
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Math sınıfının cbrt metodu
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		double val = Double.parseDouble(kb.nextLine());

		System.out.printf("cbrt(%f) = %f%n", val, Math.cbrt(val));
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Math sınıfının pow metodu
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Tabanı giriniz:");
		double a = Double.parseDouble(kb.nextLine());

		System.out.print("Üssü giriniz:");
		double b = Double.parseDouble(kb.nextLine());

		System.out.printf("pow(%f, %f) = %f%n", a, b, Math.pow(a, b));
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı analitik düzlemde iki noktanın koordinatlarına göre aralarındaki
	uzaklığı döndüren distance isimli metodu yazınız ve klavyeden girilen değerlerle çağırarak test ediniz
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		DistanceTestApp.run();
	}
}

class DistanceTestApp {
	public static void run()
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("x1?");
		double x1 = Double.parseDouble(kb.nextLine());

		System.out.print("y1?");
		double y1 = Double.parseDouble(kb.nextLine());

		System.out.print("x2?");
		double x2 = Double.parseDouble(kb.nextLine());

		System.out.print("y2?");
		double y2 = Double.parseDouble(kb.nextLine());

		double dist = MathUtil.distance(x1, y1, x2, y2);

		System.out.printf("Uzaklık:%f%n", dist);
	}
}

class MathUtil {
	public static double distance(double x1, double y1, double x2, double y2)
	{
		double total = Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2);

		return Math.sqrt(total);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı analitik düzlemde iki noktanın koordinatlarına göre aralarındaki
	uzaklığı döndüren distance isimli metodu yazınız ve klavyeden girilen değerlerle çağırarak test ediniz
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		DistanceTestApp.run();
	}
}

class DistanceTestApp {
	public static void run()
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("x1?");
		double x1 = Double.parseDouble(kb.nextLine());

		System.out.print("y1?");
		double y1 = Double.parseDouble(kb.nextLine());

		System.out.print("x2?");
		double x2 = Double.parseDouble(kb.nextLine());

		System.out.print("y2?");
		double y2 = Double.parseDouble(kb.nextLine());

		double dist = MathUtil.distance(x1, y1, x2, y2);

		System.out.printf("Uzaklık:%f%n", dist);
	}
}

class MathUtil {
	public static double distance(double x1, double y1, double x2, double y2)
	{
		return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı analitik düzlemde iki noktanın koordinatlarına göre aralarındaki
	uzaklığı döndüren distance isimli metodu yazınız ve klavyeden girilen değerlerle çağırarak test ediniz
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		DistanceTestApp.run();
	}
}

class DistanceTestApp {
	public static void run()
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("x1?");
		double x1 = Double.parseDouble(kb.nextLine());

		System.out.print("y1?");
		double y1 = Double.parseDouble(kb.nextLine());

		System.out.print("x2?");
		double x2 = Double.parseDouble(kb.nextLine());

		System.out.print("y2?");
		double y2 = Double.parseDouble(kb.nextLine());

		double dist = MathUtil.distance(x1, y1, x2, y2);

		System.out.printf("Uzaklık:%f%n", dist);
	}
}

class MathUtil {
	public static double distance(double x1, double y1, double x2, double y2)
	{
		return Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Math sınıfınının PI ve E elemanları
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		System.out.println(Math.PI);
		System.out.println(Math.E);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Math sınıfınının trigonometrik metotları radyan ölçü birimi ile çalışır
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		double val = Double.parseDouble(kb.nextLine());

		System.out.printf("sin(%f)=%f%n", val, Math.sin(Math.toRadians(val)));
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Math sınıfınının logaritma metotları
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		double val = Double.parseDouble(kb.nextLine());

		System.out.printf("log(%f)=%f%n", val, Math.log(val));
		System.out.printf("log10(%f)=%f%n", val, Math.log10(val));
		System.out.printf("log1p(%f)=%f%n", val, Math.log1p(val));
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	MathUtil sınıfının log metodu
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		double val = Double.parseDouble(kb.nextLine());

		System.out.printf("log2(%f)=%f%n", val, MathUtil.log(2, val));

	}
}

class MathUtil {
	public static double log(int a, double b)
	{
		return Math.log10(b) / Math.log10(a);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Math sınıfınının yuvarlama işlemi yapan metotları
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		double val = Double.parseDouble(kb.nextLine());

		System.out.printf("round(%f)=%d%n", val, Math.round(val));
		System.out.printf("rint(%f)=%f%n", val, Math.rint(val));
		System.out.printf("ceil(%f)=%f%n", val, Math.ceil(val));
		System.out.printf("floor(%f)=%f%n", val, Math.floor(val));
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	16.11.2109
	Sabitlerin de türleri vardır:
	1. Sayı nokta içermiyorsa ve sonuna hiçbir ek almamışsa ve int türü sınırları içerisindeyse
	int türdendir. Sayı int türü sınırları dışında ise error oluşur.
	Örneğin: 100, 3000, -30

	2. Sayı nokta içermiyorsa ve sonuna L veya l (küçük L) soneklerinden birini almışsa
	long türdendir. Sayı long türü sınırları dışındaysa error oluşur.
	Örneğin: 3l, 4L

	3. Java' da byte ve short türden sabitler yoktur.

	4. Sayı nokta içeriyorsa ve herhangi bir sonek almamışsa double türdendir. Sayı double
	türü sınırları dışındaysa error oluşur:
	Örneğin: 2.3, 4.5

	5. Sayı nokta içersin ya da içermesin sonuna D veya d sonekini almışsa double türdendir.
	Örneğin: 3D, 5.6d

	6. Sayı nokta içersin ya da içermesin sonuna F veya f sonekini almışsa float türdendir.
	Örneğin: 3F, 5f, 7.7F

	7. boolean türden iki tane sabit vardır: true, false

	8. Tek tırnak içerisinde yazılan karakterler sıra numarası olarak char türden sabitlerdir.
	Örneğin: 'a', ':'
	Bazı karakterler özel karakterler olduklarından tek tırnak içerisinde bir karakter olarak yazılamazlar.
	Örneğin enter karakteri (line feed) kalvyeden bir karakter olarak doğrudan koda yazılamaz. Bu tür
	karakterlere escape sequence karakterler denir. Bu karakterler tek tırnak içerisinde ters bölü
	ile yazılır:
	Java' da escape sequence karakterler:
	'\n' -> Line feed (LF)
	'\r' -> Carriage return (CR)
	'\t' -> Tab
	'\v' -> Vertical tab
	'\0' -> null character
	'\\' -> back-slash
	'\'' -> single quote
	'\"' -> double quote
	'\b' -> backspace
	'\f' -> form feed
----------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------
	char türden sabitler
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		char c = ':';

		System.out.println(c);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Ters bölü karakteri tek tırnak içerisinde iki tane ters bölü ile verilmelidir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		char c = '\\';

		System.out.println(c);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Tek tırnak karakteri tek tırnak içerisinde ters bölü ile kullanılmalıdır
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		char c = '\'';

		System.out.println(c);
	}
}



/*----------------------------------------------------------------------------------------------------------------------
	İki tırnak karakteri tek tırnak içerisinde iki şeklide de kullanılabilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		char ch1 = '"';
		char ch2 = '\"';

		System.out.println(ch1);
		System.out.println(ch2);
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	İki tırnak içerisinde escape sequence karakterler aynı anlamda kullanılır
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		System.out.println("C:\test\names.txt");
	}
}



/*----------------------------------------------------------------------------------------------------------------------
	Yukarıdaki problemin çözümü aşağıdaki gibi yazılabilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		System.out.println("C:\\test\\names.txt");
	}
}



/*----------------------------------------------------------------------------------------------------------------------
	İki tırnak içerisinde ters bölü karakterinden sonra uygun özel karakter gelmelidir. Aksi durumda
	error oluşur
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		System.out.println("C:\mest\m.dat"); //error
	}
}



/*----------------------------------------------------------------------------------------------------------------------
	İki tırnak içerisinde escape sequence karakterlerin kullanımı
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		System.out.println("\\\\192.168.2.131\\test.dat");
	}
}



/*----------------------------------------------------------------------------------------------------------------------
	İki tırnak içerisinde iki tırnak karakteri ters bölü ile kullanılmalıdır
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		System.out.println("\"ankara\"");
	}
}



/*----------------------------------------------------------------------------------------------------------------------
	İki tırnak içerisinde tek tırnak karakteri iki şekilde kullanılabilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		System.out.println("\'ankara\'");
		System.out.println("'ankara'");
	}
}



/*----------------------------------------------------------------------------------------------------------------------
	printf ile escape sequence karakterler kullanılabilr
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int a = 10;

		System.out.printf("a=%d\n", a);
		System.out.println("Tekrar yapıyor musunuz?");
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Ters bölü u ve hexadecimal sıra numarası ile karakter sabiti yazılabilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		char ch = '\u0148';

		System.out.println(ch);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Ters bölü u iki tırnak içerisinde de kullanılabilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		System.out.println("\u0148ali");
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Özel yazım dışında tek tırnak içerisinde birden fazla karakter yazılamaz
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		char c = 'a '; //error
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Tamsayı sabitinin başına 0x veya 0X (sıfır ve x) öneki getirilirse sabit hexadecimal
	olarak yazılabilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int value = 0xA;

		System.out.println(value);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Tamsayı sabitinin başına 0 (sıfır) öneki getirilirse sabit octal olarak yazılabilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int value = 012;

 		System.out.println(value); //10
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Tamsayı sabitinin başına 0b veya 0B (sıfır ve b) öneki getirilirse sabit binary olarak
	yazılabilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		long value = 0b1010; //Since java 7

 		System.out.println(value); //10
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Nokta içeren bir sabitin noktadan önceki kısmı sıfır ise sıfır yazılmayabilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		double a = .1;

		System.out.println(a);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Nokta içeren bir sabitin noktadan sonra kısmı sıfır ise sıfır yazılmayabilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		double a = 3.;

		System.out.println(a);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Gerçek sayı sabitlerinin üstel gösterimi
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		double avogadro = 6.02E23;

		System.out.printf("%f%n", avogadro);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Gerçek sayı sabitlerinin üstel gösterimi
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		double avogadro = 6.02e23;

		System.out.printf("%f%n", avogadro);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Java 7 ile birlikte sabitlerin basamakları arasında alttire karakteri kullanılabilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int a = 2_000_000_000;

		System.out.println(a);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Alttire istenildiği kadar kullanılabilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int a = 1________________0;

		System.out.println(a);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Alttire karakterinin kullanımı
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int a = 0x1F_C4__00_A1;

		System.out.println(a);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Alttire karakterinin kullanımı
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int a = 0b1010_0000__00001000__00000000_00000000;

		System.out.println(a);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Alttire karakteri sabitlerin başında kullanılamaz
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int a = _10; //error

		System.out.println(a);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Alttire karakteri sabitlerin sonunda kullanılamaz
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int a = 10_; //error

		System.out.println(a);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Alttire karakteri sabitlerin başında kullanılamaz
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int a = 0x_A; //error

		System.out.println(a);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Alttire karakteri sabitlerin sonunda kullanılamaz
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		long a = 2_L; //error

		System.out.println(a);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Alttire karakteri noktalı sabitler için noktadan önce ya da sonra kullanılamaz
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		double a = 345_._678; //error

		System.out.println(a);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Alttire karakteri üstel sabitler E (veya e) den önce ya da sonra kullanılamaz
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		double a = 3_E3;

		System.out.println(a);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Aritmetik 4 işlem operatörleri
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Birinci sayıyı giriniz:");
		int a = Integer.parseInt(kb.nextLine());

		System.out.print("İkinci sayıyı giriniz:");
		int b = Integer.parseInt(kb.nextLine());

		System.out.printf("%d + %d = %d%n", a, b, a + b);
		System.out.printf("%d - %d = %d%n", a, b, a - b);
		System.out.printf("%d * %d = %d%n", a, b, a * b);
		System.out.printf("%d / %d = %d%n", a, b, a / b);
		System.out.printf("%d %% %d = %d%n", a, b, a % b);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Mod operatörünün birinci operandı negatif ise sonuç her zaman negatif çıkar
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Birinci sayıyı giriniz:");
		int a = Integer.parseInt(kb.nextLine());

		System.out.print("İkinci sayıyı giriniz:");
		int b = Integer.parseInt(kb.nextLine());

		System.out.printf("%d %% %d = %d%n", a, b, a % b);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı 3 basamaklı bir sayının basamakları toplamını
	döndüren get3DigitSum metodunu yazınız. Metot sayının 3 basamaklı olup olmadığını
	kontrol etmeyecektir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Üç basamaklı sayı giriniz:");
		int a = Integer.parseInt(kb.nextLine());

		System.out.printf("%d sayısının basamakları toplamı:%d%n", a, NumberUtil.get3DigitSum(a));
	}
}

class NumberUtil {
	public static int get3DigitSum(int val)
	{
		//...
		val = Math.abs(val);
		int a = val / 100;
		int b = val / 10 % 10;
		int c = val % 10;

		return a + b + c;
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı 3 basamaklı bir sayının basamakları toplamını
	döndüren get3DigitSum metodunu yazınız. Metot sayının 3 basamaklı olup olmadığını
	kontrol etmeyecektir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Üç basamaklı sayı giriniz:");
		int a = Integer.parseInt(kb.nextLine());

		System.out.printf("%d sayısının basamakları toplamı:%d%n", a, NumberUtil.get3DigitSum(a));
	}
}

class NumberUtil {
	public static int get3DigitSum(int val)
	{
		//...
		int a = val / 100;
		int b = val / 10 % 10;
		int c = val % 10;

		return Math.abs(a + b + c);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	17.11.2019
	İşaret - operatörü
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		int a = Integer.parseInt(kb.nextLine());

		int b = -a;

		System.out.printf("a=%d%n", a);
		System.out.printf("b=%d%n", b);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	İşaret + operatörü
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		int a = Integer.parseInt(kb.nextLine());

		int b = +a;

		System.out.printf("a=%d%n", a);
		System.out.printf("b=%d%n", b);
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Negatif sabitler aslında pozitif olan değerine işaret eksi operatörünün uygulanmış biçimidir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int a = -10;

		System.out.printf("a=%d%n", a);
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Aşağıdaki ilginç örneği inceleyiniz
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int a = 18 - - - - - - - - - - - 5;

		System.out.printf("a=%d%n", a);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Aşağıdaki ilginç örneği inceleyiniz
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Birinci sayıyı giriniz:");
		int a = Integer.parseInt(kb.nextLine());

		System.out.print("İkinci sayıyı giriniz:");
		int b = Integer.parseInt(kb.nextLine());

		int c = a - - - - - - - - - - b;

		System.out.printf("c=%d%n", c);
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	++ operatörü nasıl uygulanırsa uygulansın (prefix veya postfix) artırma işlemi yapılır
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Birinci sayıyı giriniz:");
		int a = Integer.parseInt(kb.nextLine());

		++a; // a = a + 1

		System.out.printf("a=%d%n", a);

	}
}

/*----------------------------------------------------------------------------------------------------------------------
	++ operatörü nasıl uygulanırsa uygulansın (prefix veya postfix) artırma işlemi yapılır
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Birinci sayıyı giriniz:");
		int a = Integer.parseInt(kb.nextLine());

		a++; // a = a + 1

		System.out.printf("a=%d%n", a);

	}
}

/*----------------------------------------------------------------------------------------------------------------------
	++ operatörünün prefix kullanımında ürettiği değer (işleme giren değer) artırılmış değerdir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Birinci sayıyı giriniz:");
		int a = Integer.parseInt(kb.nextLine());

		int b = ++a;

		System.out.printf("a=%d%n", a);
		System.out.printf("b=%d%n", b);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	++ operatörünün prefix kullanımı
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int a = 10;
		int b = ++a * 2;

		System.out.printf("a=%d%n", a);	 // a=11
		System.out.printf("b=%d%n", b);	 // b=22
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	++ operatörünün postfix kullanımı
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int a = 10;
		int b = a++ * 2;

		System.out.printf("a=%d%n", a);	 // a=11
		System.out.printf("b=%d%n", b);	 // b=20
	}
}
/*----------------------------------------------------------------------------------------------------------------------
	-- operatörünün postfix kullanımı
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int a = 10;
		int b = a-- * 2;

		System.out.printf("a=%d%n", a);	 // a=9
		System.out.printf("b=%d%n", b);	 // b=20
	}
}



/*----------------------------------------------------------------------------------------------------------------------
	++ operatörü ve -- operatörlerinin bir arada kullanımı
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int a = 10;
		int b;

		b = a++ + --a;

		System.out.printf("a=%d%n", a);
		System.out.printf("b=%d%n", b);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Derleyiciler anlamlı en uzun ifadeyi alacak şekilde işlem yaparlar. Aşağıdaki örneği inceleyiniz
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int a = 10;
		int b = 20;
		int c = a+++b; //a++ + b

		System.out.printf("a=%d%n", a); //a=11
		System.out.printf("b=%d%n", b); //b=20
		System.out.printf("c=%d%n", c);	//c=30

	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Karşılaştırma operatörlerinin ürettikleri değer boolean türdendir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Birinci sayıyı giriniz:");
		int a = Integer.parseInt(kb.nextLine());

		System.out.print("İkinci sayıyı giriniz:");
		int b = Integer.parseInt(kb.nextLine());

		System.out.println(a > b);
		System.out.println(a < b);
		System.out.println(a >= b);
		System.out.println(a <= b);
		System.out.println(a == b);
		System.out.println(a != b);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	&& operatörü
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		boolean result = Sample.foo() && Sample.bar();

		System.out.println(result);
	}
}


class Sample {
	public static boolean foo()
	{
		System.out.println("foo");

		return true;
	}

	public static boolean bar()
	{
		System.out.println("bar");

		return false;
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	|| operatörü
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		boolean result = Sample.bar() || Sample.foo();

		System.out.println(result);
	}
}


class Sample {
	public static boolean foo()
	{
		System.out.println("foo");

		return true;
	}

	public static boolean bar()
	{
		System.out.println("bar");

		return false;
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	&& operatörünün kısa devre davranışı (short circuit)
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		boolean result = Sample.bar() && Sample.foo();

		System.out.println(result);
	}
}


class Sample {
	public static boolean foo()
	{
		System.out.println("foo");

		return true;
	}

	public static boolean bar()
	{
		System.out.println("bar");

		return false;
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	&& operatörünün kısa devre davranışı (short circuit)
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		boolean result = Sample.bar() && Sample.foo();

		System.out.println(result);
	}
}


class Sample {
	public static boolean foo()
	{
		System.out.println("foo");

		return true;
	}

	public static boolean bar()
	{
		System.out.println("bar");

		return false;
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	|| operatörünün kısa devre davranışı (short circuit)
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		boolean result = Sample.foo() || Sample.bar();

		System.out.println(result);
	}
}


class Sample {
	public static boolean foo()
	{
		System.out.println("foo");

		return true;
	}

	public static boolean bar()
	{
		System.out.println("bar");

		return false;
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Mantıksal operatörler klasik öncelik kurallarına uymazlar. Ancak uyulduğunda elde edilecek sonucun
	aynısını üretirler. Bunu en kısa yoldan kısa devre özelliğinden yararlanarak yaparlar
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		boolean result = Sample.foo() || Sample.bar() && Sample.tar();

		System.out.println(result);
	}
}

class Sample {
	public static boolean foo()
	{
		System.out.println("foo");

		return true;
	}

	public static boolean bar()
	{
		System.out.println("bar");

		return false;
	}

	public static boolean tar()
	{
		System.out.println("tar");

		return false;
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Mantıksal operatörler doğru sonuca en kısa yoldan erişecek şekilde çalışırlar
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		boolean result = Sample.bar() && Sample.foo() || Sample.tar();

		System.out.println(result);
	}
}

class Sample {
	public static boolean foo()
	{
		System.out.println("foo");

		return true;
	}

	public static boolean bar()
	{
		System.out.println("bar");

		return false;
	}

	public static boolean tar()
	{
		System.out.println("tar");

		return false;
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Bitsel and ve bitsel or operatörleri
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int a = 10;
		int b = 11;

		int c = a & b;

		System.out.printf("c=%d%n", c);

		c = a | b;

		System.out.printf("c=%d%n", c);
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	& ve | operatörleri boolean türü ile kullanıldığında kısa devre özelliği olmayan and ve or operatörleri
	biçiminde düşünülebilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		boolean result = Sample.foo() | Sample.bar() & Sample.tar();

		System.out.println(result);
	}
}

class Sample {
	public static boolean foo()
	{
		System.out.println("foo");

		return true;
	}

	public static boolean bar()
	{
		System.out.println("bar");

		return false;
	}

	public static boolean tar()
	{
		System.out.println("tar");

		return false;
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Mantiksal değil operatörü
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		boolean a = false;

		boolean b = !a;

		System.out.printf("a=%b%n", a);
		System.out.printf("b=%b%n", b);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Mantiksal değil operatörünün bir kullanımı
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		boolean flag = false;

		flag = !flag;

		System.out.printf("flag=%b%n", flag);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	23.11.2019
	Aşağıdaki örnekte operatörlerin ürettiği değerlerden faydalanılmıştır
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		int a = Integer.parseInt(kb.nextLine());

		System.out.println(NumberUtil.isEven(a));
		System.out.println(NumberUtil.isOdd(a));
	}
}


class NumberUtil {
	public static boolean isEven(int val)
	{
		return val % 2 == 0;
	}

	public static boolean isOdd(int val)
	{
		return !isEven(val);
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Aşağıdaki örnekte operatörlerin ürettiği değerlerden faydalanılmıştır
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		int a = Integer.parseInt(kb.nextLine());

		System.out.println(NumberUtil.isPositive(a));
		System.out.println(NumberUtil.isNegative(a));
	}
}


class NumberUtil {
	public static boolean isPositive(int val)
	{
		return val > 0;
	}

	public static boolean isNegative(int val)
	{
		return val < 0;
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Atama operatörü
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int a = 10;

		a = 23;

		System.out.println(a);

	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Atama operatörü	sağdan sola önceliklidir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int a, b, c = 34;

		a = b = c;

		System.out.printf("a=%d%n", a);
		System.out.printf("b=%d%n", b);
		System.out.printf("c=%d%n", c);

	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Aşağıdaki örnekte error oluşur
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int a, b = 3, c = 34;

		(a = b) = c; //error

		System.out.printf("a=%d%n", a);
		System.out.printf("b=%d%n", b);
		System.out.printf("c=%d%n", c);

	}
}


/*----------------------------------------------------------------------------------------------------------------------
	İşlemli atama operatörleri (augmented assignment operators)
	<op1> <op>= <op2>
	<op1> = <op1> <op> <op2>

	a += b;

	a = a + b;
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int a = 20, b = 3;


		a += b; //a = a + b;

		System.out.printf("a=%d%n", a);
		System.out.printf("b=%d%n", b);

	}
}


/*----------------------------------------------------------------------------------------------------------------------
	İşlemli atama operatörleri ifadeleri basitleştirmek için kullanılır
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int a = 20, b = 3;

		a *= b + 1; // a = a * (b + 1);

		System.out.printf("a=%d%n", a);
		System.out.printf("b=%d%n", b);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	İşlemli atama operatörleri ile atama operatörü aynı seviyededir. Aşağıdaki örnek sağdan sola
	yapılır
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{

		int a = 10, b = 3, c;

		c = a += b;

		System.out.printf("a=%d%n", a);
		System.out.printf("b=%d%n", b);
		System.out.printf("c=%d%n", c);

	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Java'da genel olarak etkisiz ifadeler geçersizdir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int a = 10, b = 30;

		a + b; //error: etkisiz ifade

		++a;
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Statement (deyimler):
	1. Basit deyimler (simple statements): Bir ifadenin sonuna noktalı virgül konmasıyla oluşur
	2. Bileşik deyimler (compound statements): Bir metot içerisinde {} ile yazılan deyimlere denir
	3. Bildirim deyimleri (declaration statements): Bildirim yapılan deyimlere denir
	4. Kontrol deyimleri (control statements): Akışa yön verilebilen deyimlerdir
	5. Boş deyim (null statement): Noktalı virgülün tek başına kullanımıdır
----------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------
	Basit deyimler
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int a = 10;

		++a; //basit deyim

		System.out.printf("a=%d%n", a);

	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Bileşik deyimler
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		{ //Bileşik deyim
			int a = 10;

			++a;
			{ //bileşik
				a--;
			}
		}

	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Bildirim deyimleri
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int a; //bildirim deyimi
		int b = 10; //bildirim deyimi

		a = 10;

	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Boş deyim
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int a;
		; //boş deyim
		;;;;;;;;;;;;;;;

	}
}


/*----------------------------------------------------------------------------------------------------------------------
	if deyiminin genel biçimi:
	if (<boolean türden ifade>)
		<deyim>
	[else
		<deyim>
	]
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		int a = Integer.parseInt(kb.nextLine());

		if (a % 2 == 0)
			System.out.println("Çift");
		else
			System.out.println("Tek");
	}
}





/*----------------------------------------------------------------------------------------------------------------------
	else kısmı olmayan if deyimi
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		int a = Integer.parseInt(kb.nextLine());

		if (a % 2 == 0)
			a /= 2;

		System.out.printf("a=%d%n", a);
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	if deyiminde yanlışlıkla noktalı virgül konması durumu
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		int a = Integer.parseInt(kb.nextLine());

		if (a % 2 == 0);
			a /= 2;

		System.out.printf("a=%d%n", a);
	}
}



/*----------------------------------------------------------------------------------------------------------------------
	if deyiminde yanlışlıkla noktalı virgül konması durumunda error oluşması
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		int a = Integer.parseInt(kb.nextLine());

		if (a % 2 == 0);
			System.out.println("Çift");
		else //else
			System.out.println("Tek");
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	if deyiminin else kısmında başka if deyimi olması durumu
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		int a = Integer.parseInt(kb.nextLine());

		if (a > 0)
			System.out.println("Pozitif");
		else
			if (a == 0)
				System.out.println("Sıfır");
			else
				System.out.println("Negatif");

	}
}





/*----------------------------------------------------------------------------------------------------------------------
	Yukarıdaki örnek aşağıdaki gibi basit bir biçimde yazılabilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		int a = Integer.parseInt(kb.nextLine());

		if (a > 0)
			System.out.println("Pozitif");
		else if (a == 0)
			System.out.println("Sıfır");
		else
			System.out.println("Negatif");
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Aşağıdaki örnekte koşullar ayrık olduğundan doğru çalışsada else kısmı olmadan yazılması tavisiye edilmez
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		int a = Integer.parseInt(kb.nextLine());

		if (a > 0)
			System.out.println("Pozitif");
		if (a == 0)
			System.out.println("Sıfır");
		if (a < 0)
			System.out.println("Negatif");
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Aşağıdaki koşullar ayrık olmadığından else if yazılması doğru olmaz
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		int a = Integer.parseInt(kb.nextLine());

		if (a > 7)
			System.out.println("a > 7");
		if (a > 13)
			System.out.println("a > 13");

	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Aşağıdaki örnekte else kısmı içteki if deyimine ilişkindir (dangling else)
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		int a = Integer.parseInt(kb.nextLine());

		if (a > 0)
			if (a % 2 == 0)
				System.out.println("Çift");
		else
			System.out.println("Pozitif değil");
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Yukarıdaki problem aşağıdaki gibi çözülebilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		int a = Integer.parseInt(kb.nextLine());

		if (a > 0) {
			if (a % 2 == 0)
				System.out.println("Çift");
		}
		else
			System.out.println("Pozitif değil");
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Aşağıdaki örnek dangling else değildir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		int a = Integer.parseInt(kb.nextLine());

		if (a > 0)
			if (a % 2 == 0)
				System.out.println("Çift");
			else
				System.out.println("Tek");
		else
			System.out.println("Pozitif değil");
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	boolean türden ifadelerin if deyimi içerisinde kullanımı
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		int a = Integer.parseInt(kb.nextLine());

		boolean flag = false;

		if (a > 0)
			flag = true;

		//...

		if (flag) //if (flag == true)
			System.out.println("Doğru");
		else
			System.out.println("Yanlış");

	}
}

/*----------------------------------------------------------------------------------------------------------------------
	boolean türden ifadelerin if deyimi içerisinde kullanımı
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		int a = Integer.parseInt(kb.nextLine());

		boolean flag = false;

		if (a > 0)
			flag = true;

		//...


		if (!flag) //if (flag == false)
			System.out.println("Yanlış");
		else
			System.out.println("Doğru");

	}
}



/*----------------------------------------------------------------------------------------------------------------------
	boolean türüne dönen metotların if deyimi içerisinde kullanımı
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		int a = Integer.parseInt(kb.nextLine());

		if (NumberUtil.isEven(a)) //if (NumberUtil.isEven(a) == true)
			System.out.println("Çift");
		else
			System.out.println("Tek");


	}
}


class NumberUtil {
	public static boolean isEven(int val)
	{
		return val % 2 == 0;
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	boolean türüne dönen metotların if deyimi içerisinde kullanımı
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		int a = Integer.parseInt(kb.nextLine());

		if (!NumberUtil.isEven(a)) //if (NumberUtil.isEven(a) == false)
			System.out.println("Tek");
		else
			System.out.println("Çift");

	}
}


class NumberUtil {
	public static boolean isEven(int val)
	{
		return val % 2 == 0;
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Katsayıları klavyeden girilen ikinci dereceden bir denklemin köklerini
	bulan programı yazınız
	(ikinci-dereceden-denklem.png dosyasına bakınız)
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		FindRootsApp.run();
	}
}


class FindRootsApp {
	public static void findRoots(double a, double b, double c)
	{
		double delta = b * b - 4 * a *c;

		if (delta > 0) {
			double sqrtDelta = Math.sqrt(delta);
			double x1 = (-b + sqrtDelta) / (2 * a);
			double x2 = (-b - sqrtDelta) / (2 * a);

			System.out.printf("x1=%f, x2=%f%n", x1, x2);
		}
		else if (delta == 0) {
			double x = -b / (2 * a);

			System.out.printf("x1=x2=%f%n", x);
		}
		else
			System.out.println("Gerçek kök yok");
	}

	public static void run()
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.println("Katsayıları giriniz:");
		System.out.print("a?");
		double a = Double.parseDouble(kb.nextLine());
		System.out.print("b?");
		double b = Double.parseDouble(kb.nextLine());
		System.out.print("c?");
		double c = Double.parseDouble(kb.nextLine());

		findRoots(a, b, c);
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Katsayıları klavyeden girilen ikinci dereceden bir denklemin köklerini
	bulan programı yazınız
	(ikinci-dereceden-denklem.png dosyasına bakınız)
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		FindRootsApp.run();
	}
}

class FindRootsApp {
	public static void findRoots(double a, double b, double c)
	{
		double delta = b * b - 4 * a *c;

		if (delta >= 0) {
			double sqrtDelta = Math.sqrt(delta);
			double x1 = (-b + sqrtDelta) / (2 * a);
			double x2 = (-b - sqrtDelta) / (2 * a);

			System.out.printf("x1=%f, x2=%f%n", x1, x2);
		}
		else
			System.out.println("Gerçek kök yok");
	}

	public static void run()
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.println("Katsayıları giriniz:");
		System.out.print("a?");
		double a = Double.parseDouble(kb.nextLine());
		System.out.print("b?");
		double b = Double.parseDouble(kb.nextLine());
		System.out.print("c?");
		double c = Double.parseDouble(kb.nextLine());

		findRoots(a, b, c);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Kontrolün başta yapıldığı while döngü deyimi (while)
	while (<boolean türden ifade>)
		<deyim>
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.println("n değerini giriniz:");
		int n = Integer.parseInt(kb.nextLine());

		int i = 0;

		while (i < n) {
			System.out.printf("i=%d%n", i);
			++i;
		}

		System.out.println("Tekrar yapıyor musunuz?");
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	while döngü deyiminde yanlışlıkla noktalı virgül konması durumu
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.println("n değerini giriniz:");
		int n = Integer.parseInt(kb.nextLine());

		int i = 0;

		while (i < n); {
			System.out.printf("i=%d%n", i);
			++i;
		}

		System.out.println("Tekrar yapıyor musunuz?");
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	while döngü deyimi ile sonsuz döngü kalıbı
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		while (true) {
			//...
		}
	}
}



/*----------------------------------------------------------------------------------------------------------------------
	while döngü deyimi ile n-kez dönen döngü kalıbı (dizi uyumlu)
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.println("n değerini giriniz:");
		int n = Integer.parseInt(kb.nextLine());

		int i = 0;

		while (i < n) {
			System.out.printf("i=%d%n", i);
			++i;
		}

		System.out.println("Tekrar yapıyor musunuz?");
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	while döngü deyimi ile n-kez dönen döngü kalıbı (dizi uyumlu)
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.println("n değerini giriniz:");
		int n = Integer.parseInt(kb.nextLine());

		int i = n - 1;

		while (i >= 0) {
			System.out.printf("i=%d%n", i);
			--i;
		}

		System.out.println("Tekrar yapıyor musunuz?");
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	while döngü deyimi ile n-kez dönen döngü kalıbı
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.println("n değerini giriniz:");
		int n = Integer.parseInt(kb.nextLine());

		int i = 1;

		while (i <= n) {
			System.out.printf("i=%d%n", i);
			++i;
		}

		System.out.println("Tekrar yapıyor musunuz?");
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	24.11.2019
	while döngü deyimi ile n-kez dönen döngü kalıbı. Dikkat n döngü sonunda değişiyor. Yani orjinal
	değer kaybediliyor
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.println("n değerini giriniz:");
		int n = Integer.parseInt(kb.nextLine());

		while (n-- > 0)
			System.out.printf("n=%d%n", n);

		System.out.printf("Döngü sonrası:n=%d%n", n);

		System.out.println("Tekrar yapıyor musunuz?");
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	while döngü deyiminin parantezi içerisinde bir değişkene bir metodun geri dönüş değerinin
	atanıp o değerin karşılaştırılması işlemi.
	Aşağıdaki örnekte klavyeden sıfır girilene kadar alınan sayıların toplamı bulunmaktadır
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.println("Sayıları girmeye başlayınız:");
		int val;
		int sum = 0;

		while ((val = Integer.parseInt(kb.nextLine())) != 0)
			sum += val;

		System.out.printf("Toplam:%d%n", sum);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Klavyeden sıfır girilene kadar alınan sayılardan pozitif ve negatif olanlarının
	ayrı ayrı toplamını ve her birinden kaçar tane sayı girildiğini bulan programı yazınız
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		PosNegReportApp.run();
	}
}

class PosNegReportApp {
	public static void run()
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.println("Sayıları girmeye başlayınız:");
		int posCount = 0, negCount = 0, posSum = 0, negSum = 0;

		int val;

		while ((val = Integer.parseInt(kb.nextLine())) != 0)
			if (val > 0) {
				++posCount;
				posSum += val;
			}
			else {
				++negCount;
				negSum += val;
			}

		if (posCount > 0) {
			System.out.printf("%d tane pozitif sayı girdiniz%n", posCount);
			System.out.printf("Girien pozitif sayıların toplamı:%d%n", posSum);
		}
		else
			System.out.println("Hiç pozitif sayı girmediniz");

		System.out.println("******************************************");
		if (negCount > 0) {
			System.out.printf("%d tane negatif sayı girdiniz%n", negCount);
			System.out.printf("Girien negatif sayıların toplamı:%d%n",negSum);
		}
		else
			System.out.println("Hiç negatif sayı girmediniz");
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı int türde bir sayının basamak sayısını döndüren getDigitsCount
	isimli metodu yazınız ve test ediniz
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		int val = Integer.parseInt(kb.nextLine());

		int count = NumberUtil.getDigitsCount(val);

		System.out.printf("%d sayısının basamak sayısı:%d%n", val, count);

	}
}

class NumberUtil {
	public static int getDigitsCount(int val)
	{
		if (val == 0)
			return 1;

		int count = 0;

		while (val != 0) {
			++count;
			val /= 10;
		}

		return count;
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı int türden bir sayının basamakları toplamını döndüren
	getDigitsSum isimli metodu yazınız ve test ediniz
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		int val = Integer.parseInt(kb.nextLine());

		int sum = NumberUtil.getDigitsSum(val);

		System.out.printf("%d sayısının basamakları toplamı:%d%n", val, sum);
	}
}

class NumberUtil {
	public static int getDigitsSum(int val)
	{
		int sum = 0;

		while (val != 0) {
			sum += val % 10;
			val /= 10;
		}

		return Math.abs(sum);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı int türden bir sayının tersini döndüren getReverse
	isimli metodu yazınız ve test ediniz
	123 -> 3 -> 3 * 10 + 2 = 32 -> 32 * 10 + 1 = 321
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		int val = Integer.parseInt(kb.nextLine());

		int rev = NumberUtil.getReverse(val);

		System.out.printf("%d sayısının tersi:%d%n", val, rev);
	}
}

class NumberUtil {
	public static int getReverse(int val)
	{
		int rev = 0;

		while (val != 0) {
			rev = rev * 10 + val % 10;
			val /= 10;
		}

		return rev;
	}
}





/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı int türden bir sayının palindrom olup olmadığını
	test eden isPalindrome isimli metodu yazınız ve test ediniz
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		int val = Integer.parseInt(kb.nextLine());

		if (NumberUtil.isPalindrome(val))
			System.out.printf("%d sayısı palindromdur%n", val);
		else
			System.out.printf("%d sayısı palindrom değildir%n", val);
	}
}

class NumberUtil {
	public static boolean isPalindrome(int val)
	{
		return getReverse(val) == val;
	}

	public static int getReverse(int val)
	{
		int rev = 0;

		while (val != 0) {
			rev = rev * 10 + val % 10;
			val /= 10;
		}

		return rev;
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Kontrolün sonda yapıldığı while döngü deyimi: (do-while)
	do
		<deyim>
	while (<boolean türden ifade>);
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		int n = Integer.parseInt(kb.nextLine());

		int i = 0;

		do {
			System.out.printf("i=%d%n", i);
			++i;
		}
		while (i < n);

		System.out.println("Tekrar yapıyor musunuz?");
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Aşağıdaki örnekte val değeri faaliyet alanı dışında olduğundan while içerisinde kullanılamaz
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);


		do {
			System.out.print("Bir sayı giriniz:");
			int val = Integer.parseInt(kb.nextLine());
			System.out.printf("val=%d%n", val);
		}
		while (val != 0); //error

		System.out.println("Tekrar yapıyor musunuz?");
	}
}






/*----------------------------------------------------------------------------------------------------------------------
	Yukarıdaki problem aşağıdaki gibi çözülebilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);


		int val;

		do {
			System.out.print("Bir sayı giriniz:");
			val = Integer.parseInt(kb.nextLine());
			System.out.printf("val=%d%n", val);
		}
		while (val != 0);

		System.out.println("Tekrar yapıyor musunuz?");
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı int türde bir sayının basamak sayısını döndüren getDigitsCount
	isimli metodu yazınız ve test ediniz
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		int val = Integer.parseInt(kb.nextLine());

		int count = NumberUtil.getDigitsCount(val);

		System.out.printf("%d sayısının basamak sayısı:%d%n", val, count);
	}
}

class NumberUtil {
	public static int getDigitsCount(int val)
	{
		int count = 0;

		do {
			++count;
			val /= 10;
		} while (val != 0);


		return count;
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	for döngü deyiminin genel biçimi:
	for ([1.bölüm]; [2.bölüm]; [3.bölüm])
		<deyim>
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int i;

		for (i = 0; i < 10; ++i)
			System.out.printf("i=%d%n", i);

	}
}

/*----------------------------------------------------------------------------------------------------------------------
	for döngü deyiminin 1. bölümünde değişken bildirimi yapılabilir. Bu değişkenin faaliyet alanı döngü
	deyimi boyuncadır. Bu tarz değişkenlere döngü değişkeni de denir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{

		for (int i = 0; i < 10; ++i)
			System.out.printf("i=%d%n", i);

		System.out.printf("Döngü sonrası:i=%d%n", i); //error
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	for döngü deyiminde yanlışlıkla noktalı virgül kullanılması durumu
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{

		for (int i = 0; i < 10; ++i);
			System.out.println("merhaba");
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Aşağıdaki örnek geçerlidir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{

		for (int i = 0; i < 10; ++i)
			System.out.printf("First Loop:i=%d%n", i);

		System.out.println("******************");

		for (int i = 0; i < 10; ++i)
			System.out.printf("Second Loop:i=%d%n", i);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	for döngü deyiminde koşul kontrolü 1. bölüm yapıldıktan sonra da ilk adımda da yapılır
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		int n = Integer.parseInt(kb.nextLine());

		for (int i = 0; i < n; ++i)
			System.out.printf("%d ", i);

		System.out.println();
		System.out.println("Tekrar yapıyor musunuz?");
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	for döngü deyiminde n-kez dönen döngü kalıbı (dizi uyumlu)
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		int n = Integer.parseInt(kb.nextLine());

		for (int i = 0; i < n; ++i)
			System.out.printf("%d ", i);

		System.out.println();
		System.out.println("Tekrar yapıyor musunuz?");
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	for döngü deyiminde n-kez dönen döngü kalıbı (dizi uyumlu)
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		int n = Integer.parseInt(kb.nextLine());

		for (int i = n - 1; i >= 0; --i)
			System.out.printf("%d ", i);

		System.out.println();
		System.out.println("Tekrar yapıyor musunuz?");
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Sonsuz döngü sanılan bir döngü örneği
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int i = 0;

		for (i = 0; i < 10; --i)
			; //System.out.printf("i=%d%n", i);

		System.out.printf("Döngü sonrası:i=%d%n", i);

		System.out.println("Tekrar yapıyor musunuz?");
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	for döngü deyiminin birinci ve üçüncü bölümünde virgül ayraç olarak kullanılabilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		for (int i = 0, k = 10; i < 10 && k >= 0; ++i, --k)
			System.out.printf("(%d, %d)%n", i , k);
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	for döngü deyiminin birinci bölümünde değişken birden fazla değişken bildirimi yapılıyorsa değişkenler
	aynı türden olmak zorundadır
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		for (int i = 0, double k = 10; i < 10 && k >= 0; ++i, --k) //error
			System.out.printf("(%d, %d)%n", i , k);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	for döngü deyiminin gücü
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);

		int sum = 0;
		int val;

		for (System.out.println("Sayıları girmeye başlayınız:");
				(val = Integer.parseInt(kb.nextLine())) != 0; sum += val)
			;

		System.out.printf("Toplam:%d%n", sum);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	for döngü deyiminin gücü
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);

		int sum = 0;
		int val;

		for (System.out.println("Sayıları girmeye başlayınız:"), System.out.println("Sayı?");
				(val = Integer.parseInt(kb.nextLine())) != 0; sum += val, System.out.println("Sayı?"))
			;

		System.out.printf("Toplam:%d%n", sum);
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	30.11.2019
	for döngü deyiminin birinci bölümünün boş bırakılması durumu
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int i = 0;

		for (; i < 10; ++i)
			System.out.printf("i=%d%n", i);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	for döngü deyiminin üçüncü bölümünün boş bırakılması durumu
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		for (int i = 0; i < 10; ) {
			System.out.printf("i=%d%n", i);
			++i;
		}
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	for döngü deyiminin birinci ve üçüncü bölümlerinin boş bırakılması durumu
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int i = 0;

		for (; i < 10; ) {
			System.out.printf("i=%d%n", i);
			++i;
		}
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	for döngü deyiminin ikinci kısmın boş bırakılması sonsuz döngü olmasını sağlar
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		for (int i = 0; ; ++i) {
			System.out.printf("i=%d%n", i);
			++i;
		}
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	for döngü deyimi ile sonsuz döngü kalıbı
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int i = 0;

		for (;;) {
			System.out.printf("i=%d%n", i);
			++i;
		}
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı int türden a ve b bilgileri için a üzeri b nin değerini
	döndüren pow metodunu Math.pow metodunu kullanmadan yazınız ve test ediniz
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("a:");
		int a = Integer.parseInt(kb.nextLine());

		System.out.print("b:");
		int b = Integer.parseInt(kb.nextLine());

		System.out.printf("pow(%d, %d)=%d%n", a, b, NumberUtil.pow(a, b));
	}
}

class NumberUtil {
	public static int pow(int a, int b)
	{
		b = Math.abs(b);
		int result = 1;

		for (int i = 0; i < b; ++i)
			result *= a;

		return result;
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı int türden a ve b bilgileri için a üzeri b nin değerini
	döndüren pow metodunu Math.pow metodunu kullanmadan yazınız ve test ediniz
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("a:");
		int a = Integer.parseInt(kb.nextLine());

		System.out.print("b:");
		int b = Integer.parseInt(kb.nextLine());

		System.out.printf("pow(%d, %d)=%d%n", a, b, NumberUtil.pow(a, b));
	}
}

class NumberUtil {
	public static int pow(int a, int b)
	{
		b = Math.abs(b);
		int result = 1;

		while (b-- > 0)
			result *= a;

		return result;
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı bir sayının Armstrong sayısı olup olmadığını test eden
	isArmstrong isimli metodu yazınız ve test ediniz.

	Armstrong Sayıları: Basamaklarının basamak sayıncı kuvvetleri toplamı kendisine eşit olan sayılara denir

	153 = 1 * 1 * 1 + 5 * 5 * 5 + 3 * 3 * 3
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		for (int n = 0; n <= 999999; ++n)
			if (NumberUtil.isArmstrong(n))
				System.out.printf("%d ", n);

		System.out.println();
	}
}

class NumberUtil {
	public static boolean isArmstrong(int val)
	{
		if (val < 0)
			return false;

		return val == getSum(val);
	}

	public static int getSum(int val)
	{
		int n = getDigitsCount(val);

		int sum = 0;

		while (val != 0) {
			sum += pow(val % 10, n);
			val /= 10;
		}

		return sum;
	}

	public static int getDigitsCount(int val)
	{
		int count = 0;

		do {
			++count;
			val /= 10;
		} while (val != 0);

		return count;
	}

	public static int pow(int a, int b)
	{
		b = Math.abs(b);
		int result = 1;

		while (b-- > 0)
			result *= a;

		return result;
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	İçiçe döngüler
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		for (int i = 0; i < 5; ++i)
			for (int k = 0; k < 3; ++k)
				System.out.printf("(%d, %d)%n", i, k);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	İçiçe döngüler
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		for (int i = 0; i < 5; ++i)
			Sample.print(i);
	}
}

class Sample {
	public static void print(int i)
	{
		for (int k = 0; k < 3; ++k)
			System.out.printf("(%d, %d)%n", i, k);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	3 basamaklı Armstrong sayılarını ekrana yazdıran program
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		for (int a = 1; a <= 9; ++a)
			for (int b = 0; b <=9; ++b)
				for (int c = 0; c <= 9; ++c)
					if (100 * a + 10 * b + c == a * a * a + b * b * b + c * c * c)
						System.out.printf("%d%d%d ", a, b, c);

		System.out.println();
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı int türden bir sayının faktoriyelini döndüren
	factorial isimli metodu yazınız ve test ediniz. Metot negatif bir sayı için -1 döndürecektir

	0! = 1
	1! = 1
	2! = 1 * 2

	n! = 1 * 2 * ... * n - 1 * n
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		int val = Integer.parseInt(kb.nextLine());

		for (int n = 0; n <= val; ++n)
			System.out.printf("%d!=%d%n", n, NumberUtil.factorial(n));

		System.out.println("*********************");
		System.out.printf("%d!=%d%n", -3, NumberUtil.factorial(-3));
	}
}

class NumberUtil {
	public static int factorial(int n)
	{
		if (n < 0)
			return -1;

		int result = 1;

		for (int i = 2; i <= n; ++i)
			result *= i;

		return result;
	}
}



/*----------------------------------------------------------------------------------------------------------------------
	Parametresi ile aldığı bir sayının asal olup olmadığını test eden isPrime metodu ve test kodu
	(Yavaş versiyon)
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		for (int n = -10; n <= 100; ++n)
			if (NumberUtil.isPrime(n))
				System.out.printf("%d ", n);

		System.out.println();

		System.out.println(NumberUtil.isPrime(1_000_003));
	}
}

class NumberUtil {
	public static boolean isPrime(int val)
	{
		if (val <= 1)
			return false;

		int halfVal = val / 2;

		for (int i = 2; i <= halfVal; ++i)
			if (val % i == 0)
				return false;

		return true;
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Parametresi ile aldığı bir sayının asal olup olmadığını test eden isPrime metodu ve test kodu
	Teorem: Bir sayının asal olabilmesi için karakökünden küçük olan hiç bir asal sayıya bölünememesi gerekir
	(Hızlı versiyon)
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		for (int n = -10; n <= 100; ++n)
			if (NumberUtil.isPrime(n))
				System.out.printf("%d ", n);

		System.out.println();

		System.out.println(NumberUtil.isPrime(1_000_003));
	}
}

class NumberUtil {
	public static boolean isPrime(int val)
	{
		if (val <= 1)
			return false;

		if (val % 2 == 0)
			return val == 2;

		if (val % 3 == 0)
			return val == 3;

		if (val % 5 == 0)
			return val == 5;

		if (val % 7 == 0)
			return val == 7;

		for (int i = 11; i * i <= val; i += 2)
			if (val % i == 0)
				return false;

		return true;
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	01.12.2019
	Yukarıda yazılan isPrime metotlarının karşılaştırılması
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		System.out.println(NumberUtil.isPrimeFast(1_000_003));
		System.out.println(NumberUtil.isPrimeSlow(1_000_003));
	}
}

class NumberUtil {
	public static boolean isPrimeFast(int val)
	{
		if (val <= 1)
			return false;

		if (val % 2 == 0)
			return val == 2;

		if (val % 3 == 0)
			return val == 3;

		if (val % 5 == 0)
			return val == 5;

		if (val % 7 == 0)
			return val == 7;

		int count = 0;
		for (int i = 11; i * i <= val; i += 2) {
			++count;
			if (val % i == 0)
				return false;
		}

		System.out.printf("isPrimeFast:count=%d%n", count);

		return true;
	}

	public static boolean isPrimeSlow(int val)
	{
		if (val <= 1)
			return false;

		int halfVal = val / 2;

		int count = 0;
		for (int i = 2; i <= halfVal; ++i) {
			++count;
			if (val % i == 0)
				return false;
		}

		System.out.printf("isPrimeSlow:count=%d%n", count);

		return true;
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı int türden n değeri için n-inci asal sayıyı döndüren
	getPrime isimli metodu yazınız ve test ediniz. Metot n değerinin pozitif olmayan değerleri
	için -1 döndürecektir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);

		System.out.println("Sayıları girmeye başlayınız. Çıkmak için pozitif olmayan bir sayı giriniz");

		int n;

		while ((n = Integer.parseInt(kb.nextLine())) >= 0)
			System.out.printf("%d. asal sayı:%d%n", n, NumberUtil.getPrime(n));

		System.out.println("Tekrar yapıyor musunuz?");
	}
}

class NumberUtil {
	public static int getPrime(int n)
	{
		if (n <= 0)
			return -1;

		int count = 0, val = 0;

		for (int i = 2; count < n; ++i) {
			if (isPrime(i)) {
				++count;
				val = i;
			}
		}

		return val;
	}

	public static boolean isPrime(int val)
	{
		if (val <= 1)
			return false;

		if (val % 2 == 0)
			return val == 2;

		if (val % 3 == 0)
			return val == 3;

		if (val % 5 == 0)
			return val == 5;

		if (val % 7 == 0)
			return val == 7;

		for (int i = 11; i * i <= val; i += 2)
			if (val % i == 0)
				return false;


		return true;
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı int türden n değeri için n-inci asal sayıyı döndüren
	getPrime isimli metodu yazınız ve test ediniz. Metot n değerinin pozitif olmayan değerleri
	için -1 döndürecektir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);

		System.out.println("Sayıları girmeye başlayınız. Çıkmak için pozitif olmayan bir sayı giriniz");

		int n;

		while ((n = Integer.parseInt(kb.nextLine())) > 0)
			System.out.printf("%d. asal sayı:%d%n", n, NumberUtil.getPrime(n));

		System.out.println("Tekrar yapıyor musunuz?");
	}
}

class NumberUtil {
	public static int getPrime(int n)
	{
		if (n <= 0)
			return -1;

		int count = 0, val = 0;

		int i = 2;

		for (;;) {
			if (isPrime(i))
				++count;

			if (count == n)
				return i;
			++i;
		}
	}

	public static boolean isPrime(int val)
	{
		if (val <= 1)
			return false;

		if (val % 2 == 0)
			return val == 2;

		if (val % 3 == 0)
			return val == 3;

		if (val % 5 == 0)
			return val == 5;

		if (val % 7 == 0)
			return val == 7;

		for (int i = 11; i * i <= val; i += 2)
			if (val % i == 0)
				return false;


		return true;
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile int türden bir n değeri için n-inci Fiboannaci sayısını döndüren
	getFibonacciNumber isimli metodu yazınız ve test ediniz. Metot pozitif olmayan değerler için
	-1 döndürecektir

	0 1 1 2 3 5 8 ...
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);

		System.out.println("Sayıları girmeye başlayınız. Çıkmak için pozitif olmayan bir sayı giriniz");

		int n;

		while ((n = Integer.parseInt(kb.nextLine())) > 0)
			System.out.printf("%d. fibonnaci sayı:%d%n", n, NumberUtil.getFibonnaciNumber(n));

		System.out.println("Tekrar yapıyor musunuz?");
	}
}

class NumberUtil {
	public static int getFibonnaciNumber(int n)
	{
		if (n <= 0)
			return -1;

		if (n <= 2)
			return n - 1;

		int prev1 = 0, prev2 = 1, val = 0;

		for (int i = 2; i < n; ++i) {
			val = prev1 + prev2;
			prev1 = prev2;
			prev2 = val;
		}

		return val;
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması:Parametresi ile aldığı bir sayıdan büyük en küçük Fibonacci sayısını döndüren
	getNextFibonacciNumber metodunu yazınız ve test ediniz

	0 1 1 2 3 5 8 13 21
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);

		System.out.println("Sayıları girmeye başlayınız. Çıkmak için pozitif olmayan bir sayı giriniz");

		int n;

		while ((n = Integer.parseInt(kb.nextLine())) != -1234)
			System.out.printf("%d sayısından büyük en küçük fibonnaci sayıs:%d%n", n, NumberUtil.getNextFibonacciNumber(n));

		System.out.println("Tekrar yapıyor musunuz?");
	}
}

class NumberUtil {
	public static int getNextFibonacciNumber(int val)
	{
		if (val < 0)
			return 0;

		int prev1 = 0, prev2 = 1, number = 0;

		for (;;) {
			number = prev1 + prev2;
			if (number > val)
				return number;

			prev1 = prev2;
			prev2 = number;
		}
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	break [etiket ismi];
	break deyiminin etiketsiz kullanımı döngünün sonlanmasını sağlar:
	Aşağıdaki örnekte klavyeden sıfır girilene kadar alınan sayıların toplamı bulunmuştur
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.println("Sayıları girmeye başlayınız:");

		int sum = 0;

		for (;;) {
			System.out.print("Sayıyı giriniz:");
			int val = Integer.parseInt(kb.nextLine());

			if (val == 0)
				break;

			sum += val;
		}

		System.out.printf("Toplam:%d%n", sum);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	break deyimi döngü deyimlerinde ve switch deyiminde kullanılabilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{

	}
}

class Sample {
	public static void foo(int val)
	{
		if (val == 0)
			break; //error

		//...
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Aşağıdaki örnekte en içteki döngüde koşul gerçekleştiğinde tüm döngü sonlandırılmıştır
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		boolean exitFlag = false;

		for (int i = 1; i < 10; ++i) {
			for (int k = 20; k >= 0; --k) {
				System.out.printf("(%d, %d)%n", i, k);
				if ((i + k) % 4 == 0) {
					exitFlag = true;
					break;
				}
			}

			if (exitFlag)
				break;
		}

		System.out.println("Tekrar yapıyor musunuz?");
	}
}



/*----------------------------------------------------------------------------------------------------------------------
	Etiketli break deyimi ile yukarıdaki kod daha okunabilir olarak yazılabilmektedir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		EXIT_LOOP:
		for (int i = 1; i < 10; ++i) {
			for (int k = 20; k >= 0; --k) {
				System.out.printf("(%d, %d)%n", i, k);
				if ((i + k) % 4 == 0)
					break EXIT_LOOP;
			}
		}

		System.out.println("Tekrar yapıyor musunuz?");
	}
}



/*----------------------------------------------------------------------------------------------------------------------
	Etiketli break deyimi
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		EXIT_LOOP:
		for (int i = 1; i < 10; ++i) {
			EXIT_SECOND_LOOP:
			for (int j = 0; j < 30; ++j) {
				for (int k = 20; k >= 0; --k) {
					System.out.printf("(%d, %d, %d)%n", i, j, k);
					if ((i + j + k) % 2 == 0)
						break EXIT_SECOND_LOOP;

					if ((i + j + k) % 4 == 0)
						break EXIT_LOOP;
				}
			}
		}

		System.out.println("Tekrar yapıyor musunuz?");
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	continue [etiket ismi];
	continue deyimi
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		int n = Integer.parseInt(kb.nextLine());

		for (int i = 1; i <= n; ++i) {
			if (i % 2 != 0)
				continue;

			System.out.printf("%d ", i);
		}

		System.out.println("\nTekrar yapıyor musunuz?");
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Basit bir menü uygulaması iskeleti
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		SimpleMenuApp.run();
	}
}

class SimpleMenuApp {
	public static void displayMenu()
	{
		System.out.println("1.Ekle");
		System.out.println("2.Sil");
		System.out.println("3.Güncelle");
		System.out.println("4.Listele");
		System.out.println("5.Ara");
		System.out.println("6.Çıkış");
		System.out.print("Seçenek:");
	}

	public static void insertProc()
	{
		System.out.println("Ekle seçildi");
	}

	public static void deleteProc()
	{
		System.out.println("Sil seçildi");
	}

	public static void updateProc()
	{
		System.out.println("Güncelle seçildi");
	}

	public static void listProc()
	{
		System.out.println("Listele seçildi");
	}

	public static void searchProc()
	{
		System.out.println("Ara seçildi");
	}


	public static void run()
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);

		for (;;) {
			displayMenu();
			int option = Integer.parseInt(kb.nextLine());

			if (option < 0 || option > 6) {
				System.out.println("Geçersiz seçenek");
				continue;
			}

			if (option == 6)
				break;

			if (option == 1)
				insertProc();
			else if (option == 2)
				deleteProc();
			else if (option == 3)
				updateProc();
			else if (option == 4)
				listProc();
			else
				searchProc();

		}

		System.out.println("Tekrar yapıyor musunuz?");
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	07.12.2019
	switch deyiminin genel biçimi:

	switch (<ifade>) {
	case <s.i>:
		<deyim>
	case <s.i>:
		<deyim>
	[default:
		<deyim>
	]
	}

	switch deyiminde parantez içerisindeki ifadenin tamsayı türlerinden biri (char türü dahil), enum türü veya
	String türlerinden biri olması gerekir. case bölümlerinde sabit ifadesi kullanılmalıdır
----------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------
	Aşağıdaki switch deyiminin if deyimi karşılığı:
	if (val == 10)
		System.out.println("On");
	else if (val == 20)
		System.out.println("Yirmi");
	else
		System.out.println("Geçersiz sayı");
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		int val = Integer.parseInt(kb.nextLine());

		switch (val) {
		case 10:
			System.out.println("On");
			break;
		case 20:
			System.out.println("Yirmi");
			break;
		default:
			System.out.println("Geçersiz sayı");
		}
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	default kısmının yerinin önemi yoktur. Ancak sona yazılması tavisiye edilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		int val = Integer.parseInt(kb.nextLine());

		switch (val) {
		default:
			System.out.println("Geçersiz sayı");
			break;
		case 10:
			System.out.println("On");
			break;
		case 20:
			System.out.println("Yirmi");
			break;
		}
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	switch deyiminde case bölümlerinin sabit ifadesi içermesi zorunludur
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		int val = Integer.parseInt(kb.nextLine());

		int a = 10;

		switch (val) {
		case a: //error
			System.out.println("On");
			break;
		case 20:
			System.out.println("Yirmi");
			break;
		default:
			System.out.println("Geçersiz sayı");
		}
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	switch deyiminde aynı değerde case bölümü geçersizdir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int val = 10;

		switch (val) {
		case 1: //error
			System.out.println("Bir");
			break;
		case 10 - 9: //error
			System.out.println("İkinci Bir");
			break;
			//...
		}
	}
}



/*----------------------------------------------------------------------------------------------------------------------
	switch deyiminde parantez içerisindeki ifadenin tamsayı türlerinden biri (char türü dahil), enum türü veya
	String türlerinden biri olması gerekir.
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		double val = Double.parseDouble(kb.nextLine());

		switch (val) { //error
		case 1.3:
			System.out.println("On");
			break;
		case 2.4:
			System.out.println("Yirmi");
			break;
		default:
			System.out.println("Geçersiz sayı");
		}
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	switch deyiminin aşağı düşme (fall through) özelliği
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		int val = Integer.parseInt(kb.nextLine());

		switch (val) {
		case 10:
			System.out.println("On");
		case 20:
			System.out.println("Yirmi");
			break;
		default:
			System.out.println("Geçersiz sayı");
		}
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	switch deyiminin aşağı düşme (fall through) özelliğinin bir kullanımı
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		char option = 'd';

		switch (option) {
		case 'c':
		case 'C':
			System.out.println("Clear");
			break;
		case 'd':
		case 'D':
			System.out.println("Delete");
			break;
		default:
			System.out.println("Invalid option");
		}
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Basit bir menü uygulaması iskeleti
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		SimpleMenuApp.run();
	}
}

class SimpleMenuApp {
	public static void displayMenu()
	{
		System.out.println("1.Ekle");
		System.out.println("2.Sil");
		System.out.println("3.Güncelle");
		System.out.println("4.Listele");
		System.out.println("5.Ara");
		System.out.println("6.Çıkış");
		System.out.print("Seçenek:");
	}

	public static void insertProc()
	{
		System.out.println("Ekle seçildi");
	}

	public static void deleteProc()
	{
		System.out.println("Sil seçildi");
	}

	public static void updateProc()
	{
		System.out.println("Güncelle seçildi");
	}

	public static void listProc()
	{
		System.out.println("Listele seçildi");
	}

	public static void searchProc()
	{
		System.out.println("Ara seçildi");
	}


	public static void run()
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);

		EXIT_MENU:
		for (;;) {
			displayMenu();
			int option = Integer.parseInt(kb.nextLine());

			switch (option) {
			case 1:
				insertProc();
				break;
			case 2:
				deleteProc();
				break;
			case 3:
				updateProc();
				break;
			case 4:
				listProc();
				break;
			case 5:
				searchProc();
				break;
			case 6:
				break EXIT_MENU;
			default:
				System.out.println("Geçersiz seçenek");
			}

		}

		System.out.println("Tekrar yapıyor musunuz?");
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı bir yılın artık yıl olup olmadığını döndüren isLeapYear
	metodu ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		for (int year = 1999; year <= 2105; ++year)
			if (DateUtil.isLeapYear(year))
				System.out.printf("%d ", year);

		System.out.println();
	}
}

class DateUtil {
	public static boolean isLeapYear(int year)
	{
		return year % 4 == 0 && year % 100 != 0 || year % 400 == 0;
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı gün, ay ve yıl bilgisine ilişkin tarihin geçerli bir tarih
	olup olmadığını test eden isValidDate isimli metodu yazınız
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		DateUtilTest.run();
	}
}

class DateUtilTest {
	public static void run()
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);

		for (;;) {
			System.out.print("Gün giriniz:");
			int day = Integer.parseInt(kb.nextLine());

			if (day == 0)
				break;

			System.out.print("Ay giriniz:");
			int mon = Integer.parseInt(kb.nextLine());

			System.out.print("Yıl giriniz:");
			int year = Integer.parseInt(kb.nextLine());

			if (DateUtil.isValidDate(day, mon, year))
				System.out.printf("%02d/%02d/%04d tarihi geçerlidir%n", day, mon, year);
			else
				System.out.println("Geçersiz tarih girdiniz");
		}
	}
}

class DateUtil {
	public static boolean isValidDate(int day, int mon, int year)
	{
		if (day < 1 || day > 31 || mon < 1 || mon > 12)
			return false;

		int days = 31;

		switch (mon) {
		case 4:
		case 6:
		case 9:
		case 11:
			days = 30;
			break;
		case 2:
			days = 28;
			if (isLeapYear(year))
				++days;
		}

		return day <= days;
	}

	public static boolean isLeapYear(int year)
	{
		return year % 4 == 0 && year % 100 != 0 || year % 400 == 0;
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı gün, ay ve yıl bilgisine ilişkin tarihin yılın kaçıncı günü
	olduğunu döndüren getDayOfYear isimli metodu yazınız ve test ediniz. Metot geçersiz bir tarih için
	-1 değerine dönecektir
	(İleride daha iyileri yazılacak)
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		DateUtilTest.run();
	}
}

class DateUtilTest {
	public static void run()
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);

		for (;;) {
			System.out.print("Gün giriniz:");
			int day = Integer.parseInt(kb.nextLine());

			if (day == 0)
				break;

			System.out.print("Ay giriniz:");
			int mon = Integer.parseInt(kb.nextLine());

			System.out.print("Yıl giriniz:");
			int year = Integer.parseInt(kb.nextLine());

			int dayOfYear = DateUtil.getDayOfYear(day, mon, year);

			if (dayOfYear != -1)
				System.out.printf("%02d/%02d/%04d tarihi yılın %d. günüdür%n", day, mon, year, dayOfYear);
			else
				System.out.println("Geçersiz tarih girdiniz");
		}
	}
}

class DateUtil {
	public static int getDayOfYear(int day, int mon, int year)
	{
		if (!isValidDate(day, mon, year))
			return -1;

		int dayOfYear = day;

		switch (mon - 1) {
		case 11:
			dayOfYear += 30;
		case 10:
			dayOfYear += 31;
		case 9:
			dayOfYear += 30;
		case 8:
			dayOfYear += 31;
		case 7:
			dayOfYear += 31;
		case 6:
			dayOfYear += 30;
		case 5:
			dayOfYear += 31;
		case 4:
			dayOfYear += 30;
		case 3:
			dayOfYear += 31;
		case 2:
			dayOfYear += 28;
			if (isLeapYear(year))
				++dayOfYear;
		case 1:
			dayOfYear += 31;
		}

		return dayOfYear;
	}

	public static boolean isValidDate(int day, int mon, int year)
	{
		if (day < 1 || day > 31 || mon < 1 || mon > 12)
			return false;

		int days = 31;

		switch (mon) {
		case 4:
		case 6:
		case 9:
		case 11:
			days = 30;
			break;
		case 2:
			days = 28;
			if (isLeapYear(year))
				++days;
		}

		return day <= days;
	}

	public static boolean isLeapYear(int year)
	{
		return year % 4 == 0 && year % 100 != 0 || year % 400 == 0;
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı gün, ay ve yıl bilgisine ilişkin haftanın hangi gününe geldiğini
	Pazar:0, Pazartesi:1, ..., Cumartesi:6 olacak şekilde döndüren getDayOfWeek metodunu aşağıdaki açıklamalara göre
	yazınız.
	Açıklamalar:
		- Metot 1900 ve büyük yıllar için geçerli değer döndürecektir
		- Metot geçersiz bir tarih için -1 değerine dönecektir
		- 1.1.1900 ile verilen tarih arasındaki gün sayısı belirlenip 7(yedi)' ye modu alındığında haftanın
		gün bilgisi elde edilir
		(İlerida daha iyileri yazılacak
		-Tarihin hafta sonuna gelmesi durumunda "Bugün kurs günü. Tekrar yaptın mı?"
		mesajı ekrana yazılsın
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		DateUtilTest.run();
	}
}

class DateUtilTest {
	public static void run()
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);

		for (;;) {
			System.out.print("Gün giriniz:");
			int day = Integer.parseInt(kb.nextLine());

			if (day == 0)
				break;

			System.out.print("Ay giriniz:");
			int mon = Integer.parseInt(kb.nextLine());

			System.out.print("Yıl giriniz:");
			int year = Integer.parseInt(kb.nextLine());

			DateUtil.displayDateTR(day, mon, year);
		}
	}
}

class DateUtil {
	public static void displayDateTR(int day, int mon, int year)
	{
		int dayOfWeek = getDayOfWeek(day, mon, year);

		if (dayOfWeek == -1) {
			System.out.println("Geçersiz tarih");
			return;
		}

		switch (dayOfWeek) {
		case 0:
			System.out.printf("%02d/%02d/%04d Pazar%n", day, mon, year);
			break;
		case 1:
			System.out.printf("%02d/%02d/%04d Pazartesi%n", day, mon, year);
			break;
		case 2:
			System.out.printf("%02d/%02d/%04d Salı%n", day, mon, year);
			break;
		case 3:
			System.out.printf("%02d/%02d/%04d Çarşamba%n", day, mon, year);
			break;
		case 4:
			System.out.printf("%02d/%02d/%04d Perşembe%n", day, mon, year);
			break;
		case 5:
			System.out.printf("%02d/%02d/%04d Cuma%n", day, mon, year);
			break;
		case 6:
			System.out.printf("%02d/%02d/%04d Cumartesi%n", day, mon, year);
			break;
		}

		if (isWeekend(day, mon, year))
			System.out.println("Bugün kurs günü. Tekrar yaptın mı?");
		else
			System.out.println("Hafta içi takrar yapınız!!!");

	}

	public static boolean isWeekend(int day, int mon, int year)
	{
		int dayOfWeek = getDayOfWeek(day, mon, year);

		return dayOfWeek == 0 || dayOfWeek == 6;
	}

	public static boolean isWeekday(int day, int mon, int year)
	{
		if (!isValidDate(day, mon, year))
			return false;

		return !isWeekend(day, mon, year);
	}

	public static int getDayOfWeek(int day, int mon, int year)
	{
		int totalDays = getDayOfYear(day, mon, year);

		if (totalDays == -1 || year < 1900)
			return -1;

		for (int y = 1900; y < year; ++y) {
			totalDays += 365;
			if (isLeapYear(y))
				++totalDays;
		}

		return totalDays % 7;
	}

	public static int getDayOfYear(int day, int mon, int year)
	{
		if (!isValidDate(day, mon, year))
			return -1;

		int dayOfYear = day;

		switch (mon - 1) {
		case 11:
			dayOfYear += 30;
		case 10:
			dayOfYear += 31;
		case 9:
			dayOfYear += 30;
		case 8:
			dayOfYear += 31;
		case 7:
			dayOfYear += 31;
		case 6:
			dayOfYear += 30;
		case 5:
			dayOfYear += 31;
		case 4:
			dayOfYear += 30;
		case 3:
			dayOfYear += 31;
		case 2:
			dayOfYear += 28;
			if (isLeapYear(year))
				++dayOfYear;
		case 1:
			dayOfYear += 31;
		}

		return dayOfYear;
	}

	public static boolean isValidDate(int day, int mon, int year)
	{
		if (day < 1 || day > 31 || mon < 1 || mon > 12)
			return false;

		int days = 31;

		switch (mon) {
		case 4:
		case 6:
		case 9:
		case 11:
			days = 30;
			break;
		case 2:
			days = 28;
			if (isLeapYear(year))
				++days;
		}

		return day <= days;
	}

	public static boolean isLeapYear(int year)
	{
		return year % 4 == 0 && year % 100 != 0 || year % 400 == 0;
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	08.12.2019
	Farklı türlerin birbirine atanması (tür dönüşümü)

	T1 a; // target type
	T2 b; // source type

	a = b; //implicit conversion
	Derleyici atama işleminde kaynak türe ilişkin değer bakmaz
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		long a = 10;
		int b = a; //error
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Genel olarak bilgi kaybına yol açmayacak doğrudan dönüşümler (implicit conversion) geçerli
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int a = 10;
		long b;

		b = a;

		System.out.printf("a=%d%n", a);
		System.out.printf("b=%d%n", b);
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Küçük tamsayı türünden büyük tamsayı türüne doğrudan atama geçerlidir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int a = 10;
		long b;

		b = a;

		System.out.printf("a=%d%n", a);
		System.out.printf("b=%d%n", b);
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Büyük tamsayı türünden küçük tamsayı türüne doğrudan atama geçersizdir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int a = 10;
		byte b;

		b = a; //error

		System.out.printf("a=%d%n", a);
		System.out.printf("b=%d%n", b);
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Küçük tamsayı türünden büyük tamsayı türüne dönüşüm işleminde küçük tamsayı türüne ilişkin değer
	pozitif ise yükseltilen bit değerleri sıfır ile beslenir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int a = 10;
		long b;

		b = a;

		System.out.printf("a=%d%n", a);
		System.out.printf("a=0x%X%n", a);
		System.out.printf("b=%d%n", b);
		System.out.printf("b=0x%X%n", b);
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Küçük tamsayı türünden büyük tamsayı türüne dönüşüm işleminde küçük tamsayı türüne ilişkin değer
	negatif ise yükseltilen bit değerleri 1(bir) ile beslenir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int a = -10;
		long b;

		b = a;

		System.out.printf("a=%d%n", a);
		System.out.printf("a=0x%X%n", a);
		System.out.printf("b=%d%n", b);
		System.out.printf("b=0x%X%n", b);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Küçük tamsayı türünden büyük tamsayı türüne doğrudan dönüşüm
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.println("Bir sayı giriniz");
		int a = Integer.parseInt(kb.nextLine());
		long b;

		b = a;

		System.out.printf("a=%d%n", a);
		System.out.printf("a=0x%X%n", a);
		System.out.printf("b=%d%n", b);
		System.out.printf("b=0x%X%n", b);
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Java' da byte ve short türden sabit yoktur. Ancak istisna olarak sınırlar içerisinde kalması koşuluyla
	int türden bir sabit byte veya short türüne atanabilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		short a = 10;
		byte b = 127;

		System.out.printf("a=%d%n", a);
		System.out.printf("b=%d%n", b);
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Java' da byte ve short türden sabit yoktur. Ancak istisna olarak sınırlar içerisinde kalması koşuluyla
	int türden bir sabit byte veya short türüne atanabilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		short a = 40000; //error
		byte b = 127L; //error

		System.out.printf("a=%d%n", a);
		System.out.printf("b=%d%n", b);
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	char türünden short türüne doğrudan atama geçersizdir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		char a = 'C';
		short b = a; //error

		System.out.printf("a=%d%n", a);
		System.out.printf("b=%d%n", b);
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	short türünden char türüne doğrudan atama geçersizdir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		short a = 10;
		char b = a; //error

		System.out.printf("a=%d%n", a);
		System.out.printf("b=%d%n", b);
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	byte türünden char türüne doğrudan atama geçersizdir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		byte a = 10;
		char b = a; //error

		System.out.printf("a=%d%n", a);
		System.out.printf("b=%d%n", b);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	char türünden kendisinden byte olarak büyük türlere doğrudan atama geçerlidir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		char ch = 'C';
		float b = ch;

		System.out.printf("ch=%c%n", ch);
		System.out.printf("b=%f%n", b);
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	char türüne hiç bir türden doğrudan atama yapılamaz
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int a = 10;
		char ch = a; //error

		System.out.printf("ch=%c%n", ch);
		System.out.printf("a=%d%n", a);
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	char türüne sınırlar içerisinde kalması koşuluyla int türden bir sabit doğrudan atanabilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		char ch = 67;

		System.out.printf("ch=%c%n", ch);
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Tamsayı türlerinden gerçek sayı türlerine doğrudan atama geçerlidir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		long a = 10;
		float b = a;

		System.out.printf("a=%d%n", a);
		System.out.printf("b=%f%n", b);

	}
}



/*----------------------------------------------------------------------------------------------------------------------
	Gerçek sayı türlerinden tamsayı türlerine doğrudan atama geçersizdir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		float b = 10;
		long a = b; //error


		System.out.printf("a=%d%n", a);
		System.out.printf("b=%f%n", b);

	}
}



/*----------------------------------------------------------------------------------------------------------------------
	double türünden float türüne doğrudan atama geçersizdir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		double a = 3.4;
		float b = a; //error


		System.out.printf("a=%f%n", a);
		System.out.printf("b=%f%n", b);

	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Aşağıdaki örneği inceleyiniz
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		float a = 3.4F;
		double b = 3.4;

		System.out.printf("a=%.20f%n", a);
		System.out.printf("b=%.20f%n", b);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	boolean türünde hiç bir türe doğrudan dönüşüm yapılamaz
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		boolean a = false;
		int b = a; //error


	}
}



/*----------------------------------------------------------------------------------------------------------------------
	Hiç bir türden boolean türüne doğrudan dönüşüm yapılamaz
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int a = 0;
		boolean b = a; //error


	}
}

/*----------------------------------------------------------------------------------------------------------------------
	byte 	-> short, int, long, float, double
	short	-> int, long, float, double
	char 	-> int, long, float, double
	int 	-> long, float, double
	long 	-> float, double
	float 	-> double
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
	short, char ve byte türleri kendi aralarında işlem sokulduğunda bu türlere ilişkin değerler int
	türüne yükseltilir (integral promotion) ve sonuç int türden çıkar. Aşağıdaki örnek error oluşturur
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		short a = 10;
		byte b = 20;

		short c = a + b; //error

	}
}



/*----------------------------------------------------------------------------------------------------------------------
	short, char ve byte türleri kendi aralarında işlem sokulduğunda bu türlere ilişkin değerler int
	türüne yükseltilir (integral promotion) ve sonuç int türden çıkar. Aşağıdaki örnek error oluşturur
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		short a = 10;
		short b = 20;

		short c = a + b; //error

	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Büyük tamsayı türü ile küçük tamsayı türü işleme sokuluduğunda küçük tamsayı türüne ilişkin değer
	büyük tamsayı türüne dönüştürülür. Sonuç büyük tamsayı türünden çıkar
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		long a = 10;
		int b = 20;

		long c = a + b;

		System.out.printf("c=%d%n", c);
	}
}



/*----------------------------------------------------------------------------------------------------------------------
	char türü ile kendisinden byte olarak büyük bir tür işleme sokulduğunda char türüne ilişkin değer
	büyük türe dönüştürülür sonuç o türden çıkar
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int a = 2;
		char ch = 'A';

		int c = ch + a;

		System.out.printf("c=%d%n", c);
	}
}



/*----------------------------------------------------------------------------------------------------------------------
	Tamsayı türü ile gerçek sayı türü işleme sokulduğunda tamsayı türüne ilişkin değer ilgili gerçek sayı türüne
	dönüştürülür sonuç o gerçek sayı türünden çıkar
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		float a = 2.34F;
		long b = 123;
		float c = a + b;

		System.out.printf("c=%f%n", c);
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Bölme işleminde operandlar tamsayı türündense sonuç tamsayı türünden çıkar. Elde edilen sonucun noktadan
	sonraki kısmı atılır
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int a = 10;
		int b = 3;

		int c = a / b;

		System.out.printf("c=%d%n", c);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	float ve double türü işleme sokulduğunda float türüne ilişkin değer double türüne dönüştürülür
	sonuç double türünden çıkar
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		float a = 10;
		double b = 2.3;

		double c = a + b;

		System.out.printf("c=%f%n", c);
	}
}



/*----------------------------------------------------------------------------------------------------------------------
	boolean türü hiç bir türle işleme sokulamaz
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		boolean a = true;
		int b = 2;

		int c = a + b; //error

		System.out.printf("c=%f%n", c);
	}
}



/*----------------------------------------------------------------------------------------------------------------------
	short, char ve byte türlerine sınırlar içerisinde kalınması koşuluyla int türünden bir sabitin
	atanabilmesi kuralı metotların geri dönüş değerleri için de geçerlidir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		short a = 10;

	}
}

class Sample {
	public static short foo()
	{
		//...
		return 10;
	}
}



/*----------------------------------------------------------------------------------------------------------------------
	short, char ve byte türlerine sınırlar içerisinde kalınması koşuluyla int türünden bir sabitin
	atanabilmesi kuralı metotların çağrılması sırasında argümanladan parametrelere yapılan atamada
	geçersizdir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Sample.foo(10); //error
	}
}

class Sample {
	public static void foo(short a)
	{

	}
}



/*----------------------------------------------------------------------------------------------------------------------
	İşlem öncesi otomatik tür dönüşümü geçici değişken yaratılarak yapılır:
	long temp = a;
	long c = temp + b;
	Yani, derleyici arakoda (byte code)  yukarıdaki gibi bir kod ekler
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		short a = 10;
		long b = 3;
		long c = a + b; //*
		//...
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	14.12.2019
	explicit conversion:
	(<tür>)<ifade>
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		long a = 10;
		int b = (int)a;

		//...
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Büyük tam sayı türünden küçük tamsayı türüne yapılan explicit dönüşümde eğer büyük tamsayı
	türü içerisindeki değer hedef tamsayı türü sınırları içeriisndeyse bilgi kaybı oluşmaz.
	Sınırlar dışındaysa sayının yüksek anlamlı byte değerleri atılır elde edilen sayı
	hedef türe atanır. Aslında bu işlem sınırlar içerisindeyse de yapılır
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir sayı giriniz:");
		long val = Long.parseLong(kb.nextLine());

		int a = (int)val;

		System.out.printf("val=%d%n", val);
		System.out.printf("val=0x%X%n", val);
		System.out.printf("a=%d%n", a);
		System.out.printf("a=0x%X%n", a);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	char türünden short türüne yapılan explicit dönüşümde sayının bit kalıbı değişmez
	bitlerin yorumlanışı değişir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		char ch = 40000;
		short a = (short)ch;

		System.out.printf("ch=%c%n", ch);
		System.out.printf("val=0x%X%n", 40000);
		System.out.printf("a=%d%n", a);
		System.out.printf("a=0x%X%n", a);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	short türünden char türüne yapılan explicit dönüşümde sayının bit kalıbı değişmez
	bitlerin yorumlanışı değişir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		short a = -123;
		char ch =(char)a;

		System.out.printf("ch=%c%n", ch);
		System.out.printf("val=0x%X%n", (short)-123);
		System.out.printf("a=%d%n", a);
		System.out.printf("a=0x%X%n", a);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	double türünden float türüne yapılan explicit dönüşümde değer float ile temsil edilebilecek
	en yakın değer olarak atanır
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		double a = 3.4;
		float b = (float)a;

		System.out.printf("a=%.20f%n", a);
		System.out.printf("b=%.20f%n", b);

	}
}

/*----------------------------------------------------------------------------------------------------------------------
	boolean türünden hiç bir türe explicit dönüşüm yapılamaz
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		boolean flag = true;
		int a = (int)flag; //error


		//...
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Herhangi bir türden boolean türüne explicit dönüşüm yapılamaz
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int a = 0;
		boolean b = (boolean)a; //error


		//...
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Gerçek sayı türünden tamsayı türüne (char da dahil) yapılan explicit dönüşüm için:
	- Sayının noktadan sonraki kısmı atılır
		- Elde edilen değer hedef türün sınırları içerisinde kalıyorsa atama yapılır
		- Elde edilen değer hedef türün sınırları dışındaysa
			- Hedef tür int, short, byte ve char türlerinden biriyse;
				- Değer int türü sınırları içerisindeyse int türüne yükseltilir. Elde edilen değer
					klasik dönüştürme kurallarına göre dönüştürülür
				- Değer int türü sınırları içerisinde değilse bu durumda değerin pozitif ya da negatif
					olması durumuna göre int türünün en büyük veya en küçük değeri alınır. Bu değer hedef
					türe dönüştürülür
			- Hedef tür long türü ise
				- Değer long türü sınırları içerisindeyse doğrudan atanır
				- Değerin pozitif ya da negatif olması durumuna göre long türünün en büyük ya da en küçük
				değeri atanır
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		double a = 3.4;
		byte b = (byte)a;

		System.out.printf("b=%d%n", b);

	}
}

package csd;

class App {
	public static void main(String [] args)
	{
		double a = -300.4;
		byte b = (byte)a;

		System.out.printf("val=0x%X%n", -300);
		System.out.printf("b=%d%n", b);
		System.out.printf("b=0x%X%n", b);

	}
}

package csd;

class App {
	public static void main(String [] args)
	{
		double a = 5_000_000_000.4;
		byte b = (byte)a;

		System.out.printf("%d%n", (byte)2147483647);
		System.out.printf("%d%n", (byte)5_000_000_000L);
		System.out.printf("b=%d%n", b);

	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Tür dönüştürme operatörü uygulanmazsa bilgi kaybı oluşabilecek bir durum
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int a = 10, b = 3;

		double c = (double)a / b;

		System.out.printf("c=%f%n", c);

	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Aşağıdaki örnekte bilgi kaybı oluşabilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Birinci sayıyı giriniz:");
		int a = Integer.parseInt(kb.nextLine());

		System.out.print("İkinci sayıyı giriniz:");
		int b = Integer.parseInt(kb.nextLine());

		int c = a + b;

		System.out.printf("c=%d%n", c);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Yukarıdaki örneğin bir çözümü
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Birinci sayıyı giriniz:");
		int a = Integer.parseInt(kb.nextLine());

		System.out.print("İkinci sayıyı giriniz:");
		int b = Integer.parseInt(kb.nextLine());

		long c = (long)a + b;

		System.out.printf("c=%d%n", c);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	 İşlem öncesi otomatik tür dönüşümünün bir kullanımı
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		for (int n = 0; n <= 20; ++n)
			System.out.printf("%d!=%d%n", n, NumberUtil.factorial(n));
	}
}

class NumberUtil {
	public static long factorial(int n)
	{
		if (n < 0)
			return -1;

		long result = 1;

		for (int i = 2; i <= n; ++i)
			result *= i;


		return result;
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	 Sınıf Çalışması: Klavyeden sıfır girilene kadar alınan int türden sayıların
	 negatif ve pozitif olanlarının ayrı ayrı ortalamalarını bulan programı yazınız
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		FindAveragesApp.run();
	}
}


class FindAveragesApp {
	public static void displayPosReport(int count, int sum)
	{
		if (count != 0) {
			double posAvg = (double)sum / count;

			System.out.printf("Poziti sayıların ortalaması:%f%n", posAvg);
		}
		else
			System.out.println("Hiç pozitif sayı girmediniz");
	}

	public static void displayNegReport(int count, int sum)
	{
		if (count != 0) {
			double negAvg = (double)sum / count;

			System.out.printf("Negatif sayıların ortalaması:%f%n", negAvg);
		}
		else
			System.out.println("Hiç negatif sayı girmediniz");
	}
	public static void run()
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.println("Sayıları girmeye başlayınız:");

		int posSum = 0, negSum = 0, posCount = 0, negCount = 0;

		for (;;) {
			int val = Integer.parseInt(kb.nextLine());

			if (val == 0)
				break;

			if (val > 0) {
				++posCount;
				posSum += val;
			}
			else {
				++negCount;
				negSum += val;
			}
		}

		displayPosReport(posCount, posSum);
		displayNegReport(negCount, negSum);
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	 Sınıf Çalışması: Klavyeden sıfır girilene kadar alınan int türden sayıların
	 negatif ve pozitif olanlarının ayrı ayrı ortalamalarını bulan programı yazınız
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		FindAveragesApp.run();
	}
}


class FindAveragesApp {
	public static void displayPosReport(int count, int sum)
	{
		if (count != 0) {
			double posAvg = (double)sum / count;

			System.out.printf("Poziti sayıların ortalaması:%f%n", posAvg);
		}
		else
			System.out.println("Hiç pozitif sayı girmediniz");
	}

	public static void displayNegReport(int count, int sum)
	{
		if (count != 0) {
			double negAvg = (double)sum / count;

			System.out.printf("Negatif sayıların ortalaması:%f%n", negAvg);
		}
		else
			System.out.println("Hiç negatif sayı girmediniz");
	}
	public static void run()
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.println("Sayıları girmeye başlayınız:");

		int posSum = 0, negSum = 0, posCount = 0, negCount = 0;

		int val;

		while ((val = Integer.parseInt(kb.nextLine())) != 0) {
			if (val > 0) {
				++posCount;
				posSum += val;
			}
			else {
				++negCount;
				negSum += val;
			}
		}

		displayPosReport(posCount, posSum);
		displayNegReport(negCount, negSum);
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	 Homework-005-1. sorunun bir çözümü
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		System.out.println(NumberUtil.getE());
	}
}


class NumberUtil {
	public static double getE()
	{
		double e = 0;

		for (int i = 0; i < 13; ++i)
			e += 1D / factorial(i);

		return e;

	}

	public static long factorial(int n)
	{
		if (n < 0)
			return -1;

		long result = 1;

		for (int i = 2; i <= n; ++i)
			result *= i;


		return result;
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	 Koşul Operatörü:
	 <boolean türden ifade> ? <ifade> : <ifade>

	 Aşağıdaki kodun if deyimi karşılığı:
	 int max;

	 if (a > b)
		max = a;
	 else
		max = b;
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Birinci sayıyı giriniz:");
		int a = Integer.parseInt(kb.nextLine());

		System.out.print("İkinci sayıyı giriniz:");
		int b = Integer.parseInt(kb.nextLine());

		int max;

		max = a > b ? a : b;

		System.out.printf("max(%d, %d)=%d%n", a, b, max);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	 Koşul operatörü
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Birinci sayıyı giriniz:");
		int a = Integer.parseInt(kb.nextLine());

		System.out.print("İkinci sayıyı giriniz:");
		int b = Integer.parseInt(kb.nextLine());

		int max;

		max = a > b ? a + 1 : b - 2;

		System.out.printf("max(%d, %d)=%d%n", a, b, max);
	}
}




/*----------------------------------------------------------------------------------------------------------------------
	 Koşul operatörü
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Birinci sayıyı giriniz:");
		int a = Integer.parseInt(kb.nextLine());

		System.out.print("İkinci sayıyı giriniz:");
		int b = Integer.parseInt(kb.nextLine());

		int max;

		max = (a > b ? a + 1 : b) - 2;

		System.out.printf("max(%d, %d)=%d%n", a, b, max);
	}
}




/*----------------------------------------------------------------------------------------------------------------------
	 Koşul operatörü yalın atama operatöründe kullanılabilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Birinci sayıyı giriniz:");
		int a = Integer.parseInt(kb.nextLine());

		System.out.print("İkinci sayıyı giriniz:");
		int b = Integer.parseInt(kb.nextLine());

		int max;

		max = a > b ? a : b;

		System.out.printf("max(%d, %d)=%d%n", a, b, max);
	}
}




/*----------------------------------------------------------------------------------------------------------------------
	 Koşul operatörü metotların geri dönüş değerlerinde kullanılabilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Birinci sayıyı giriniz:");
		int a = Integer.parseInt(kb.nextLine());

		System.out.print("İkinci sayıyı giriniz:");
		int b = Integer.parseInt(kb.nextLine());

		int max;

		max = NumberUtil.max(a, b);

		System.out.printf("max(%d, %d)=%d%n", a, b, max);
	}
}

class NumberUtil {
	public static int max(int a, int b)
	{
		return a > b ? a : b;
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	 Koşul operatörü metot çağrılarında kullanılabilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Birinci sayıyı giriniz:");
		int a = Integer.parseInt(kb.nextLine());

		System.out.print("İkinci sayıyı giriniz:");
		int b = Integer.parseInt(kb.nextLine());

		System.out.printf("max(%d, %d)=%d%n", a, b, a > b ? a : b);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	 Koşul operatörünün operandlarının koşul operatörü olması durumu
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Birinci sayıyı giriniz:");
		int a = Integer.parseInt(kb.nextLine());

		System.out.print("İkinci sayıyı giriniz:");
		int b = Integer.parseInt(kb.nextLine());

		System.out.print("Üçüncü sayıyı giriniz:");
		int c = Integer.parseInt(kb.nextLine());

		int max = a > b ? a > c ? a : c : b > c ? b : c;

		System.out.printf("max(%d, %d, %d)=%d%n", a, b, c, max);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	 Yukarıdaki örnekte okunabilirlik açısından gerekmese de parantezler konmalıdır
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Birinci sayıyı giriniz:");
		int a = Integer.parseInt(kb.nextLine());

		System.out.print("İkinci sayıyı giriniz:");
		int b = Integer.parseInt(kb.nextLine());

		System.out.print("Üçüncü sayıyı giriniz:");
		int c = Integer.parseInt(kb.nextLine());

		int max = (a > b) ? (a > c ? a : c) : (b > c ? b : c);

		System.out.printf("max(%d, %d, %d)=%d%n", a, b, c, max);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı gün, ay ve yıl bilgisine ilişkin haftanın hangi gününe geldiğini
	Pazar:0, Pazartesi:1, ..., Cumartesi:6 olacak şekilde döndüren getDayOfWeek metodunu aşağıdaki açıklamalara göre
	yazınız.
	Açıklamalar:
		- Metot 1900 ve büyük yıllar için geçerli değer döndürecektir
		- Metot geçersiz bir tarih için -1 değerine dönecektir
		- 1.1.1900 ile verilen tarih arasındaki gün sayısı belirlenip 7(yedi)' ye modu alındığında haftanın
		gün bilgisi elde edilir
		(İlerida daha iyileri yazılacak
		-Tarihin hafta sonuna gelmesi durumunda "Bugün kurs günü. Tekrar yaptın mı?"
		mesajı ekrana yazılsın
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		DateUtilTest.run();
	}
}

class DateUtilTest {
	public static void run()
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);

		for (;;) {
			System.out.print("Gün giriniz:");
			int day = Integer.parseInt(kb.nextLine());

			if (day == 0)
				break;

			System.out.print("Ay giriniz:");
			int mon = Integer.parseInt(kb.nextLine());

			System.out.print("Yıl giriniz:");
			int year = Integer.parseInt(kb.nextLine());

			DateUtil.displayDateTR(day, mon, year);
		}
	}
}

class DateUtil {
	public static void displayDateTR(int day, int mon, int year)
	{
		int dayOfWeek = getDayOfWeek(day, mon, year);

		if (dayOfWeek == -1) {
			System.out.println("Geçersiz tarih");
			return;
		}

		switch (dayOfWeek) {
		case 0:
			System.out.printf("%02d/%02d/%04d Pazar%n", day, mon, year);
			break;
		case 1:
			System.out.printf("%02d/%02d/%04d Pazartesi%n", day, mon, year);
			break;
		case 2:
			System.out.printf("%02d/%02d/%04d Salı%n", day, mon, year);
			break;
		case 3:
			System.out.printf("%02d/%02d/%04d Çarşamba%n", day, mon, year);
			break;
		case 4:
			System.out.printf("%02d/%02d/%04d Perşembe%n", day, mon, year);
			break;
		case 5:
			System.out.printf("%02d/%02d/%04d Cuma%n", day, mon, year);
			break;
		case 6:
			System.out.printf("%02d/%02d/%04d Cumartesi%n", day, mon, year);
			break;
		}

		if (isWeekend(day, mon, year))
			System.out.println("Bugün kurs günü. Tekrar yaptın mı?");
		else
			System.out.println("Hafta içi takrar yapınız!!!");

	}

	public static boolean isWeekend(int day, int mon, int year)
	{
		int dayOfWeek = getDayOfWeek(day, mon, year);

		return dayOfWeek == 0 || dayOfWeek == 6;
	}

	public static boolean isWeekday(int day, int mon, int year)
	{
		if (!isValidDate(day, mon, year))
			return false;

		return !isWeekend(day, mon, year);
	}

	public static int getDayOfWeek(int day, int mon, int year)
	{
		int totalDays = getDayOfYear(day, mon, year);

		if (totalDays == -1 || year < 1900)
			return -1;

		for (int y = 1900; y < year; ++y)
			totalDays += isLeapYear(y) ? 366 : 365;

		return totalDays % 7;
	}

	public static int getDayOfYear(int day, int mon, int year)
	{
		if (!isValidDate(day, mon, year))
			return -1;

		int dayOfYear = day;

		switch (mon - 1) {
		case 11:
			dayOfYear += 30;
		case 10:
			dayOfYear += 31;
		case 9:
			dayOfYear += 30;
		case 8:
			dayOfYear += 31;
		case 7:
			dayOfYear += 31;
		case 6:
			dayOfYear += 30;
		case 5:
			dayOfYear += 31;
		case 4:
			dayOfYear += 30;
		case 3:
			dayOfYear += 31;
		case 2:
			dayOfYear += isLeapYear(year) ? 29 : 28;
		case 1:
			dayOfYear += 31;
		}

		return dayOfYear;
	}

	public static boolean isValidDate(int day, int mon, int year)
	{
		if (day < 1 || day > 31 || mon < 1 || mon > 12)
			return false;

		int days = 31;

		switch (mon) {
		case 4:
		case 6:
		case 9:
		case 11:
			days = 30;
			break;
		case 2:
			days = isLeapYear(year) ? 29 : 28;
		}

		return day <= days;
	}

	public static boolean isLeapYear(int year)
	{
		return year % 4 == 0 && year % 100 != 0 || year % 400 == 0;
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Koşul operatörü
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.println("Bir sayı giriniz");
		int val = Integer.parseInt(kb.nextLine());

		System.out.println(val % 2 == 0 ? "Çift" : "Tek");
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	15.12.2019
	Farklı sınıflar içerisinde aynı isimli metotlar yazılabilir. Bu zaten problemsiz bir durumdur
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Sample.foo();
		Mample.foo();
	}
}

class Sample {
	public static void foo()
	{
		System.out.println("Sample.foo");
	}
}

class Mample {
	public static void foo()
	{
		System.out.println("Mample.foo");
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Metodun erişim belirleyicisinin overload işlemine etkisi yoktur. Yani farklı erişim belirleyicilere
	sahip iki metot farklı olmak zorunda değildir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
	}
}

class Sample {
	private static void foo() //error
	{
		System.out.println("Sample.foo");
	}

	public static void foo() //error
	{
		System.out.println("Sample.foo");
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Metodun static veya non-static olmasının overload işlemine etkisi yoktur. Yani farklı static ve non-static olan
	iki aynı isimde metot farklı metot olmak zorunda değildir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
	}
}

class Sample {
	public void foo() //error
	{
		System.out.println("Sample.foo");
	}

	public static void foo() //error
	{
		System.out.println("Sample.foo");
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Metodun geri dönüş değerlerinin farklı olmasının da overload işlemine etkisi yoktur
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
	}
}

class Sample {
	public static int foo() //error
	{
		System.out.println("Sample.foo");

		return 10;
	}

	public static void foo() //error
	{
		System.out.println("Sample.foo");
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Metodun parametre değişken isimlerinin de overload işlemine etkisi yoktur
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
	}
}

class Sample {
	public static void foo(int a) //error
	{
		System.out.println("Sample.foo");
	}

	public static void foo(int b) //error
	{
		System.out.println("Sample.foo");
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Bir metodun overload edilebilmesi için diğer aynı isimde metotlarının parametrik yapılarının
	farklı olması gerekir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
	}
}

class Sample {
	public static void foo(int a)
	{
		System.out.println("Sample.foo(int)");
	}

	public static void foo(double a)
	{
		System.out.println("Sample.foo(double)");
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Bir metodun overload edilebilmesi için diğer aynı isimde metotlarının parametrik yapılarının
	farklı olması gerekir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
	}
}

class Sample {
	public static void foo(int a, double b)
	{
		System.out.println("Sample.foo(int)");
	}

	public static void foo(double b, int a)
	{
		System.out.println("Sample.foo(double)");
	}
}
/*----------------------------------------------------------------------------------------------------------------------
	Bir metot çağrısında derleyicinin hangi metodun çağrılacağını belirlemesi sürecine İngilizce
	olarak "overload resolution" denilmektedir.
	Oveload resolution işlemi aşağıdaki gibi belirlenir:
	1. Metot çağrısında argümanlar ile argümanların aktarıldığı parametrelerin türleri tam uyumlu olan bir metot
	varsa o çağrılır (best match, exact match)

	2. Tam uyum yoksa işlemler aşağıdaki gibi gerçekleşir:
		a) Aday Metotlar (candidate methods): Çağrılan metotla aynı isimde olan tüm metotlardır
		b) Uygun Metotlar (applicable methods): Argüman sayısı ile parametre sayısı aynı olan ve argümanlardan
		parametrelere otomatik tür dönüşümünün olduğu metotlardır
		c) En uygun metot (the most applicable method): En uygun metot öyle bir metottur ki argümanlarla ilgili
		parametreler yarışa sokulduğunda daha iyi olan veya daha kötü olmayan metot olarak alınır. Buna dönüşümün
		kalitesi ile karar verilir. Yani daha kaliteli olan bir metot en uygun metot olarak alınır. Bazı durumlarda
		birden fazla metot aynı kalitede olur. Bu durumda error oluşur (ambiguity).

		Dönüşümün kalitesi aşağıdaki gibi belirlenir:
		1. T1 -> T2 ve T1 -> T3 e dönüşümleri için eğer T2 vaye T3 T1 ile aynı türdense aynı türden dönüşüm kalitelidir

		int -> int *
		int -> long

		2. T1 -> T2 ve T1 -> T3 e dönüşümleri için eğer T2 den T3 de otomatik dönüşüm var, T3 den T2 ye yoksa
		T2 daha kalitelidir

		int -> long *
		int -> double
----------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------
	Tam uyum
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int x = 10;
		double y = 20;

		Sample.foo(x,  y);
	}
}

class Sample {
	public static void foo(int a, double b)
	{
		System.out.println("Sample.foo(int, double)");
	}

	public static void foo(double b, int a)
	{
		System.out.println("Sample.foo(double, int)");
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	1. Aday metotlar: 1, 2, 3, 4, 5, 6
	2. Uygun metotlar: 1, 2, 3
	3. En uygun metot: 1
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		short a = 10;
		char c = 'C';

		Sample.foo(a, c);
	}
}

class Sample {
	public static void foo(int a, double b) //#1
	{
		System.out.println("Sample.foo(int, double)");
	}

	public static void foo(double b, double a) //#2
	{
		System.out.println("Sample.foo(double, double)");
	}

	public static void foo(long b, double a) //#3
	{
		System.out.println("Sample.foo(long, double)");
	}

	public static void foo(double b) //#4
	{
		System.out.println("Sample.foo(double)");
	}

	public static void foo() //#5
	{
		System.out.println("Sample.foo()");
	}

	public static void foo(byte a, double b) //#6
	{
		System.out.println("Sample.foo(byte, double)");
	}

	public static void bar(double b) //#7
	{
		System.out.println("Sample.bar(double)");
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	1. Aday metotlar: 1, 2, 3, 4, 5, 6
	2. Uygun metotlar: 1, 2, 3
	3. En uygun metot: Yok
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		short a = 10;
		char c = 'C';

		Sample.foo(a, c);//error
	}
}

class Sample {
	public static void foo(int a, double b) //#1
	{
		System.out.println("Sample.foo(int, double)");
	}

	public static void foo(double b, double a) //#2
	{
		System.out.println("Sample.foo(double, double)");
	}

	public static void foo(long b, int a) //#3
	{
		System.out.println("Sample.foo(long, int)");
	}

	public static void foo(double b) //#4
	{
		System.out.println("Sample.foo(double)");
	}

	public static void foo() //#5
	{
		System.out.println("Sample.foo()");
	}

	public static void foo(byte a, double b) //#6
	{
		System.out.println("Sample.foo(byte, double)");
	}

	public static void bar(double b) //#7
	{
		System.out.println("Sample.bar(double)");
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	1. Aday metotlar: 1, 2, 3, 4, 5, 6
	2. Uygun metotlar: Yok
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		boolean a = true;
		char c = 'C';

		Sample.foo(a, c);//error
	}
}

class Sample {
	public static void foo(int a, double b) //#1
	{
		System.out.println("Sample.foo(int, double)");
	}

	public static void foo(float b, double a) //#2
	{
		System.out.println("Sample.foo(double, double)");
	}

	public static void foo(long b, int a) //#3
	{
		System.out.println("Sample.foo(long, int)");
	}

	public static void foo(double b) //#4
	{
		System.out.println("Sample.foo(double)");
	}

	public static void foo() //#5
	{
		System.out.println("Sample.foo()");
	}

	public static void foo(byte a, double b) //#6
	{
		System.out.println("Sample.foo(byte, double)");
	}

	public static void bar(double b) //#7
	{
		System.out.println("Sample.bar(double)");
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	1. Aday metotlar: Yok
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		boolean a = true;
		char c = 'C';

		Sample.fo(a, c);//error
	}
}

class Sample {
	public static void foo(int a, double b) //#1
	{
		System.out.println("Sample.foo(int, double)");
	}

	public static void foo(float b, double a) //#2
	{
		System.out.println("Sample.foo(double, double)");
	}

	public static void foo(long b, int a) //#3
	{
		System.out.println("Sample.foo(long, int)");
	}

	public static void foo(double b) //#4
	{
		System.out.println("Sample.foo(double)");
	}

	public static void foo() //#5
	{
		System.out.println("Sample.foo()");
	}

	public static void foo(byte a, double b) //#6
	{
		System.out.println("Sample.foo(byte, double)");
	}

	public static void bar(double b) //#7
	{
		System.out.println("Sample.bar(double)");
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	21.12.2019
	Yerel değişkenler ve parametre değişkenleri stack'de yaratılır. Parametre değişkenleri metot
	çağrısında yaratılır ve metot bitiminde yok edilir. Yerel değişkenler akış bildirim noktasına
	geldiğinde yaratılır ve yerel değişkenin bildirildiği blok sonunda yok edilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Sample.foo(10, 3.4);
		Sample.foo(34,  8.9);
	}
}

class Sample {
	public static void foo(int a, double b)
	{
		int x;

		{
			long y;

			//...
		}

		//....

	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıfın içinde tüm metotların dışında bildirilen değişkenlere sınıfların veri elemanı (member variable) denir.
	Sınıfın içinde bulunabilecek herşeye sınıfın elemanı (member) denir. Eğer bu eleman bir alt programsa
	metot, bir değişkense veri elemanı denir
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
	Sınıfın içinde tüm metotların dışında bildirilen değişkenlere sınıfların veri elemanı (member variable) denir.
	Sınıfın veri elemanlarının erişim belirleyicileri olabilir. Bu erişim belirleyiciler metotlar ile aynıdır.
	Sınıfın veri elemanları da static veya non-static olabilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{

	}
}

class Sample {
	int a;
	public double b;


	public static void foo()
	{

	}

	private int c;
	protected static double d;
}


/*----------------------------------------------------------------------------------------------------------------------
	Sınıfın aynı türden veri elemanları aralarına virgül konarak bildirilebilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{

	}
}

class Sample {
	public int a, b, c;
}


/*----------------------------------------------------------------------------------------------------------------------
	Aynı sınıf içerisinde aynı isimde birden fazla veri elemanı bildirilemez. Sınıf veri elemanları
	tüm sınıf boyunca görülebilirdir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{

	}
}

class Sample {
	public int a; //error
	public double a; //error
}

/*----------------------------------------------------------------------------------------------------------------------
	Bir veri elemanı ile aynı isimde paramtre değişkeni veya metodun içinde yerel değişken bildirilebilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{

	}
}

class Sample {
	public int a;

	public static void foo(int a)
	{

	}

	public static void bar()
	{
		int a;

		//...

	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Atama işleminin anlamı
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int a = 10;
		int b = a;


		a = 20;

		System.out.printf("a=%d%n", a);
		System.out.printf("b=%d%n", b);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf bildirimi tür bildirimi demektir. Sınıf türünden bildirilen değişkenlere referans denir.
	Sınıf türleri referans türleridir. Referans içerisindeki değer bir adres olmalıdır
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Sample s; //referans
		Person p; //referans
		SerialPort sp; //referans

		//...

	}
}

class Sample {
	//...
}

class Person {
	//...
}

class SerialPort {
	//...
}


/*----------------------------------------------------------------------------------------------------------------------
	new <sınıf ismi>([argümanlar]);
	new operatörü ile heap de nesne (object) yaratılır. Aşağıdaki örnekte stack'te yaratılmış olan
	s referansının içerisinde new operatörü ile heap de yaratılmış olan nesnenin adresi atanmıştır
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Sample s;

		s = new Sample();

		//...
	}
}

class Sample {
	//...
}


/*----------------------------------------------------------------------------------------------------------------------
	Her new işlemi yeni bir nesne yaratılması anlamına gelir. Aşağıdaki örnekte s ve k referansları
	farklı nesneyi göstermektedir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Sample s, k;

		s = new Sample();
		k = new Sample();

		//...
	}
}

class Sample {
	//...
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıfın non-static veri elemanları her nesne için ayrıca yaratılır ve nesnenin içindedir.
	Sınıfın non-static veri elemanlarına referans ve nokta operatörü ile erişilebilir.
	Bir nesnenin bellekte kapladığı alan "en az non-static veri elemanlarının toplam uzunluğu kadardır"
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Sample s, k;

		s = new Sample();
		k = new Sample();

		s.a = 10;
		s.b = true;

		k.a = 20;
		k.b = false;

		System.out.printf("s.a=%d%n", s.a);
		System.out.printf("s.b=%b%n", s.b);
		System.out.printf("k.a=%d%n", k.a);
		System.out.printf("k.b=%b%n", k.b);
	}
}

class Sample {
	public int a;
	public boolean b;
	//...
}


/*----------------------------------------------------------------------------------------------------------------------
	Nesne yaratıldığında (aşamaları ileride anlatılacak) nesneye ait elemanlara (sınıfın non-static veri elemanları)
	default değerler atanır. Default değer türe özgü mantıksal sıfır değeridir. Örneğin int türü için
	sıfırken boolean türü için false değeridir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Sample s;

		s = new Sample();

		System.out.printf("s.a=%d%n", s.a);
		System.out.printf("s.b=%b%n", s.b);
	}
}

class Sample {
	public int a;
	public boolean b;
	//...
}


/*----------------------------------------------------------------------------------------------------------------------
	Farklı türden referanslar birbirine atanamaz
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Sample s;

		s = new Mample(); //error
	}
}

class Sample {
	public int a;
	public boolean b;
	//...
}

class Mample {
	public int a;
	public boolean b;
	//...
}

/*----------------------------------------------------------------------------------------------------------------------
	İki referansın birbirine atanması durumunda artık iki referans içerisinde de aynı adres bulunduğundan
	artık iki referans da aynı nesneyi gösterir duruma gelir. Bu durumda hangi referanstan nesneye erişildiğinin
	önemi yoktur
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Sample s;

		s = new Sample();

		s.a = 10;
		s.b = true;

		Sample k;

		k = s;

		System.out.printf("s.a=%d%n", s.a);
		System.out.printf("s.b=%b%n", s.b);
		System.out.printf("k.a=%d%n", k.a);
		System.out.printf("k.b=%b%n", k.b);

		k.a *= 2;
		k.b = false;

		System.out.printf("s.a=%d%n", s.a);
		System.out.printf("s.b=%b%n", s.b);
		System.out.printf("k.a=%d%n", k.a);
		System.out.printf("k.b=%b%n", k.b);
	}
}

class Sample {
	public int a;
	public boolean b;
	//...
}

class Mample {
	public int a;
	public boolean b;
	//...
}


/*----------------------------------------------------------------------------------------------------------------------
	Referans parametreli metotlar
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Date date = new Date();

		date.day = 10;
		date.mon = 9;
		date.year = 1976;

		DateUtil.display(date);
	}
}

class DateUtil {
	public static void display(Date date)
	{
		System.out.printf("%02d/%02d/%04d%n", date.day, date.mon, date.year);
	}
}

class Date {
	public int day, mon, year;
	//...
}

/*----------------------------------------------------------------------------------------------------------------------
	Aşağıdaki örneği inceleyiniz
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int a = 10;

		Sample.foo(a);

		System.out.printf("a=%d%n", a);
	}
}

class Sample {
	public static void foo(int val)
	{
		val *= 2;
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Referans parametreli metotlar içerisinde nesne üzerinde değişiklik yapılabilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Date date = new Date();

		date.day = 10;
		date.mon = 9;
		date.year = 1976;

		DateUtil.display(date);

		DateUtil.changeDate(date, 11, 7, 1983);

		DateUtil.display(date);
	}
}

class DateUtil {
	public static void changeDate(Date date, int day, int mon, int year)
	{
		//...
		date.day = day;
		date.mon = mon;
		date.year = year;
	}

	public static void display(Date date)
	{
		System.out.printf("%02d/%02d/%04d%n", date.day, date.mon, date.year);
	}
}

class Date {
	public int day, mon, year;
	//...
}

/*----------------------------------------------------------------------------------------------------------------------
	22.12.2019
	Geri dönüş değeri referans olan metotlar
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Date date = DateUtil.makeDate(10, 9, 1976);

		DateUtil.display(date);

		DateUtil.changeDate(date, 11, 7, 1983);

		DateUtil.display(date);
	}
}

class DateUtil {
	public static Date makeDate(int day, int mon, int year)
	{
		//...
		Date date = new Date();

		date.day = day;
		date.mon = mon;
		date.year = year;

		return date;
	}

	public static void changeDate(Date date, int day, int mon, int year)
	{
		//...
		date.day = day;
		date.mon = mon;
		date.year = year;
	}

	public static void display(Date date)
	{
		System.out.printf("%02d/%02d/%04d%n", date.day, date.mon, date.year);
	}
}

class Date {
	public int day, mon, year;
	//...
}

/*----------------------------------------------------------------------------------------------------------------------
	Tüm referansların uzunlukları aynıdır. Bu uzunluk adresleme ile orantılıdır. Örneğin 64 bit işlemcilerde
	64 bittir (8 byte)
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Date d = new Date();
		Person p = new Person();

		//...
	}
}

class Date {
	public int day, mon, year;
	//...
}

class Person {
	public int no;
	//...
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıfın static bir veri elemanı toplamda bir tanedir. Herhangi bir nesnenin içerisinde değildir.
	Kullanılması için nesne yaratmak gerekmez. Sınıfın static veri elemanlarının tamamı sınıfın bir elemanı
	ilk kez kullanıldığında yaratılır. Program sonuna kadar yaşarlar
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Sample.foo();
		Sample.x = 10;

		System.out.println(Sample.x);


		Sample.x = 20;

		System.out.println(Sample.x);
	}
}

class Sample {
	public static int x;

	public static void foo()
	{
		//...
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıfın static veri elemanlarına da default değer atanır
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		System.out.println(Sample.x);
	}
}

class Sample {
	public static int x;

	public static void foo()
	{
		//...
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıfın static veri elemanının bir kullanımı
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		for (int i = 0; i < 10; ++i) {
			Alien alien = new Alien();
			//
		}

		for (int i = 0; i < 20; ++i) {
			Soldier soldier = new Soldier();
			//
		}

		System.out.printf("Number of Soldiers:%d%n", Soldier.count);
		System.out.printf("Number of Aliens:%d%n", Alien.count);
	}
}

class Soldier {
	public static int count;
	public int no;
	//...

	public Soldier() //Burayı önemsemeyin
	{
		++count;
	}
}

class Alien {
	public static int count;
	public int numberOfArms;
	public int color;
	//...

	public Alien() //Burayı önemsemeyin
	{
		++count;
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	 Java'da static veri elemanlarına sınıf dışında referans ve nokta operatörü ile de erişilebilir.
	 Bu durum sınıf ismi ile erişmekle tamamen aynıdır. Okunabilirlik açısından referansla erişmek
	 tavsiye edilmez
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Sample s = new Sample();

		s.x = 10; //dikkat bu şekilde kullanmayın

		System.out.println(Sample.x);
	}
}

class Sample {
	public static int x;
}



/*----------------------------------------------------------------------------------------------------------------------
	 Java'da non static veri elemanlarına sınıf ismi ile erişilemez
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		System.out.println(Sample.x); //error
	}
}

class Sample {
	public int x;
}

/*----------------------------------------------------------------------------------------------------------------------
	 Java'da non static metotları sınıf ismi ile çağrılamaz
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Sample.foo();

	}
}

class Sample {
	public void foo()
	{
		System.out.println("foo");
	}
}



/*----------------------------------------------------------------------------------------------------------------------
	 Java'da non static metotları referans ve nokta operatörü ile çağrılabilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Sample s = new Sample();

		s.foo();
	}
}

class Sample {
	public void foo()
	{
		System.out.println("foo");
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	 Java'da static metotları sınıf dışında referans ve nokta operatörü ile de çağrılabilir.
	 Bu durum sınıf ismi ile erişmekle tamamen aynıdır. Okunabilirlik açısından referansla erişmek
	 tavsiye edilmez
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Sample s = new Sample();

		s.foo(); //dikkat bu şekilde kullanmayın
	}
}

class Sample {
	public static void foo()
	{
		System.out.println("foo");
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	 Sınıfın non-static bir metodu içerisinde aynı sınıfın non-static bir veri elemanına doğrudan
	 erişilebilir. Doğrudan erişilen veri elemanı metodu çağıran referansın gösterdiği nesnenin
	 veri elemanı olacaktır
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Sample s = new Sample();
		Sample k = new Sample();

		s.foo(10);
		k.foo(20);

		System.out.printf("s.x=%d%n", s.x);
		System.out.printf("k.x=%d%n", k.x);

	}
}

class Sample {
	public int x;

	public void foo(int a)
	{
		x = a;
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	 Sınıfın non-static bir metodu içerisinde aynı sınıfın non-static metodu doğrudan
	 çağrılabilir. Doğrudan çağrılan metot onu çağıran metodun referansı ile çağrılmış olur
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Sample s = new Sample();
		Sample k = new Sample();

		s.bar(10);
		k.bar(20);

		System.out.printf("s.x=%d%n", s.x);
		System.out.printf("k.x=%d%n", k.x);
	}
}

class Sample {
	public int x;

	public void foo(int a)
	{
		x = a;
	}

	public void bar(int a)
	{
		foo(a);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	 Sınıfın non-static bir metodu içerisinde aynı sınıfın static bir veri elemanına doğrudan erişilebilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Sample s = new Sample();
		Sample k = new Sample();

		s.foo(34);

		System.out.println(Sample.x);

		k.foo(27);

		System.out.println(Sample.x);
	}
}

class Sample {
	public static int x;

	public void foo(int a)
	{
		x = a;
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	 Sınıfın non-static bir metodu içerisinde aynı sınıfın static bir metodu doğrudan çağrılabilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		//...

	}
}

class Sample {

	public static void bar(int a)
	{

	}

	public void foo(int a)
	{
		bar(a);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	 Sınıfın static bir metodu içerisinde o sınıfın non-static bir veri elemanına doğrudan erişilemez
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		//...

	}
}

class Sample {
	public int x;
	public static void bar(int a)
	{
		x = a; //error
	}

}

/*----------------------------------------------------------------------------------------------------------------------
	 Sınıfın static bir metodu içerisinde o sınıfın non-static bir metodu doğrudan çağrılamaz
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		//...
	}
}

class Sample {
	public int x;
	public static void bar(int a)
	{
		foo(a);//error
	}

	public void foo(int a)
	{
		x = a;
	}

}

/*----------------------------------------------------------------------------------------------------------------------
	 Aşağıdaki örnekte doğrudan erişim olmadığından bir problem oluşmaz
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		//...
	}
}

class Sample {
	public int x;
	public static void bar(int a)
	{
		Sample s = new Sample();

		s.foo(a);
	}

	public void foo(int a)
	{
		x = a;
	}

}


/*----------------------------------------------------------------------------------------------------------------------
	Sınıfın static bir metodu içerisinde o sınıfın static bir veri elemanına doğrudan erişilebilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Sample.foo(67);

		System.out.println(Sample.x);
	}
}

class Sample {
	public static int x;

	public static void foo(int a)
	{
		x = a;
	}

}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıfın static bir metodu içerisinde o sınıfın static bir metodu doğrudan çağrılabilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Sample.bar(67);

		System.out.println(Sample.x);
	}
}

class Sample {
	public static int x;

	public static void bar(int a)
	{
		foo(a);
	}

	public static void foo(int a)
	{
		x = a;
	}

}


/*----------------------------------------------------------------------------------------------------------------------
	28.12.2019
	Point sınıfı test kodu
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Point p1 = new Point();
		Point p2 = new Point();

		p1.x = 100;
		p1.y = 100;

		p2.x = 56;
		p2.y = 89;


		p1.display();
		p2.display();
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Point sınıfı test kodu
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Point p = new Point();


		p.display();

		p.offset(-30, 40);

		p.display();

		p.offset(100, 89);

		p.display();
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Point sınıfı test kodu
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Point p = new Point();


		p.display();

		p.offset(-30);

		p.display();

		p.offset(100);

		p.display();
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Point sınıfı test kodu
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Point p1 = new Point();
		Point p2 = new Point();


		p1.x = 100;
		p1.y = 100;

		p2.x = 50;
		p2.y = 50;

		double dist = p1.distance(p2);

		System.out.println(dist);ample.x;

		dist = p1.distance(50 ,50);

		System.out.println(dist);

		dist = p1.distance();

		System.out.println(dist);

	}
}

class Point {
	public static double distance(int x1, int y1, int x2, int y2) //ileride gizlenecek
	{
		return Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
	}

	public int x, y;

	public double distance()
	{
		return distance(x, y, 0, 0);
	}

	public double distance(Point p)
	{
		return distance(x, y, p.x, p.y);
	}

	public double distance(int a, int b)
	{
		return distance(x, y, a, b);
	}

	public void offset(int dx, int dy)
	{
		x += dx;
		y += dy;
	}

	public void offset(int dxy)
	{
		offset(dxy, dxy);
	}

	public void display()
	{
		System.out.printf("(%d, %d)%n", x, y);
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Aşağıdaki Point sınıfında iyi bir yaklaşımla metot seçimi yapılmamıştır. Çünkü diğer metotlar
	içerinde nesne yaratılmak zorunda kalınmıştır
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Point p1 = new Point();
		Point p2 = new Point();


		p1.x = 100;
		p1.y = 100;

		p2.x = 50;
		p2.y = 50;

		double dist = p1.distance(p2);

		System.out.println(dist);

		dist = p1.distance(50 ,50);

		System.out.println(dist);

		dist = p1.distance();

		System.out.println(dist);

	}
}

class Point {
	public int x, y;

	public double distance()
	{
		return distance(0, 0);
	}

	public double distance(Point p)
	{
		return Math.sqrt((x - p.x) * (x - p.x) + (y - p.y) * (y - p.y));
	}

	public double distance(int a, int b)
	{
		Point p = new Point();

		p.x = a;
		p.y = b;

		return distance(p);
	}

	public void offset(int dx, int dy)
	{
		x += dx;
		y += dy;
	}

	public void offset(int dxy)
	{
		offset(dxy, dxy);
	}

	public void display()
	{
		System.out.printf("(%d, %d)%n", x, y);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Point sınıfı test kodu
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Point p1 = new Point();
		Point p2 = new Point();


		p1.x = 100;
		p1.y = 100;

		p2.x = 50;
		p2.y = 50;

		double dist = p1.distance(p2);

		System.out.println(dist);

		dist = p1.distance(50 ,50);

		System.out.println(dist);

		dist = p1.distance();

		System.out.println(dist);

	}
}

class Point {

	public int x, y;

	public double distance()
	{
		return distance(0, 0);
	}

	public double distance(Point p)
	{
		return distance(p.x, p.y);
	}

	public double distance(int a, int b)
	{
		return Math.sqrt((x - a) * (x - a) + (y - b) * (y - b));
	}

	public void offset(int dx, int dy)
	{
		x += dx;
		y += dy;
	}

	public void offset(int dxy)
	{
		offset(dxy, dxy);
	}

	public void display()
	{
		System.out.printf("(%d, %d)%n", x, y);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Random sınıfının nextInt metodu int türü sınırları içerisinde rasgele üretilmiş sayı döndürür
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Random r = new java.util.Random();

		for (int i = 0; i < 10; ++i)
			System.out.printf("%d%n", r.nextInt());

		System.out.println();
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Random sınıfının parametreli nextInt metodu [0, bound) aralığında rasgele üretilmiş sayı döndürür
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Random r = new java.util.Random();

		for (int i = 0; i < 20; ++i)
			System.out.printf("%d ", r.nextInt(101)); //[0, 101)

		System.out.println();
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	[min, max) aralığında rasgele sayı üretimi
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Random r = new java.util.Random();

		int min = -10, max = 21;

		for (int i = 0; i < 20; ++i)
			System.out.printf("%d ", r.nextInt(max - min) + min); //[min, max)

		System.out.println();
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	[min, max) aralığında rasgele sayı üretimi
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Random r = new java.util.Random();

		int min = -10, max = 21;

		for (int i = 0; i < 20; ++i)
			System.out.printf("%d ", RandomUtil.nextInt(r, min, max)); //[min, max)

		System.out.println();
	}
}

class RandomUtil {
	public static int nextInt(java.util.Random r, int min, int max)
	{
		return r.nextInt(max - min) + min;
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	[min, max) aralığında rasgele sayı üretimi
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Random r = new java.util.Random();

		int min = 10, max = 21;

		for (int i = 0; i < 20; ++i)
			System.out.printf("%d ", Math.abs(r.nextInt() % (max - min)) + min); //[min, max)

		System.out.println();
	}
}



/*----------------------------------------------------------------------------------------------------------------------
	Random sınıfının nextLong metodu
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Random r = new java.util.Random();


		for (int i = 0; i < 20; ++i)
			System.out.printf("%d%n", r.nextLong());

		System.out.println();
	}
}



/*----------------------------------------------------------------------------------------------------------------------
	Random sınıfının nextBoolean metodu
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Random r = new java.util.Random();

		for (int i = 0; i < 20; ++i)
			System.out.printf("%b%n", r.nextBoolean());

		System.out.println();
	}
}



/*----------------------------------------------------------------------------------------------------------------------
	Random sınıfının nextDouble metodu
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Random r = new java.util.Random();


		for (int i = 0; i < 20; ++i)
			System.out.printf("%.20f%n", r.nextDouble()); //[0, 1)

		System.out.println();
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Random sınıfının nextDouble metodu ile [min, max) aralığında rasgele sayı üretimi
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Random r = new java.util.Random();

		double min = 1.2345, max = 6.789;

		for (int i = 0; i < 20; ++i)
			System.out.printf("%.20f%n", r.nextDouble() * (max - min) + min);

		System.out.println();
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Bir paranın yazı gelme olasılığını yaklaşık olarak hesaplayan basit bir simülasyon
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		TailProbability tp = new TailProbability();

		tp.n = 1_000_0000;

		tp.run();

		System.out.printf("p=%.10f%n", tp.p);
	}
}

class TailProbability {
	public int n;
	public double p;

	public void run()
	{
		java.util.Random r = new java.util.Random();

		int tailsCount = 0;

		for (int i = 0; i < n; ++i)
			tailsCount += r.nextInt(2);

		p = (double)tailsCount / n;
	}
}



/*----------------------------------------------------------------------------------------------------------------------
	Bir paranın yazı gelme olasılığını yaklaşık olarak hesaplayan basit bir simülasyon
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		TailProbabilitySimulation tp = new TailProbabilitySimulation();

		tp.n = 1_000_0000;

		tp.run();

		System.out.printf("p=%.10f%n", tp.p);
	}
}

class TailProbabilitySimulation {
	public int n;
	public double p;

	public void run()
	{
		java.util.Random r = new java.util.Random();

		int tailsCount = 0;

		for (int i = 0; i < n; ++i)
			if (r.nextBoolean())
				++tailsCount;

		p = (double)tailsCount / n;
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: İki zar atıldığında çift gelme (ikisinin de aynı) olasılığını yaklaşık olarak
	hesaplayan basit simülasyonu yazınız
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		DiceSimulation ds = new DiceSimulation();

		ds.n = 100_000;

		ds.run();

		System.out.printf("p=%.10f%n", ds.p);
	}
}


class DiceSimulation {
	public int n;
	public double p;

	public static boolean areSame(java.util.Random r)
	{
		return r.nextInt(6) + 1 == r.nextInt(6) + 1;
	}

	public void run()
	{
		java.util.Random r = new java.util.Random();

		int count = 0;

		for (int i = 0; i < n; ++i)
			if (areSame(r))
				++count;

		p = (double)count / n;
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	29.12.2019
	Homework-002-4. sorunun bir çözümü
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		BallFlow.run();
	}
}

class BallFlow {
	public static void fillWithSpace(int start, int end) //[start, end)
	{
		for (int i = start; i < end; ++i)
			System.out.print(" ");
	}

	public static void displayBall(int ballIndex, int width)
	{
		fillWithSpace(0, ballIndex);
		System.out.print("*");
		fillWithSpace(ballIndex + 1, width);
	}        java.util.Random r = new java.util.Random();


	public static void run()
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Yüksekliği giriniz:");
		int height = Integer.parseInt(kb.nextLine());

		System.out.print("Genişliği giriniz:");
		int width = Integer.parseInt(kb.nextLine());

		//...

		boolean incFlag = true;
		int ballIndex = 0;

		for (int i = 1; i <= height; ++i) {
			System.out.print("|");
			displayBall(ballIndex, width);
			if (ballIndex == 0)
				incFlag = true;
			else if (ballIndex == width - 1)
				incFlag = false;

			if (incFlag)
				++ballIndex;
			else
				--ballIndex;

			System.out.println("|");
		}

	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Random sınıfının setSeed metodu ile tohum değeri belirlenebilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Random r = new java.util.Random();

		for (int i = 0; i < 20; ++i)
			System.out.printf("%02d ", r.nextInt(100));

		System.out.println();

		r.setSeed(100);

		for (int i = 0; i < 20; ++i)
			System.out.printf("%02d ", r.nextInt(100));

		System.out.println();
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Bir nesnenin yaratılma aşamaları:
	1. Bellekte yer ayrılır
	2. non-static veri elemanlarına default değerler atanır (istisna bir durum sonradan açıklanacak)
	3. Constructor (ctor) metot çağrılır
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
	ctor özellikleri:
	- Sınıf ismi ile aynı isimde metot
	- Geri dönüş değeri kavramı yok (void da yazılmaz)
	- ctor overload edilebilir
	- ctor erişim belirleyiciye sahip olabilir. Normal bir metodunki ile aynı erişim belileyicilerdir
	- Sınıfı yazan programcı hiç bir ctor yazmazsa bile derleyici "default ctor" denilen parametresiz
	ctor'u public ve içi boş olarak yazar. Ancak programcı bir ctor yazarsa default ctor
	derleyici tarafından yazılmaz. Yani default ctor ya hiç bir ctor yazılmazsa ya da programcı yazarsa vardır.
	- ctor non-static metot etkisindedir
	- ctor programcı tarafından çağrılamaz
----------------------------------------------------------------------------------------------------------------------*/

package csd;

class App {
	public static void main(String [] args)
	{

	}
}

class Sample {
	public Sample()
	{

	}

	public Sample(int a)
	{

	}

	private Sample(double a)
	{

	}

}


/*----------------------------------------------------------------------------------------------------------------------
	Hangi ctor'un çağrılacağı klasik overload resolution işlemleri ile aynı şekilde belirlenir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Sample s = new Sample();
		Sample k = new Sample(10);
		Sample m = new Sample(2.3);
		//...
	}
}

class Sample {
	public Sample()
	{
		System.out.println("Sample.Sample()");
	}

	public Sample(int a)
	{
		System.out.println("Sample.Sample(int)");
	}

	public Sample(double a)
	{
		System.out.println("Sample.Sample(double)");
	}

}


/*----------------------------------------------------------------------------------------------------------------------
	ctor çağrılmadan önce tüm non-static veri elemanlarına default değerler atanır
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Sample s = new Sample();
		Sample k = new Sample(10);
		Sample m = new Sample(2.3);
		//...
	}
}

class Sample {
	public int x;
	public boolean y;

	public Sample()
	{
		System.out.printf("x=%d%n", x);
		System.out.printf("y=%b%n", y);
		System.out.println("Sample.Sample()");
	}

	public Sample(int a)
	{
		System.out.printf("x=%d%n", x);
		System.out.printf("y=%b%n", y);

		System.out.println("Sample.Sample(int)");
	}

	public Sample(double a)
	{
		System.out.printf("x=%d%n", x);
		System.out.printf("y=%b%n", y);
		System.out.println("Sample.Sample(double)");
	}

}


/*----------------------------------------------------------------------------------------------------------------------
	Programcı herhangi bir parametreli ctor yazarsa default ctor otomatik olarak yazılmaz
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Sample s = new Sample(); //error

		//...
	}
}

class Sample {
	public Sample(double a)
	{
		System.out.println("Sample.Sample(double)");
	}

}


/*----------------------------------------------------------------------------------------------------------------------
	ctor içerisinde veri elemanlarına değer atanması en sık rastlanan durumlardan biridir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Date d = new Date(10, 9, 1976);

		System.out.printf("%02d/%02d/%04d%n", d.day, d.mon, d.year);
	}
}

class Date {
	public int day, mon, year;

	public Date(int d, int m, int y)
	{
		//...
		day = d;
		mon = m;
		year = y;
	}
	//...
}




/*----------------------------------------------------------------------------------------------------------------------
	ctor içerisinde return metodu sonlandırmak amaçlı tek başına kullanılabilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Sample s = new Sample(-6);

		System.out.println(s.x);
	}
}

class Sample {
	public int x;
	public Sample(int a)
	{
		if (a < 0)
			return;

		x = a * 3;
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Point sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Point p = new Point(40, 90);

		p.display();
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Point sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Point p = new Point();

		p.display();
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Point sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Point p = new Point(100);

		p.display();
	}
}

class Point {
	public int x, y;

	public Point()
	{}

	public Point(int a)
	{
		x = a;
	}

	public Point(int a, int b)
	{
		x = a;
		y = b;
	}

	public double distance()
	{
		return distance(0, 0);
	}

	public double distance(Point p)
	{
		return distance(p.x, p.y);
	}

	public double distance(int a, int b)
	{
		return Math.sqrt((x - a) * (x - a) + (y - b) * (y - b));
	}

	public void offset(int dx, int dy)
	{
		x += dx;
		y += dy;
	}

	public void offset(int dxy)
	{
		offset(dxy, dxy);
	}

	public void display()
	{
		System.out.printf("(%d, %d)%n", x, y);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Complex sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Complex z = new Complex(3, 4);

		z.display();

	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Complex sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Complex z = new Complex();

		z.display();

	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Complex sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Complex z = new Complex(10);

		z.display();

	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Complex sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Complex z = new Complex(3, 4);

		z.display();

	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Complex sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Complex z = new Complex(3, 4);

		System.out.println(z.getNorm());

	}
}
/*----------------------------------------------------------------------------------------------------------------------
	Complex sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Complex z1 = new Complex(3, 4);
		Complex z2 = new Complex(-3, 5);

		Complex z = z1.plus(z2);


		z.display();
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	04.01.2020
	Complex sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Complex z1 = new Complex(3, 4);
		Complex z = z1.plus(3.4);


		z.display();
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Complex sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Complex z1 = new Complex(3, 4);
		Complex z = Complex.plus(3.4, z1);

		z.display();
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Complex sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Complex z1 = new Complex(3, 4);
		Complex z2 = new Complex(9, -4);
		Complex z = z1.minus(z2);

		z.display();
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Complex sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Complex z1 = new Complex(3, 4);
		Complex z2 = new Complex(9, -4);
		Complex z = z2.minus(z1);

		z.display();
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Complex sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Complex z1 = new Complex(3, 4);
		Complex z = z1.minus(7.8);

		z.display();
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Complex sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Complex z1 = new Complex(3, 4);
		Complex z = Complex.minus(7.8, z1);

		z.display();
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Complex sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Complex z1 = new Complex(3, 4);
		Complex z = z1.getConjugate();

		z.display();
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Complex sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Complex z = new Complex(3, 4);

		z.inc();


		z.display();
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Complex sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Complex z = new Complex(3, 4);

		z.inc(3);


		z.display();
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Complex sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Complex z = new Complex(3, 4);

		z.dec(3);
		z.display();
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Complex sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Complex z = new Complex(3, 4);

		z.dec();

	}
}
		z.display();
	}
}

class Complex {
	public static Complex plus(double a1, double b1, double a2, double b2) //ileride bu metot gizlenecek
	{
		return new Complex(a1 + a2, b1 + b2);
	}

	public static Complex minus(double a1, double b1, double a2, double b2) //ileride bu metot gizlenecek
	{
		return plus(a1, b1, -a2, -b2);
	}

	public double a, b;

	public Complex() {}

	public Complex(double re)
	{
		a = re;
	}

	public Complex(double re, double im)
	{
		a = re;
		b = im;
	}

	public double getNorm() {return Math.sqrt(a * a + b * b);}

	public Complex getConjugate() {return new Complex(a, -b);}

	//plus methods

	public static Complex plus(double val, Complex z)
	{
		return plus(val, 0, z.a, z.b);
	}

	public Complex plus(Complex z)
	{
		return plus(a, b, z.a, z.b);
	}

	public Complex plus(double val)
	{
		return plus(a, b, val, 0);
	}

	//minus methods

	public static Complex minus(double val, Complex z)
	{
		return minus(val, 0, z.a, z.b);
	}

	public Complex minus(Complex z)
	{
		return minus(a, b, z.a, z.b);
	}

	public Complex minus(double val)
	{
		return minus(a, b, val, 0);
	}

	//inc methods

	public void inc()
	{
		inc(1);
	}

	public void inc(int amount)
	{
		a += amount;
	}

	//dec methods

	public void dec()
	{
		dec(1);
	}

	public void dec(int amount)
	{
		inc(-amount);
	}

	public void display()
	{
		System.out.printf("|%.2f + %.2fi|=%f%n", a, b, getNorm());
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Random sınıfının tohum değeri parametreli ctor'u
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Random r = new java.util.Random(100);

		for (int i = 0; i < 10; ++i)
			System.out.printf("%d ", r.nextInt(100));

		System.out.println();
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	immutable sınıf: Sınıf türünden nesne yaratıldığında nesnenin içeriğinin değiştirilemediği sınıflardır
----------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------
	İki tırnak içerisinde verilen bir atom için derleyiciye aşağıdaki emir verilmiş olur:
	"Derleyici, heap'de verilen karakterleri gösterecek şekilde bir String nesnesi yarat ve bana adresini
	(referansını) ver.

	print ve println metotları String türünden bir referansı argüman olarak aldıklarında bu referansa
	ilişkin yazıyı ekrana basarlar
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		String s = "ankara";

		System.out.println(s);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	printf metodunda s format karakteri ile String referansına ilişkin yazı formatlanabilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		String s = "ankara";

		System.out.printf("Yazı:%s%n", s);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Scanner sınıfının nextLine metodu ile klavyeden yazı (String referansı) alınabilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir yazı giriniz:");
		String s = kb.nextLine();

		System.out.printf("Girilen yazı:%s%n", s);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	String sınıfının length isimli metodu ile yazının kaç karakterden oluştuğu bilgisi elde edilebilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir yazı giriniz:");
		String s = kb.nextLine();

		System.out.printf("Length:%d%n", s.length());
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	String sınıfının charAt metodu ile herhangi bir indeksteki karakter elde edilebilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir yazı giriniz:");
		String s = kb.nextLine();

		int len = s.length();

		for (int i = 0; i < len; ++i)
			System.out.printf("%c ", s.charAt(i));

		System.out.println();
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	String sınıfının charAt metoduna pozitif ya da negatif bakımdan sınırlar dışında indeks numarası
	verildiğinde exception oluşur. Aralık:[0, length() - 1]
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir yazı giriniz:");
		String s = kb.nextLine();

		char ch = s.charAt(5);

		System.out.println(ch);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	String sınıfının yazı üzerinde değişiklik yapan metotları immutable özellikten dolayı değiştirilmiş
	yeni bir String nesnesine ilişkin referansı döndürür
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir yazı giriniz:");
		String s = kb.nextLine();

		String upper = s.toUpperCase();

		System.out.printf("upper:%s%n", upper);
		System.out.printf("s:%s%n", s);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Aşağıdaki örnekte mantıksal olarak yazı büyütülerek devam edilmiştir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir yazı giriniz:");
		String s = kb.nextLine();

		s = s.toUpperCase();

		System.out.println(s);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	String sınıfının indexOf metotları
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		String s = "ankara";
		char ch = 'z';

		int index = s.indexOf(ch);

		System.out.printf("index:%d%n", index);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	String sınıfının lastIndexOf metotları
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		String s = "ankara";
		char ch = 'a';

		int index = s.lastIndexOf(ch);

		System.out.printf("index:%d%n", index);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	String sınıfının indexOf metotları
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		String s = "ankara";
		char ch = 'a';

		int index = s.indexOf(ch, 2);

		System.out.printf("index:%d%n", index);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	String sınıfının indexOf metotları
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		String s = "ankara";
		char ch = 'a';

		int index = s.indexOf(ch, 2);

		System.out.printf("index:%d%n", index);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	String sınıfının indexOf metotları
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		String s = "Bugün hava çok güzel. çok çok güzel";
		String searchText = "çok";

		int index = s.indexOf(searchText, 12);

		System.out.printf("index:%d%n", index);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	05.01.2020
	Sınıf Çalışması: Parametresi ile aldığı iki yazıdan birincisi içerisinde ikincisinden kaç tane
	olduğunu döndüren getCount isimli metodu StringUtil sınıfı içerisinde yazınız.
	Örnek:
	aaa, aa dan 2 tane var
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Yazıyı giriniz:");
		String s1 = kb.nextLine();

		System.out.print("Aranacak yazıyı giriniz:");
		String s2 = kb.nextLine();

		int count = StringUtil.getCount(s1, s2);

		if (count != 0)
			System.out.printf("'%s'%nyazısı içerisinde%n'%s'%nyazısından %d tane var%n", s1, s2, count);
		else
			System.out.println("Yazı bulunamadı");
	}
}

class StringUtil {
	public static int getCount(String s1, String s2)
	{
		int count = 0;
		int index = 0;

		while ((index = s1.indexOf(s2, index)) != -1) {
			++count;
			++index;
		}

		return count;
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı iki yazıdan birincisi içerisinde ikincisinden kaç tane
	olduğunu döndüren getCount isimli metodu StringUtil sınıfı içerisinde yazınız.
	Örnek:
	aaa, aa dan 2 tane var
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Yazıyı giriniz:");
		String s1 = kb.nextLine();

		System.out.print("Aranacak yazıyı giriniz:");
		String s2 = kb.nextLine();

		int count = StringUtil.getCount(s1, s2);

		if (count != 0)
			System.out.printf("'%s'%nyazısı içerisinde%n'%s'%nyazısından %d tane var%n", s1, s2, count);
		else
			System.out.println("Yazı bulunamadı");
	}
}

class StringUtil {
	public static int getCount(String s1, String s2)
	{
		int count = 0;
		int index = -1;

		while ((index = s1.indexOf(s2, index + 1)) != -1)
			++count;

		return count;
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı iki yazıdan birincisi içerisinde ikincisinden kaç tane
	olduğunu döndüren getCount isimli metodu StringUtil sınıfı içerisinde yazınız.
	Örnek:
	aaa, aa dan 2 tane var
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Yazıyı giriniz:");
		String s1 = kb.nextLine();

		System.out.print("Aranacak yazıyı giriniz:");
		String s2 = kb.nextLine();

		int count = StringUtil.getCount(s1, s2);

		if (count != 0)
			System.out.printf("'%s'%nyazısı içerisinde%n'%s'%nyazısından %d tane var%n", s1, s2, count);
		else
			System.out.println("Yazı bulunamadı");
	}
}

class StringUtil {
	public static int getCount(String s1, String s2)
	{
		int count = 0;

		for (int index = 0; (index = s1.indexOf(s2, index)) != -1; ++count, ++index)
				;

		return count;
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı iki yazıdan birincisi içerisinde ikincisinden kaç tane
	olduğunu döndüren getCount isimli metodu StringUtil sınıfı içerisinde yazınız.
	Örnek:
	aaa, aa dan 2 tane var
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Yazıyı giriniz:");
		String s1 = kb.nextLine();

		System.out.print("Aranacak yazıyı giriniz:");
		String s2 = kb.nextLine();

		int count = StringUtil.getCount(s1, s2);

		if (count != 0)
			System.out.printf("'%s'%nyazısı içerisinde%n'%s'%nyazısından %d tane var%n", s1, s2, count);
		else
			System.out.println("Yazı bulunamadı");
	}
}

class StringUtil {
	public static int getCount(String s1, String s2)
	{
		int count = 0;

		for (int index = -1; (index = s1.indexOf(s2, index + 1)) != -1; ++count)
				;

		return count;
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	String sınıfının contains metodu ile bir yazı içerisinde başka bir yazının var olup olmadığı
	test edilebilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Yazıyı giriniz:");
		String s = kb.nextLine();

		System.out.print("Zararlı yazıyı giriniz:");
		String blackList = kb.nextLine();

		if (!s.contains(blackList))
			System.out.println("Geçerli yazı");
		else
			System.out.println("Geçersiz yazı");

	}
}

/*----------------------------------------------------------------------------------------------------------------------
	String sınıfının equals metodu ile yazıların eşitlik karşılaştırması büyük küçük harf duyarlı olarak
	yapılabilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Birinci yazıyı giriniz:");
		String s1 = kb.nextLine();

		System.out.print("İkinci yazıyı giriniz:");
		String s2 = kb.nextLine();

		if (s1.equals(s2))
			System.out.println("Aynı");
		else
			System.out.println("Farklı");
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	String sınıfının equalsIgnoreCase metodu ile yazıların eşitlik karşılaştırması büyük küçük harf duyarsız
	olarak yapılabilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Birinci yazıyı giriniz:");
		String s1 = kb.nextLine();

		System.out.print("İkinci yazıyı giriniz:");
		String s2 = kb.nextLine();

		if (s1.equalsIgnoreCase(s2))
			System.out.println("Aynı");
		else
			System.out.println("Farklı");
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Klavyeden bir kullanıcı adı şifre bilgisi isteyiniz. Programın içerisinde kayıtlı olan
	kullanıcı adı ve şifre ile kontrol edildiğinde giriş başarılı ve giriş başarısız gibi mesajlar veren
	ve yanlış olarak en fazla 3 kez deneme hakkı veren programı yazınız
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		ATMApp app = new ATMApp(3);

		app.run();
	}
}


class ATMApp {
	public int tryNum;

	public ATMApp(int val)
	{
		tryNum = val;
	}

	public void doWorkForSuccess()
	{
		System.out.println("Giriş başarılı");
	}

	public void doWorkForFail()
	{
		System.out.println("Giriş başarısız. Kartınız iptal edilmiştir");
	}

	public void run()
	{
		String uname = "test";
		String passwd = "1234";

		java.util.Scanner kb = new java.util.Scanner(System.in);

		int i;

		for (i = 0; i < tryNum; ++i) {
			System.out.print("Kullanıcı adı giriniz:");
			String username = kb.nextLine();

			System.out.print("Şifre giriniz:");
			String password = kb.nextLine();

			if (username.equals(uname) && password.equals(passwd))
				break;
		}

		if (i != tryNum)
			doWorkForSuccess();
		else
			doWorkForFail();
 	}
}

/*----------------------------------------------------------------------------------------------------------------------
	concat metodu yazıları birleştirmek için kullanılabilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		String s1 = "ankara";
		String s2 = "istanbul";

		String s = s1.concat(s2);

		System.out.println(s1);
		System.out.println(s2);
		System.out.println(s);
	}
}



/*----------------------------------------------------------------------------------------------------------------------
	String sınıfı zincir biçiminde çağrılara uygundur (fluent)
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		String s1 = "ankara";
		String s2 = "istanbul";

		String s = s1.concat(" ").concat(s2);

		System.out.println(s1);
		System.out.println(s2);
		System.out.println(s);
	}
}



/*----------------------------------------------------------------------------------------------------------------------
	String sınıfı zincir biçiminde çağrılara uygundur (fluent)
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		String s1 = "ankara";
		String s2 = "istanbul";

		String s = s1.concat(" ").concat(s2).toUpperCase();

		System.out.println(s1);
		System.out.println(s2);
		System.out.println(s);
	}
}



/*----------------------------------------------------------------------------------------------------------------------
	Aşağıdaki örneği inceleyiniz
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		String s1 = "ankara";
		String s2 = "istanbul";

		String s = s1.concat(" ".concat(s2)).toUpperCase();

		System.out.println(s1);
		System.out.println(s2);
		System.out.println(s);
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	+ operatörünün operandlarından birisi String türündense sonuç String türder çıkar. + operatörü
	bu durumda birleştirilmiş yazıyı içeren bir nesnenin adresini üretir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		String s1 = "ankara";
		String s2 = "istanbul";

		String s = s1 + s2;

		System.out.println(s1);
		System.out.println(s2);
		System.out.println(s);
	}
}



/*----------------------------------------------------------------------------------------------------------------------
	+ operatörünün operandlarından birisi String türündense sonuç String türder çıkar. + operatörü
	bu durumda birleştirilmiş yazıyı içeren bir nesnenin adresini üretir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		int degree = 12;
		String s = "Bugün hava " + degree + " derece";

		System.out.println(s);
	}
}



/*----------------------------------------------------------------------------------------------------------------------
	length değeri sıfır olan String'e boş string denir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		String s = "";

		System.out.println(s.length());

	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Bir yazının boş String olup olmadığını test eden isEmpty metodu
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		String s = " ";

		System.out.println(s.isEmpty());

	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı bir yazının tersini döndüren reverse isimli metodu StringUtil
	sınıfı içerisinde yazınız
	(Göreceli yavaş versiyon.İleride hızlandıracağız)
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.println("Bir yazı giriniz:");
		String str = kb.nextLine();

		System.out.println(StringUtil.reverse(str));
	}
}

class StringUtil {
	public static String reverse(String str)
	{
		String s = "";

		for (int i = str.length() - 1; i >= 0; --i)
			s += str.charAt(i);

		return s;
	}
}



/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı bir yazının palindrom olmadığını test eden isPalindrome
	isimli metodu yazınız ve test ediniz
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.println("Bir yazı giriniz:");
		String str = kb.nextLine();


		System.out.println(StringUtil.isPalindrome(str) ? "Palindrom" : "Palindrom değil");
	}
}

class StringUtil {
	public static boolean isPalindrome(String s)
	{
		//...

		s = s.toLowerCase();
		return reverse(s).equals(s);
	}

	public static String reverse(String str)
	{
		String s = "";

		for (int i = str.length() - 1; i >= 0; --i)
			s += str.charAt(i);

		return s;
	}

}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı bir yazının palindrom olup olmadığını test eden isPalindrome
	isimli metodu yazınız ve test ediniz
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.println("Bir yazı giriniz:");
		String str = kb.nextLine();


		System.out.println(StringUtil.isPalindrome(str) ? "Palindrom" : "Palindrom değil");
	}
}

class StringUtil {
	public static boolean isPalindrome(String s)
	{
		//...
		s = s.toLowerCase();
		int first = 0, last = s.length() - 1;

		while (first < last)
			if (s.charAt(first++) != s.charAt(last--))
				return false;

		return true;
	}



}



/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı bir yazının palindrom olup olmadığını test eden isPalindrome
	isimli metodu yazınız ve test ediniz
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.println("Bir yazı giriniz:");
		String str = kb.nextLine();


		System.out.println(StringUtil.isPalindrome(str) ? "Palindrom" : "Palindrom değil");
	}
}

class StringUtil {
	public static boolean isPalindrome(String s)
	{
		//...
		s = s.toLowerCase();

		int len = s.length();
		int halfLen = len / 2;

		for (int i = 0; i < halfLen; ++i)
			if (s.charAt(i) != s.charAt(len - 1 - i))
				return false;

		return true;
	}

}

/*----------------------------------------------------------------------------------------------------------------------
	18.01.2020
	Aynı türden referansların == veya != operatörü ile karşılaştırması referans karşılaştırması anlamındadır.
	Yani aslında aynı nesneyi gösterip göstermedikleri test edilebilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Sample s = new Sample(10);
		Sample k = new Sample(10);

		System.out.println(s == k ? "Aynı nesne" : "Farklı nesneler");
	}
}

class Sample {
	public int x;

	public Sample(int a)
	{
		x = a;
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Aynı türden referansların == veya != operatörü ile karşılaştırması referans karşılaştırması anlamındadır.
	Yani aslında aynı nesneyi gösterip göstermedikleri test edilebilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Sample s = new Sample(10);
		Sample k = s;

		System.out.println(s == k ? "Aynı nesne" : "Farklı nesneler");
	}
}

class Sample {
	public int x;

	public Sample(int a)
	{
		x = a;
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Derleyici özdeş String sabitleri (atomları) için aynı adresi veredcek şekilde kod üretir. Yani
	Özdeş string'ler için toplamda bir tane yaratılır
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		String s = "ankara";
		String k = "ankara";

		System.out.println(s == k ? "Aynı" : "Farklı");
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Aşağıdaki referans karşılaştırması yapıldığından yazının aynı olup olmadığı anlaşılamaz
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Birinci yazıyı giriniz:");
		String s = kb.nextLine();

		System.out.print("İkinci yazıyı giriniz:");
		String k = kb.nextLine();


		System.out.println(s == k ? "Aynı" : "Farklı");
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	String sınıfının compareTo metodu
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Birinci yazıyı giriniz:");
		String s = kb.nextLine();

		System.out.print("İkinci yazıyı giriniz:");
		String k = kb.nextLine();


		int result = s.compareTo(k);

		System.out.printf("result=%d%n", result);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	String sınıfının compareToIgnoreCase metodu
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Birinci yazıyı giriniz:");
		String s = kb.nextLine();

		System.out.print("İkinci yazıyı giriniz:");
		String k = kb.nextLine();


		int result = s.compareToIgnoreCase(k);

		System.out.printf("result=%d%n", result);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	String sınıfının trim metodu
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir yazı giriniz:");
		String s = kb.nextLine();

		String str = s.trim();

		System.out.printf("s=(%s)%n", s);
		System.out.printf("str=(%s)%n", str);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Character sınıfının yararlı isXXX metotları
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		char ch = '\t';

		System.out.println(Character.isWhitespace(ch) ? "Boşluk karakteri" : "Boşluk karakteri değil");
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Character sınıfının yararlı isXXX metotları
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		char ch = 'C';

		System.out.println(Character.isLetter(ch) ? "Alfabetik karakter" : "Alfabetik karakter değil");
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Character sınıfının yararlı isXXX metotları
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		char ch = '3';

		System.out.println(Character.isDigit(ch) ? "Nümerik karakter" : "Nümerik karakter değil");
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Character sınıfının yararlı toXXX metotları
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		char ch = 'c';

		System.out.println(Character.toUpperCase(ch));
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	String sınıfının subString metotları
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		String s = "ankara";

		System.out.println(s.substring(2));
		System.out.println(s.substring(2, 5)); //[2, 5)
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı bir yazının palindrom olup olmadığını test eden isPalindrome
	isimli metodu yazınız ve test ediniz
	(Alfabetik dışı karakterlerin hepsi atılarak yapılmıştır)
	Ey edip Adana'da pide ye!
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.println("Bir yazı giriniz:");
		String str = kb.nextLine();


		System.out.println(StringUtil.isPalindrome(str) ? "Palindrom" : "Palindrom değil");
	}
}

class StringUtil {
	public static String removeNonalphabetics(String s)
	{
		String str = "";

		int len = s.length();

		for (int i = 0; i < len; ++i) {
			char ch = s.charAt(i);

			if (Character.isLetter(ch))
				str += ch;
		}

		return str;
	}

	public static boolean isPalindrome(String s)
	{
		s = removeNonalphabetics(s);

		int len = s.length();
		int halfLen = len / 2;

		for (int i = 0; i < halfLen; ++i) {
			char ch1 = Character.toLowerCase(s.charAt(i));
			char ch2 = Character.toLowerCase(s.charAt(len - 1 - i));

			if (ch1 != ch2)
				return false;
		}

		return true;
	}

}



/*----------------------------------------------------------------------------------------------------------------------
	String sınıfının subString metoduna length indeks olarak verildiğinde boş string döndürür
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		String str = "ankara";

		System.out.println(str.substring(str.length()));
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı bir yazının başındaki ve sonundaki boşuklarını atarak
	ilk karakteri büyük	geri kalan karakterleri küçük olacak şekilde bir yazı döndüren capitalize
	isimli metodu yazınız ve test ediniz
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir yazı giriniz:");
		String s = kb.nextLine();

		System.out.printf("(%s)%n", StringUtil.capitalize(s));
	}
}

class StringUtil {
	public static String capitalize(String str)
	{
		str = str.trim();

		return !str.isEmpty() ? Character.toUpperCase(str.charAt(0)) + str.substring(1).toLowerCase() : "";
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı bir yazının başındaki ve sonundaki boşuklarını atarak
	ilk karakteri büyük	geri kalan karakterleri küçük olacak şekilde bir yazı döndüren capitalize
	isimli metodu yazınız ve test ediniz
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir yazı giriniz:");
		String s = kb.nextLine();

		System.out.printf("(%s)%n", StringUtil.capitalize(s));
	}
}

class StringUtil {
	public static String capitalize(String str)
	{
		str = str.trim();

		return !str.isEmpty() ? Character.toUpperCase(str.charAt(0)) + str.substring(1).toLowerCase() : "";
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	19.01.2020
	Sınıf Çalışması: Klavyeden exit girilene kadar alınan yazıları aralarında - koyarak birleştirip
	yeni bir String elde eden programı yazınız
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		StringConcatApp app = new StringConcatApp();

		app.run();

		System.out.println(app.result);
	}
}

class StringConcatApp {
	public String result;

	public StringConcatApp()
	{
		result = "";
	}

	public void run()
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);

		System.out.println("Yazıları girmeye başlayınız");

		for (;;) {
			System.out.print("Yazı:");
			String s = kb.nextLine();

			if (s.equals("exit"))
				break;

			if (!result.isEmpty())
				result += "-";

			result += s;
		}
	}
}





/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Klavyeden exit girilene kadar alınan yazıları aralarında - koyarak birleştirip
	yeni bir String elde eden programı yazınız
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		StringConcatApp app = new StringConcatApp();

		app.run();

		System.out.println(app.result);
	}
}

class StringConcatApp {
	public String result;

	public StringConcatApp()
	{
		result = "";
	}

	public void run()
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);

		System.out.println("Yazıları girmeye başlayınız");

		for (;;) {
			System.out.print("Yazı:");
			String s = kb.nextLine();

			if (s.equals("exit"))
				break;

			result += s + "-";
		}

		if (!result.isEmpty())
			result = result.substring(0, result.length() - 1);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Klavyeden exit girilene kadar alınan yazıları aralarında - koyarak birleştirip
	yeni bir String elde eden programı yazınız
	(Daha az okunabilir versiyon)
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		StringConcatApp app = new StringConcatApp();

		app.run();

		System.out.println(app.result);
	}
}

class StringConcatApp {
	public String result;

	public StringConcatApp()
	{
		result = "";
	}

	public void run()
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);

		System.out.println("Yazıları girmeye başlayınız");

		System.out.print("Yazı:");
		String s;

		while (!(s = kb.nextLine()).equals("exit")) {
			result += s + "-";
			System.out.print("Yazı:");
		}

		if (!result.isEmpty())
			result = result.substring(0, result.length() - 1);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Klavyeden exit girilene kadar alınan yazıları aralarında - koyarak birleştirip
	yeni bir String elde eden programı yazınız
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		StringConcatApp app = new StringConcatApp("-");

		app.run();

		System.out.println(app.result);
	}
}

class StringConcatApp {
	public String result;
	public String delim;

	public StringConcatApp(String d)
	{
		result = "";
		delim = d;
	}

	public void run()
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);

		System.out.println("Yazıları girmeye başlayınız");

		for (;;) {
			System.out.print("Yazı:");
			String s = kb.nextLine();

			if (s.equals("exit"))
				break;

			result += s + delim;
		}

		if (!result.isEmpty())
			result = result.substring(0, result.length() - delim.length());
	}
}



/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı bir yazının pangram olup olmadığını test eden isPangramTR ve
	isPangramEN isimli metotları yazınız ve test ediniz
	Pangram:
	1. Pijamalı hasta yağız şoföre çabucak güvendi
	2. The quick brown fox jumps over the lazy dog.
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		String strTR = "Pijamalı hasta yağız şoföre çabucak güvendi.";
		String strEN = "The quick brown fox jumps over the lazy dog.";

		System.out.println(StringUtil.isPangramTR(strTR) ? "Pangram" : "Pangram değil");
		System.out.println(StringUtil.isPangramEN(strEN) ? "is Pangram" : "is not a pangram");
	}
}


class StringUtil {
	public static boolean isPangram(String s, String alphabet)
	{
		int len = alphabet.length();

		for (int i = 0; i < len; ++i)
			if (!s.contains(alphabet.charAt(i) + ""))
				return false;

		return true;
	}

	public static boolean isPangramTR(String s)
	{
		return isPangram(s.toLowerCase(), "abcçdefgğhıijklmnoöprsştuüvyz");
	}

	public static boolean isPangramEN(String s)
	{
		return isPangram(s.toLowerCase(), "abcdefghijklmnopqrstuvwxyz");
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Aşağıda açıklanan metotları yazınız ve test ediniz:

	public static String padLeft(String s, int len, char ch);
	public static String padLeft(String s, int len);

	public static String padRight(String s, int len, char ch);
	public static String padRight(String s, int len);

	Açıklama:
	- padLeft metodunun 3 parametreli versiyonu ikinci parametresi ile aldığı len uzunluğu
	yazıdan büyükse	yazıyı soldan ch karakteri ile doldurulmuş yeni bir String döndürecektir.

	Örneğin: padLeft("ankara", 8, 'x') çağrısı
		xxxankara

	yazısını döndürecektir
	- len yazıdan küçük veya eşitse aynı referans döndürülecektir.
	- padLeft metodunun iki parametreli	versiyonu yazıyı soldan space karakteri ile besleyecektir
	- padRight metotları sağdan besleyecek şekilde padLeft metotlarına benzer biçimde çalışacaktır
----------------------------------------------------------------------------------------------------------------------*/

package csd;

class App {
	public static void main(String [] args)
	{
		String str = "ankara";
		char ch = 'x';

		System.out.printf("(%s)%n", StringUtil.padLeft(str, 9, ch));
		System.out.printf("(%s)%n", StringUtil.padLeft(str, 9));
		System.out.printf("(%s)%n", StringUtil.padRight(str, 9, ch));
		System.out.printf("(%s)%n", StringUtil.padRight(str, 9));
	}
}


class StringUtil {
	public static String padLeft(String s, int len, char ch)
	{
		if (len <= s.length())
			return s;

		return repeat(len - s.length(), ch) + s;
	}

	public static String padLeft(String s, int len)
	{
		return padLeft(s, len, ' ');
	}

	public static String padRight(String s, int len, char ch)
	{
		if (len <= s.length())
			return s;

		return s + repeat(len - s.length(), ch);
	}

	public static String padRight(String s, int len)
	{
		return padRight(s, len, ' ');
	}

	public static String repeat(int n, char ch)
	{
		String str = "";

		while (n-- > 0)
			str += ch;

		return str;
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı bir yazının başındaki boşlukları atan trimStart ve sonundaki
	boşlukları atan trimEnd metotlarını yazınız ve test ediniz
----------------------------------------------------------------------------------------------------------------------*/

package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Bir yazı giriniz:");
		String s = kb.nextLine();

		System.out.printf("(%s)%n", StringUtil.trimStart(s));
		System.out.printf("(%s)%n", StringUtil.trimEnd(s));
	}
}


class StringUtil {
	public static String trimStart(String s)
	{
		int i;

		int len = s.length();

		for (i = 0; i < len && Character.isWhitespace(s.charAt(i)); ++i)
			;

		return s.substring(i);
	}

	public static String trimEnd(String s)
	{
		int i;

		for (i = s.length() - 1; i >= 0 && Character.isWhitespace(s.charAt(i)); --i)
			;

		return s.substring(0, i + 1);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	String sınıfının startsWith metodu
----------------------------------------------------------------------------------------------------------------------*/

package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Adres giriniz:");
		String url = kb.nextLine();
		String http = "http://";

		if (!url.startsWith(http))
			url = http + url;

		System.out.println(url);
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	String sınıfının endsWith metodu
----------------------------------------------------------------------------------------------------------------------*/

package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Email giriniz:");
		String email = kb.nextLine();
		String postfix = ".com";

		if (!email.endsWith(postfix))
			email += postfix;

		System.out.println(email);
	}
}



/*----------------------------------------------------------------------------------------------------------------------
	String sabiti içerisinde ters bölü karakterlerinin kullanımı
----------------------------------------------------------------------------------------------------------------------*/

package csd;

class App {
	public static void main(String [] args)
	{
		String path = "C:\\test\\names.txt";

		System.out.println(path);
	}
}



/*----------------------------------------------------------------------------------------------------------------------
	Yukarıdaki programda dosya yol ifadesi kalvyeden istendiğinde doğrudan girilmelidir Ters bölü karakterler
	String sabitleri için anlamlıdır
----------------------------------------------------------------------------------------------------------------------*/

package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Yol ifadesini giriniz:");
		String path = kb.nextLine();

		System.out.println(path);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Klavye için, Scanner sınıfının nextInt gibi temel türler için kullanılan metotları nextLine metoduyla
	beraber kullanılmamalıdır. Aşağıdaki örneği inceleyeniz
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);

		for (;;) {
			System.out.print("Numara giriniz:");
			int number = kb.nextInt();

			if (number == 0)
				break;

			System.out.print("İsim giriniz:");
			String name = kb.nextLine();

			System.out.printf("%d, %s%n", number, name);
		}
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	25.01.2020
	Java 1.7 ile birlikte String sınıfı switch deyimi ile de kullanılabilmektedir. case bölümüne ilişkin
	sabit ifadesinin String atomu gerekir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Şehri giriniz:");
		String city = kb.nextLine();

		switch (city.toLowerCase()) {
		case "ankara":
			System.out.println("Ankara seçtiniz");
			break;
		case "istanbul":
			System.out.println("İstanbul seçtiniz");
			break;
		default:
			System.out.println("Geçersiz şehir ismi");
		}

		System.out.println("Tekrar yapıyor musunuz?");
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı n değeri için n tane içerisinde İnglizce ve Türkçe
	alfabedeki karakterler ile rakam karakteri ve .:?-_ karakterlerinden olan rasgele üretilmiş bir yazı
	döndüren generateRandomPassword metodunu yazınız ve test ediniz
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("n değerini giriniz:");
		int n = Integer.parseInt(kb.nextLine());

		System.out.println(Util.generateRandomPassword(n));
	}
}

class Util {
	public static String generateRandomPassword(java.util.Random r, int n)
	{
		String strTR = "çÇğĞıIiİüÜşŞöÖ";
		String delim = ".:?-_";
		String password = "";

		for (int i = 0; i < n; ++i) {
			int option = r.nextInt(4);

			int ch;
			switch (option) {
			case 0:
				ch = r.nextInt('Z' - 'A') + 'A';
				password += r.nextBoolean() ?  (char)ch : (char)(ch + 32);
				break;
			case 1:
				password += (char)(r.nextInt('9' - '0') + '0');
				break;
			case 2:
				password += strTR.charAt(r.nextInt(strTR.length()));
				break;
			case 3:
				password += delim.charAt(r.nextInt(delim.length()));
				break;
			}
		}

		return password;
	}

	public static String generateRandomPassword(int n)
	{
		return generateRandomPassword(new java.util.Random(), n);
	}
}



/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı n değeri için n tane içerisinde İnglizce ve Türkçe
	alfabedeki karakterler ile rakam karakteri ve .:?-_ karakterlerinden olan rasgele üretilmiş bir yazı
	döndüren generateRandomPassword metodunu yazınız ve test ediniz
	(Yukarıdakine göre daha okunabilir versiyon)
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("n değerini giriniz:");
		int n = Integer.parseInt(kb.nextLine());

		System.out.println(Util.generateRandomPassword(n));
	}
}

class Util {
	public static String generateRandomPassword(java.util.Random r, int n)
	{
		String chars = "abcçdefgğhıijklmnoöpqrsştuüwxvyz0123456789.:?-_";
		String password = "";

		for (int i = 0; i < n; ++i)  {
			char ch = chars.charAt(r.nextInt(chars.length()));

			password += r.nextBoolean() ? Character.toUpperCase(ch) : ch;
		}

		return password;

	}

	public static String generateRandomPassword(int n)
	{
		return generateRandomPassword(new java.util.Random(), n);
	}
}



/*----------------------------------------------------------------------------------------------------------------------
	String sınıfının format metodu
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Dereceyi giriniz:");
		double val = Double.parseDouble(kb.nextLine());

		String text = String.format("Bugün hava '%.2f' derece", val);

		System.out.println(text);
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	String sınıfının valuOf metotları
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Dereceyi giriniz:");
		double val = Double.parseDouble(kb.nextLine());

		String valStr = String.valueOf(val);

		System.out.printf("Sayı:%s%n", valStr);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Sarmalayan sınıfların (wrapper) parseXXX metotları ile yazılar değere dönüştürülebilir
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("Dereceyi giriniz:");
		String str = kb.nextLine();

		double val = Double.parseDouble(str);

		double result = val * val;

		System.out.printf("%f * %f = %f%n", val, val, result);
	}
}




/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı int türden bir n değeri için n tane içerisinde Türkçe karakterler
	olan getRandomTextTR ve İngilizce karakterler olan getRandomTextEN isimli metotları yazınız ve test ediniz
----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		System.out.print("n sayısını giriniz:");
		int n = Integer.parseInt(kb.nextLine());

		System.out.println(StringUtil.getRandomTextTR(n));
		System.out.println(StringUtil.getRandomTextEN(n));
		System.out.println(StringUtil.getRandomString(new java.util.Random(), n, "0123456789"));

	}
}

class StringUtil {
	public static String getRandomString(java.util.Random r, int n, String str)
	{
		String s = "";

		for (int i = 0; i < n; ++i)
			s += str.charAt(r.nextInt(str.length()));

		return s;
	}

	public static String getRandomText(java.util.Random r, int n, String alphabet)
	{
		String s = "";

		for (int i = 0; i < n; ++i) {
			char ch = alphabet.charAt(r.nextInt(alphabet.length()));

			s += r.nextBoolean() ? Character.toUpperCase(ch) : ch;
		}

		return s;
	}

	public static String getRandomTextTR(java.util.Random r, int n)
	{
		String alphabet = "abcçdefgğhıijklmnoöprsştuüvyz";

		return getRandomText(r, n, alphabet);
	}

	public static String getRandomTextTR(int n)
	{
		return getRandomTextTR(new java.util.Random(), n);
	}

	public static String getRandomTextEN(java.util.Random r, int n)
	{
		String alphabet = "abcdefghijklmnopqrstuwvxyz";

		return getRandomText(r, n, alphabet);
	}

	public static String getRandomTextEN(int n)
	{
		return getRandomTextEN(new java.util.Random(), n);
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	26.01.2020
	Aşağıdaki maddelerde aksi belirtilmediği sürece "sınıf" kavramı aslında "tür" kavramı olarak
	kullanılacaktır. Burada "tür" temel türler dışında kalan programcının belirlediği türlerdir.
	Yani tüm referans türleri için geçerli olacaktır.

	Paketler:

	- javac her sınıf için ayrı bir .class uzantılı dosya (byte code) üretir. Bu işlem
	sınıflar aynı .java dosyasında olsa bile yapılır.

  	- Bir .class dosyasının ait olduğu pakete ilişkin bir dizinde (directory) bulunması gerekir.
	Aslında .java dosyaları için böyle bir zorunluluk yoktur. Ancak bir çok IDE bunu
	kendi içinde zorunlu tutar.

  	- Bir sınıf herhangi bir pakette olabilir. Bir proje içerisinde kullanılan sınıfların aynı pakette
  	olma zorunluluğu yoktur

  	- Bir paket içerisinde bildirilen bir sınıfın farklı bir paketten kullanılabilmesi için
  	public olarak bildirilmesi gerekir. public olarak bildirilmeyen bir sınıf ancak
  	aynı paketteki diğer sınıflar tarafından kullanılabilir (friendly, internal)

  	- Farklı paketlerdeki sınıflar için byte kodların da uygun yerde olması gerekir. Uygulamanın çalışmaya
  	başlatıldığı dizin tüm paketlerin olması gereken dizindir. Ancak bu durumun istisnaları olabilir

  	- Uygulamada kullanılan sınıflar içerisinde bir tane main metodu olmak zorunda değildir.
  	Ancak şüphesiz java programına verilen byte koda ilişkin sınıfta (bu kesinlike sınıf olmalı)
  	mutlaka uygun main metodunun olması gerekir. main metodunun aşağıdaki yapıya sahip olması gerekir.
  		public static void main(String [] args)
  	java programına verilen main metoduna giriş noktası (entry point) denilmektedir

  	- public olarak bildirilen bir sınıfın kendi ismiyle aynı isimde bir .java uzantılı dosyada olması
  	zorunludur.

  	- Bir .java uzantılı dosyanın içerisinde yalnızca dosya ismi ile aynı olan sınıf public olarak
  	bildirilebilir.

  	- Bir .java dosyası içerisinde public sınıf olmak zorunda değildir. public sınıf olacaksa dosya ismi
  	ile aynı isimde olan sınıf ancak public olabilir.

  	- Bir .java dosyası içerisinde dosya ismi ile aynı isimde sınıf olmak zorunda değildir.

  	- Bir .java dosyası içerisinde public olmayan istenildiği kadar sınıf yazılabilir

  	- Bir paket içerisinde aynı isimde birden fazla sınıf bildirimi yapılamaz. Farklı paketler
  	içerisinde aynı isimde sınıflar olabilir

  	- Bir .java dosyası içerisindeki sınıflar o java dosyasının başında bildirilen paket içerisinde
  	 olurlar.

  	- Bir .java dosyasında farklı paket bildirimleri yapılamaz

  	- Hiç bir paket bildirimi olmayan .java dosyalarında bildirilen sınıflar isimsiz paket
  	 (unnamed package) denilen bir paket içerisinde kabul edilir.
  	 Ancak projelerde isimsiz paket içerisinde sınıf bildirimi yapılmamalıdır.

  	 - Bir sınıfa onun bulunduğu paket dışında başka bir pakette, paket ismi ve nokta operatörü
	ile erişilebilir

  	- Bir paket içerisinde alt paketler olabilir. Alt paketler
  		package <paket ismi>.<alt paket ismi>;

  	  biçiminde bildirilir. Alt paketlerde bulunan sınıfların .class dosyaları (byte code) paket
  	  hiyararşisine uygun alt dizinlerde bulunmalıdır.

  	- Paketler içiçe bile olsa farklı paketlerdir. Yani örneğin org.csystem.util paketi içerisinde
  	ArrayUtil sınıfı varsa org.csystem paketi içerisinde de ArrayUtil sınıfı olabilir.
  	Bu isimler kesinlikle çakışmaz

  	- Paket isimleri genelde firmaya ilişkin tekil bir bilgi olan domain isimleri ile
	belirlenir. Örneğin CSD firmasının paketleri ve sınıfları domain adresi "csystem.org"
	olduğundan "org.csystem" paketi altında yazılabilir.

	- java nın standart tüm paketleri ve sınıfları java isimli bir paket altında toplanmıştır

	- java.lang isimli paket altında bulunan tüm sınıflar her yerden görülebilirdir. Yani
	buradaki isimleri paket ismi ile kombine etmeye gerek yoktur (import deyimi olmadan da kullanılabilir)
----------------------------------------------------------------------------------------------------------------------*/



/*----------------------------------------------------------------------------------------------------------------------
	Complex sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.math;

public class Complex {
	public static Complex plus(double a1, double b1, double a2, double b2) //ileride bu metot gizlenecek
	{
		return new Complex(a1 + a2, b1 + b2);
	}

	public static Complex minus(double a1, double b1, double a2, double b2) //ileride bu metot gizlenecek
	{
		return plus(a1, b1, -a2, -b2);
	}

	public double a, b;

	public Complex() {}

	public Complex(double re)
	{
		a = re;
	}

	public Complex(double re, double im)
	{
		a = re;
		b = im;
	}

	public double getNorm() {return Math.sqrt(a * a + b * b);}

	public Complex getConjugate() {return new Complex(a, -b);}

	//plus methods

	public static Complex plus(double val, Complex z)
	{
		return plus(val, 0, z.a, z.b);
	}

	public Complex plus(Complex z)
	{
		return plus(a, b, z.a, z.b);
	}

	public Complex plus(double val)
	{
		return plus(a, b, val, 0);
	}

	//minus methods

	public static Complex minus(double val, Complex z)
	{
		return minus(val, 0, z.a, z.b);
	}

	public Complex minus(Complex z)
	{
		return minus(a, b, z.a, z.b);
	}

	public Complex minus(double val)
	{
		return minus(a, b, val, 0);
	}

	//inc methods

	public void inc()
	{
		inc(1);
	}

	public void inc(int amount)
	{
		a += amount;
	}

	//dec methods

	public void dec()
	{
		dec(1);
	}

	public void dec(int amount)
	{
		inc(-amount);
	}

	public String toString()
	{
		return String.format("|%.2f + %.2fi|=%f", a, b, getNorm());
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Point sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.math.geometry;

public class Point {
	public int x, y;

	public Point()
	{}

	public Point(int a)
	{
		x = a;
	}

	public Point(int a, int b)
	{
		x = a;
		y = b;
	}

	public double distance()
	{
		return distance(0, 0);
	}

	public double distance(Point p)
	{
		return distance(p.x, p.y);
	}

	public double distance(int a, int b)
	{
		return Math.sqrt((x - a) * (x - a) + (y - b) * (y - b));
	}

	public void offset(int dx, int dy)
	{
		x += dx;
		y += dy;
	}

	public void offset(int dxy)
	{
		offset(dxy, dxy);
	}

	public String toString()
	{
		return String.format("(%d, %d)", x, y);
	}
}



/*----------------------------------------------------------------------------------------------------------------------
	NumberUtil sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.util;

public class NumberUtil {
	public static long factorial(int n)
	{
		if (n < 0)
			return -1;

		long result = 1;

		for (int i = 2; i <= n; ++i)
			result *= i;

		return result;
	}

	public static int getDigitsCount(int val)
	{
		int count = 0;

		do {
			++count;
			val /= 10;
		} while (val != 0);


		return count;
	}

	public static int getDigitsSum(int val)
	{
		int sum = 0;

		while (val != 0) {
			sum += val % 10;
			val /= 10;
		}

		return Math.abs(sum);
	}

	public static int getNextFibonacciNumber(int val)
	{
		if (val < 0)
			return 0;

		int prev1 = 0, prev2 = 1, number = 0;

		for (;;) {
			number = prev1 + prev2;
			if (number > val)
				return number;

			prev1 = prev2;
			prev2 = number;
		}
	}

	public static int getFibonnaciNumber(int n)
	{
		if (n <= 0)
			return -1;

		if (n <= 2)
			return n - 1;

		int prev1 = 0, prev2 = 1, val = 0;

		for (int i = 2; i < n; ++i) {
			val = prev1 + prev2;
			prev1 = prev2;
			prev2 = val;
		}

		return val;
	}

	public static int getPrime(int n)
	{
		if (n <= 0)
			return -1;

		int count = 0, val = 0;

		for (int i = 2; count < n; ++i) {
			if (isPrime(i)) {
				++count;
				val = i;
			}
		}

		return val;
	}

	public static int getReverse(int val)
	{
		int rev = 0;

		while (val != 0) {
			rev = rev * 10 + val % 10;
			val /= 10;
		}

		return rev;
	}

	public static int getSum(int val)
	{
		int n = getDigitsCount(val);

		int sum = 0;

		while (val != 0) {
			sum += pow(val % 10, n);
			val /= 10;
		}

		return sum;
	}

	public static boolean isArmstrong(int val)
	{
		if (val < 0)
			return false;

		return val == getSum(val);
	}

	public static boolean isEven(int val)
	{
		return val % 2 == 0;
	}

	public static boolean isNegative(int val)
	{
		return val < 0;
	}

	public static boolean isOdd(int val)
	{
		return !isEven(val);
	}

	public static boolean isPalindrome(int val)
	{
		return getReverse(val) == val;
	}

	public static boolean isPrime(int val)
	{
		if (val <= 1)
			return false;

		if (val % 2 == 0)
			return val == 2;

		if (val % 3 == 0)
			return val == 3;

		if (val % 5 == 0)
			return val == 5;

		if (val % 7 == 0)
			return val == 7;

		for (int i = 11; i * i <= val; i += 2)
			if (val % i == 0)
				return false;

		return true;
	}

	public static boolean isPositive(int val)
	{
		return val > 0;
	}

	public static int pow(int a, int b)
	{
		b = Math.abs(b);
		int result = 1;

		while (b-- > 0)
			result *= a;

		return result;
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Bir isim bildirim noktasında aranmaz
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
	public static void main(String [] args)
	{
		int a; // aranmaz

		Sample s; //Sample aranır

		s = new Sample(); //s aranır, Sample aranır


	}
}

class Sample { //Sample aranmaz

}



/*----------------------------------------------------------------------------------------------------------------------
	Bir isim doğrudan kullanılmışsa veya nokta operatörünün solunda kalıyorsa niteliksiz (unqualified)
	olarak aranır

	Bir isim nokta operatörünün sağında kalıyorsa nitelikli (qualified) aranır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
	public static void main(String [] args)
	{
		Sample s = new Sample(); //Sample niteliksiz

		s.foo(); //s niteliksiz, foo nitelikli aranır

		Sample.bar(); //Sample niteliksiz aranır, bar nitelikli aranır
	}
}

class Sample {
	public void foo()
	{

	}

	public static void bar()
	{

	}
}



/*----------------------------------------------------------------------------------------------------------------------
	Niteliksiz isim arama kuralları: (else if biçiminde değerlendiriniz)
	Not: Bu kuralın da ayrıntıları vardır. Aşağıda anlatılanlar genel kurallardır
	1. Bir metot içerisinde kullanılan bir isim kullanıldığı yerden yukarıya doğru
	metot içerisinde ve metodun parametre parantezinde aranır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
	public static void main(String [] args)
	{
		int a;
		a = 1;
	}
}

class Sample {
	public void foo(int a)
	{
		++a;
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Niteliksiz isim arama kuralları: (else if biçiminde değerlendiriniz)
	2. İsim metodun ait olduğu sınıfın içerisinde tüm metotların dışında her yerde aranır. Bu durumda
	bulunamazsa taban sınıflarına da (super class) sırasıyla bakılır. Taban sınıf konusu ileride ele
	alınacaktır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
	public static void main(String [] args)
	{

	}
}

class Sample {
	public void foo(int a)
	{
		++x;
	}
	public int x;
}

/*----------------------------------------------------------------------------------------------------------------------
	Yukarıdaki kurallara göre aşağıdaki kod geçerlidir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
	public static void main(String [] args)
	{
		Sample s = new Sample();

		s.foo(34);
		System.out.printf("s.a=%d%n", s.a);


	}
}

class Sample {
	public void foo(int a)
	{
		++a;
		System.out.printf("a=%d%n", a);
	}
	public int a;
}


/*----------------------------------------------------------------------------------------------------------------------
	Niteliksiz isim arama kuralları: (else if biçiminde değerlendiriniz)
	3. İsim sınıfın ait olduğu paket içerisinde aranır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
	public static void main(String [] args)
	{
		Sample s;
	}
}

class Sample {

}

/*----------------------------------------------------------------------------------------------------------------------
	Niteliksiz isim arama kuralları: (else if biçiminde değerlendiriniz)
	3. İsim sınıfın ait olduğu paket içerisinde aranır. Kapsayan veya kapsanan paketlere
	bakılmaz
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
	public static void main(String [] args)
	{
		Sample s; //error
	}
}

package org.csystem;

public class Sample {

}
package org.csystem.app.mest;

public class Sample {

}


/*----------------------------------------------------------------------------------------------------------------------
	Nitelikli isim arama kuralları: (else if biçiminde değerlendiriniz)
	1. Aranan ismin solunda sınıf ismi varsa isim sınıf içerisinde aranır. Bulunamazsa taban
	sınıflara da bakılır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
	public static void main(String [] args)
	{
		Sample.x = 10;
		Sample.foo();
	}
}

class Sample {
	public static int x;

	public static void foo()
	{

	}
}



/*----------------------------------------------------------------------------------------------------------------------
	Nitelikli isim arama kuralları: (else if biçiminde değerlendiriniz)
	2. Aranan ismin solunda referans varsa referansa ilişkin sınıf içerisinde aranır. Bulunamazsa
	taban sınıflara da bakılır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
	public static void main(String [] args)
	{
		Sample s = new Sample();

		s.x = 10;
		s.foo();
	}
}

class Sample {
	public int x;

	public void foo()
	{

	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Nitelikli isim arama kuralları: (else if biçiminde değerlendiriniz)
	3. Aranan ismin solunda paket ismi varsa isim o paket içerisinde aranır. Bulunamazsa
	error oluşur. Üst veya alt paketlere bakılmaz
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
	public static void main(String [] args)
	{
		org.csystem.app.Sample s;
	}
}

class Sample {

}


/*----------------------------------------------------------------------------------------------------------------------
	Aşağıdaki örnekte test paketi isimsiz paketin altındaki olarak düşünüldüğünden error oluşur.
	Yani test ismi için app paketinde paket isimlerine niteliksiz aramada bakılmaz bakılmaz
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
	public static void main(String [] args)
	{
		test.Sample s; //error
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	 import deyimleri:
	 1. import single-type declaration (yıldızsız import direktifi)
	 2. import on demand declaration (yıldızlı import direktifi)

	 import deyimleri niteliksiz isim aramada etkilidir. Nitelikli aramada bir etkisi olmaz.
	 import deyimlerinin paket bildirimi ile diğer bildirimler arasında olması gerekir.
	 import deyimlerinin sırasının önemi yoktur
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
	01.02.2020
	Yıldızlı import deyiminin genel biçimi:

	import <paket ismi>.*;

  	Bu deyim import ile belirtilen paketi isim aramaya dahil eder.
  	Yani eğer niteliksiz aranacak bir isim paket içerisinde de bulunamazsa
  	yıldızlı import deyimleri ile belirtilen paketler içerisinde de aranır.
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.math.geometry.*;
import java.util.*;

class App {
	public static void main(String [] args)
	{
		Point p;
		Scanner kb = new Scanner(System.in);
		Random r = new Random();

		//...
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Aşağıdaki örnek error oluşturur. Çünkü kapsanan paketlere bakılmaz
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.math.*;
import java.util.*;

class App {
	public static void main(String [] args)
	{
		Point p; //error
		Scanner kb = new Scanner(System.in);
		Random r = new Random();

		//...
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Aşağıdaki örnek error oluşturur
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.math.geometry.*;
import java.util.*;

class App {
	public static void main(String [] args)
	{
		Complex z; //error


	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Aşağıdaki örnek geçerlidir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.math.geometry.*;
import org.csystem.math.*;
import java.util.*;

class App {
	public static void main(String [] args)
	{
		Complex z;
		Point p;
		Random r;

		//...


	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Niteliksiz bir isim için ilgili pakette de bulunamzsa tüm yıldızlı import deyimine
	ilişkin paketlere bakılır. Birden fazla pakette isim bulunursa error oluşur
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import test.*;
import mest.*;


class App {
	public static void main(String [] args)
	{
		Test t;
		Mample m;
		Sample s; //error: ambiguity

	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Yukarıdaki problem aşağıdaki gibi çözülebilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import test.*;
import mest.*;


class App {
	public static void main(String [] args)
	{
		Test t;
		Mample m;
		test.Sample ts;
		mest.Sample ms;

	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Yıldızsız import deyiminin genel biçimi:
	import [paket ismi].<sınıf ismi>;

	Bu deyim aslında bir ilgili java dosyasında hangi ismin niteliksiz kullanılabileceğini belirtir.
	Nitelisiz isim arama kurallarında isim ilgili sınıf içerisinde bulunamazsa bu deyimdeki kullanılır.
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
	Yıldızsız import deyimi
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.NumberUtil;

class App {
	public static void main(String [] args)
	{
		System.out.println(NumberUtil.factorial(10));
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Aşağıda NumberUtil ismi yerel değişken olarak bulunur
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.NumberUtil;

class App {
	public static void main(String [] args)
	{
		int NumberUtil = 10;


		System.out.println(NumberUtil.factorial(10)); //error
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Aşağıda NumberUtil ismi sınıf veri elemanı olarak bulunur
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.NumberUtil;

class App {
	public static int NumberUtil;

	public static void main(String [] args)
	{
		System.out.println(NumberUtil.factorial(10)); //error
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Aşağıdaki örnekte ilgili java dosyasında NumberUtil sınıfı bildirildiğinden import
	deyiminde error oluşur
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.NumberUtil; //error

class App {
	public static void main(String [] args)
	{

	}
}

class NumberUtil {
    public static long factorial(int val)
    {
        //..
        return 1;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	Aşağıdaki örnekte org.csystem.util paketi altındaki NumberUtil sınıfı bulunur. Çünkü
	org.csystem.app paketindeki NumberUtil sınıfı farklı bir java dosyasındadır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.NumberUtil;

class App {
	public static void main(String [] args)
	{
		System.out.println(NumberUtil.factorial(10));
	}
}

package org.csystem.app;

public class NumberUtil {
    public static long factorial(int val)
    {
        //..
        return 1;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	Aşağıdaki örnekte org.csystem.app paketindeki NumberUtil bulunur
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.*;

class App {
	public static void main(String [] args)
	{
		System.out.println(NumberUtil.factorial(10));	//1
	}
}

class NumberUtil {
    public static long factorial(int val)
    {
        //..
        return 1;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	Aşağıdaki örnekte org.csystem.app paketindeki NumberUtil bulunur
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.*;

class App {
	public static void main(String [] args)
	{
		System.out.println(NumberUtil.factorial(10));	//1
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	NumberUtil sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

public class NumberUtil {
    public static long factorial(int val)
    {
        //...

        return 1;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	import static deyimleri: (Java 5 ile eklenmiştir)
	1. import static single type declaration statement (yıldızsız import static)
	2. import static on demand statement (yıldızlı import static)

	Bu deyimler bir sınıfın static elemanlarının başka bir paket içerisinde (yani sınıf içerisinde)
	doğrudan kullanımını sağlar

	Yıldızlı import static deyiminin genel biçimi:
	import static [paket ismi].<sınıf ismi>.*;

	Yıldızsız import static deyiminin genel biçimi:
	import static [paket ismi].<sınıf ismi>.<static eleman ismi>;
----------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------
	Yıldızlı import static deyimi
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import static org.csystem.util.NumberUtil.*;

class App {
	public static void main(String [] args)
	{
		System.out.println(factorial(10));
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Yıldızsız import static deyimi
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import static org.csystem.util.NumberUtil.factorial;

class App {
	public static void main(String [] args)
	{
		System.out.println(factorial(10));
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Point sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.math.geometry;

import static java.lang.Math.sqrt;

public class Point {
	public int x, y;

	public Point()
	{}

	public Point(int a)
	{
		x = a;
	}

	public Point(int a, int b)
	{
		x = a;
		y = b;
	}

	public double distance()
	{
		return distance(0, 0);
	}

	public double distance(Point p)
	{
		return distance(p.x, p.y);
	}

	public double distance(int a, int b)
	{
		return sqrt((x - a) * (x - a) + (y - b) * (y - b));
	}

	public void offset(int dx, int dy)
	{
		x += dx;
		y += dy;
	}

	public void offset(int dxy)
	{
		offset(dxy, dxy);
	}

	public String toString()
	{
		return String.format("(%d, %d)", x, y);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Complex sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.math;

import static java.lang.Math.sqrt;

public class Complex {
	public static Complex plus(double a1, double b1, double a2, double b2) //ileride bu metot gizlenecek
	{
		return new Complex(a1 + a2, b1 + b2);
	}

	public static Complex minus(double a1, double b1, double a2, double b2) //ileride bu metot gizlenecek
	{
		return plus(a1, b1, -a2, -b2);
	}

	public double a, b;

	public Complex() {}

	public Complex(double re)
	{
		a = re;
	}

	public Complex(double re, double im)
	{
		a = re;
		b = im;
	}

	public double getNorm() {return sqrt(a * a + b * b);}

	public Complex getConjugate() {return new Complex(a, -b);}

	//plus methods

	public static Complex plus(double val, Complex z)
	{
		return plus(val, 0, z.a, z.b);
	}

	public Complex plus(Complex z)
	{
		return plus(a, b, z.a, z.b);
	}

	public Complex plus(double val)
	{
		return plus(a, b, val, 0);
	}

	//minus methods

	public static Complex minus(double val, Complex z)
	{
		return minus(val, 0, z.a, z.b);
	}

	public Complex minus(Complex z)
	{
		return minus(a, b, z.a, z.b);
	}

	public Complex minus(double val)
	{
		return minus(a, b, val, 0);
	}

	//inc methods

	public void inc()
	{
		inc(1);
	}

	public void inc(int amount)
	{
		a += amount;
	}

	//dec methods

	public void dec()
	{
		dec(1);
	}

	public void dec(int amount)
	{
		inc(-amount);
	}

	public String toString()
	{
		return String.format("|%.2f + %.2fi|=%f", a, b, getNorm());
	}
}

/*----------------------------------------------------------------------------------------------------------------------
    02.02.2020
    Diziler (arrays):
    Bellekte peşpeşe gelen aynı türden elemanlardan oluşan veri yapısına denir. Diziler Java'da
    sınıfsal temsil edilir. Yani diziler referans türleridir. Yani bir dizi aslında heap' de
    yaratılır.

    Dizi referansı bildirimi T bir tür olmak üzere:
    T [] <isim>;
    T <isim> [];

    biçimindedir.
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        int [] a; // Dizi referansı
        int b[]; // Dizi referansı

        //...

    }
}
/*----------------------------------------------------------------------------------------------------------------------
    [] lerin referans bildiriminde koyulduğu yerlere göre farkı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        int [] a, b, c;
        int d[], e, f;

        e = 10;

        b = 23; //error

        //...

    }
}
/*----------------------------------------------------------------------------------------------------------------------
    Dizi yaratmak için new operatörü kullanılabilir. T türden bir dizi:

    new T[<eleman sayısı>];

    biçiminde yaratılabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        int [] a;

        a = new int[10];


    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Dizi uzunluğu int türden negatif olmayan bir değer olmalıdır. Sabit ifadesi olmak zorunda değildir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Scanner;

class App {
    public static void main(String [] args)
    {
        int [] a;

        Scanner kb = new Scanner(System.in);
        System.out.print("n değerini giriniz:");
        int n = Integer.parseInt(kb.nextLine());

        a = new int[n];

        //...
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Pozitif ya da negatif bakımdan sınırlar dışında indeks numrası için exception oluşur
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Scanner;

class App {
    public static void main(String [] args)
    {
        int [] a;

        Scanner kb = new Scanner(System.in);
        System.out.print("n değerini giriniz:");
        int n = Integer.parseInt(kb.nextLine());

        a = new int[n];

        for (int i = 0; i < n; ++i)
            a[i] = i * 10;

        System.out.println(a[10]);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Dizilerin length isimli veri elemanı ile dizinin uzunluğu elde edilebilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Scanner;

class App {
    public static void main(String [] args)
    {
        int [] a;

        Scanner kb = new Scanner(System.in);
        System.out.print("n değerini giriniz:");
        int n = Integer.parseInt(kb.nextLine());

        a = new int[n];

        System.out.printf("Length:%d%n", a.length);
    }
}
/*----------------------------------------------------------------------------------------------------------------------
    Dizi uzunlukları değiştirilemediğinden length veri elemanına atama yapılamaz
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Scanner;

class App {
    public static void main(String [] args)
    {
        int [] a;

        Scanner kb = new Scanner(System.in);
        System.out.print("n değerini giriniz:");
        int n = Integer.parseInt(kb.nextLine());

        a = new int[n];

        a.length = 23; //error
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Bir referans değişik zamanlarda başka dizileri gösterebilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Scanner;

class App {
    public static void main(String [] args)
    {
        int [] a;

        Scanner kb = new Scanner(System.in);
        System.out.print("n değerini giriniz:");
        int n = Integer.parseInt(kb.nextLine());

        a = new int[n];

        System.out.printf("Length:%d%n", a.length);

        a = new int[n * 2];

        System.out.printf("Length:%d%n", a.length);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki örnekte hem diziye hem de referansa ilkdeğer verilmektedir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        int [] a = new int[] {1, 2, 3, 4, 5};

        for (int i = 0; i < a.length; ++i)
            System.out.printf("%d ", a[i]);

        System.out.println();
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki örnekte yalnızca  diziye ilkdeğer verilmektedir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        int [] a;

        a = new int[] {1, 2, 3, 4, 5};

        for (int i = 0; i < a.length; ++i)
            System.out.printf("%d ", a[i]);

        System.out.println();
    }
}
/*----------------------------------------------------------------------------------------------------------------------
    Bir diziye ilk değer verilirken aynı zamanda referansa da ilk değer veriliyorsa new operatörü kullanılmayabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        int [] a = {1, 2, 3, 4, 5};

        for (int i = 0; i < a.length; ++i)
            System.out.printf("%d ", a[i]);

        System.out.println();
    }
}
/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki örnekte referansa ilkdeğer verilmediği için diziye ilk değer verirken new operatörü kullanılmalıdır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        int [] a;
        a = {1, 2, 3, 4, 5}; //error

        for (int i = 0; i < a.length; ++i)
            System.out.printf("%d ", a[i]);

        System.out.println();
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Dizilere ilk değer verilmesi durumunda sabit ifadesi olma zorunluluğu yoktur
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        int x = 10;
        int [] a = {x, x + 1, x + 2};

        for (int i = 0; i < a.length; ++i)
            System.out.printf("%d ", a[i]);

        System.out.println();
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    İlk değer vermede son elemandan sonra bir tane virgül konması error oluşturmaz
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        int [] a = {1, 2, 3, 4, 5, };

        for (int i = 0; i < a.length; ++i)
            System.out.printf("%d ", a[i]);

        System.out.println();
    }    new

}

/*----------------------------------------------------------------------------------------------------------------------
    Bir dizi yaratıldığında tüm elemanlara default değerlar atanır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        int [] a = new int[10];

        for (int i = 0; i < a.length; ++i)
            System.out.printf("%d ", a[i]);

        System.out.println();
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Dizi referansı parmatreli metotlar ile bir dizi mantıksal olarak bir metoda geçirilebilir. Metot
    içerisinde dizi elemanları üzerinde işlem yapılabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;

class App {
    public static void main(String [] args)
    {
        int [] a = {1, 2, 3, 4, 5};

        ArrayUtil.display(a);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Bir metodun geri dönüş değerinin bir dizi referansı olması durumu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import static org.csystem.util.ArrayUtil.*;

class App {
    public static void main(String [] args)
    {
        int [] a = getRandomArray(20, 1, 100);

        display(a);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Bir metodun geri dönüş değerinin bir dizi referansı olması durumu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Random;
import java.util.Scanner;

import static org.csystem.util.ArrayUtil.*;

class App {
    public static void main(String [] args)
    {
        Scanner kb = new Scanner(System.in);
        System.out.print("Tohum değerini giriniz:");
        long seed = Long.parseLong(kb.nextLine());

        Random r = new Random(seed);

        int [] a = getRandomArray(r, 10, 1, 100);

        display(a);
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    sum metodu ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import static org.csystem.util.ArrayUtil.*;

class App {
    public static void main(String [] args)
    {
        int [] a = getRandomArray(10, 0, 101);
        display(a);
        System.out.printf("Dizinin elemanları toplamı:%d%n", sum(a));
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Sınıf Çalışması: Parametresi ile aldığı int türden bir dizinin en büyük elemanını döndüren max ve
    en küçük elemanını döndüren min metotlarını yazınız
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import static org.csystem.util.ArrayUtil.*;

class App {
    public static void main(String [] args)
    {
        int [] a = getRandomArray(10, 0, 101);

        display(a);
        System.out.printf("Dizinin en küçük elemanı:%d%n", min(a));
        System.out.printf("Dizinin en büyük elemanı:%d%n", max(a));
    }
}
/*----------------------------------------------------------------------------------------------------------------------
    Sınıf Çalışması: Parametresi ile aldığı bir diziyi başka bir dizi kullanmadan ters-yüz eden
    reverse isimli metodu yazınız
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import static org.csystem.util.ArrayUtil.*;

class App {
    public static void main(String [] args)
    {
        int [] a = getRandomArray(10, 0, 101);

        display(a);
        reverse(a);
        display(a);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    08.02.2020
    Sınıf Çalışması: Parametresi ile aldığı bir diziyi başka bir dizi kullanmadan ters-yüz eden
    reverse isimli metodu yazınız
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;


import org.csystem.util.ArrayUtil;

class App {
    public static void main(String [] args)
    {
        int [] a = ArrayUtil.getRandomArray(10, 0, 101);

        ArrayUtil.display(a);

        ArrayUtil.display(Util.reverse(a));
    }
}


class Util {
    public static int [] reverse(int [] a)
    {
        int first = 0;
        int last = a.length - 1;

        while (first < last) {
            int temp = a[first];

            a[first++] = a[last];

            a[last--] = temp;
        }


        return a;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Sınıf Çalışması: Rakamları birbirinden farklı 4 basamaklı bir sayı üreten programı yazınız
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.NumberUtil;

import java.util.Random;

class App {
    public static void main(String [] args)
    {
        Random r = new Random();

        for (int i = 0; i < 10; ++i)
            System.out.println(NumberUtil.getRandom4DigitsNumber(r));
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Sınıf Çalışması: Parametresi ile aldığı int türden bir sayının rakamlarından oluşan diziyi döndüren
    getDigits isimli metodu yazınız. Metot negatif sayılar için pozitif değeri için basamaklarını döndürecektir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;

import java.util.Scanner;

class App {
    public static void main(String [] args)
    {
        Scanner kb = new Scanner(System.in);

        for (;;) {
            int val = Integer.parseInt(kb.nextLine());
            ArrayUtil.display(Util.getDigits(val));

            if (val == 0)
                break;
        }
    }
}

class Util {
    public static int [] getDigits(int val)
    {
        int len = getDigitsCount(val);
        int [] a = new int[len];

        val = Math.abs(val);
        for (int i = len - 1; i >= 0; --i) {
            a[i] = val % 10;
            val /= 10;
        }

        return a;
    }

    public static int getDigitsCount(int val)
    {
        int count = 0;

        do {
            ++count;
            val /= 10;
        } while (val != 0);


        return count;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	Bir sayının basamak sayısının log10 kullanarak bulunması (Dikkat metrobüste çıkabilir)
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Scanner;

class App {
    public static void main(String [] args)
    {
        Scanner kb = new Scanner(System.in);
        System.out.print("Bir sayı giriniz:");
        int val = Integer.parseInt(kb.nextLine());

        int n = val == 0 ? 1 : (int)Math.log10(Math.abs(val)) + 1;

        System.out.println(n);

    }
}


/*----------------------------------------------------------------------------------------------------------------------
	Bir sayı 3 erli basamaklara ayrıldığında dizinin eleman sayının basit olarak bulunması
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Scanner;

class App {
    public static void main(String [] args)
    {
        Scanner kb = new Scanner(System.in);
        System.out.print("Bir sayı giriniz:");
        int val = Integer.parseInt(kb.nextLine());

        int n = val == 0 ? 1 : (int)Math.log10(Math.abs(val)) / 3 + 1;

        System.out.println(n);
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Sınıf Çalışması: Parametresi ile aldığı int türden bir sayının rakamlarından oluşan diziyi döndüren
    getDigits isimli metodu yazınız. Metot negatif sayılar için pozitif değeri için basamaklarını döndürecektir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;
import org.csystem.util.NumberUtil;

import java.util.Scanner;

class App {
    public static void main(String [] args)
    {
        Scanner kb = new Scanner(System.in);

        for (;;) {
            int val = Integer.parseInt(kb.nextLine());
            ArrayUtil.display(NumberUtil.getDigits(val));

            if (val == 0)
                break;
        }
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: İstenilen sayıda sayısal loto kuponu üreten programı yazınız
	Aşağıda program kötü tasarlanmıştır. Ayrıca Arrays sınıfının sort isimli metodu ile
	sıralama işlemi yapılmıştır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.samples.lottaryapp.Lottary;
import org.csystem.util.ArrayUtil;

import java.util.Scanner;

class App {
    public static void main(String [] args)
    {
        Scanner kb = new Scanner(System.in);
        System.out.print("Kaç kupon oynamak istiyorsun?");
        int n = Integer.parseInt(kb.nextLine());

        Lottary lottary = new Lottary();

        while (n-- > 0)
            ArrayUtil.display(lottary.getNumbers(), 2);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Lottary sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.samples.lottaryapp;

import java.util.Arrays;
import java.util.Random;

public class Lottary {
    public Random rand;

    public Lottary()
    {
        rand = new Random();
    }

    public int [] getNumbers()
    {
        int [] numbers = new int[6];
        boolean repeat;

        for (int i = 0; i < 6; ++i) {
            do {
                repeat = false;
                numbers[i] = rand.nextInt(49) + 1;
                for (int k = 0; k < i; ++k)
                    if (numbers[i] == numbers[k]) {
                        repeat = true;
                        break;
                    }
            } while (repeat);
        }

        Arrays.sort(numbers);

        return numbers;
    }
}


/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: İstenilen sayıda sayısal loto kuponu üreten programı yazınız
	(Göreceli daha hızlı versiyon)
	İleride daha da iyisi yazılacak
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.samples.lottaryapp.Lottary;
import org.csystem.util.ArrayUtil;

import java.util.Scanner;

class App {
    public static void main(String [] args)
    {
        Scanner kb = new Scanner(System.in);
        System.out.print("Kaç kupon oynamak istiyorsun?");
        int n = Integer.parseInt(kb.nextLine());

        Lottary lottary = new Lottary();

        while (n-- > 0)
            ArrayUtil.display(lottary.getNumbers(), 2);
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Lottary sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.samples.lottaryapp;

import java.util.Arrays;
import java.util.Random;

public class Lottary {
    public Random rand;

    public Lottary()
    {
        rand = new Random();
    }

    public int [] getNumbers()
    {
        int [] numbers = new int[6];
        boolean [] flags = new boolean[50];
        int val;

        for (int i = 0; i < 6; ++i) {
            for (;;) {
                val = rand.nextInt(49) + 1;
                if (!flags[val])
                    break;
            }
            flags[val] = true;
        }

        int index = 0;

        for (int i = 1; i < 50; ++i)
            if (flags[i])
                numbers[index++] = i;

        return numbers;
    }
}


/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı bir dizi içerisinde yine parametresi ile aldığı n sayısı için
	[0, n] aralığındaki sayıların hangisinden kaç tane olduğu bilgisini döndüren getHistogramData
	isimli metodu yazınız ve test ediniz
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;

class App {
    public static void main(String [] args)
    {
        int [] a = ArrayUtil.getRandomArray(30000, 0, 11);

        ArrayUtil.display(a);
        ArrayUtil.display(ArrayUtil.getHistogramData(a, 10));
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	09.02.2020
	drawHistogram metodu ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;

class App {
    public static void main(String [] args)
    {
        int [] a = ArrayUtil.getRandomArray(3000000, 0, 11);

        //ArrayUtil.display(a);

        System.out.println("*******************");
        ArrayUtil.drawHistogram(ArrayUtil.getHistogramData(a, 10), 30, 'X');
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    char türden diziler
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        char  [] c = {'a', 'l', 'i'};

        for (int i = 0; i < c.length; ++i)
            c[i] = Character.toUpperCase(c[i]);

        for (int i = 0; i < c.length; ++i)
            System.out.print(c[i]);

        System.out.println();
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    char türden diziden String elde edilmesi
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        char [] c = {'a', 'l', 'i'};

        String str = new String(c);

        System.out.println(str);
    }
}
/*----------------------------------------------------------------------------------------------------------------------
    String sınıfının toCharArray metodu ile String nesnesine ilişkin karakterler bir char dizisi olarak elde edilebilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        String s = "ankara";
        char [] c = s.toCharArray();

        for (int i = 0; i < c.length; ++i)
            System.out.println(c[i]);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    toCharArray metodu ile verilen dizi içsel olarak tutulan dizi değildir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        String s = "ankara";
        char [] c = s.toCharArray();

        c[0] = 'A';

        System.out.println(s);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    StringUtil sınıfının reverse metodu. Daha hızlı hale getirildi
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.StringUtil;

class App {
    public static void main(String [] args)
    {
        String s = "ankara";
        System.out.println(StringUtil.reverse(s));
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki örnekte dizi tahsis edilmiş ancak dizinin elemanı olan her bir referansın içerisinde uygun nesnenin
    adresi atanmamıştır. Exception oluşur
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        Sample [] s = new Sample[10];

        for (int i = 0; i < 10; ++i)
            s[i].x = i * 10;

        for (int i = 0; i < 10; ++i)
            System.out.println(s[i].x);
    }
}


class Sample {
    public int x;

    public Sample(int a)
    {
        x = a;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Yukarıdaki problem aşağıdaki gibi çözülebilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        Sample [] s = new Sample[10];

        for (int i = 0; i < 10; ++i)
            s[i] = new Sample(i * 10);

        for (int i = 0; i < 10; ++i)
            System.out.println(s[i].x);
    }
}


class Sample {
    public int x;

    public Sample(int a)
    {
        x = a;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Yukarıdaki problem aşağıdaki gibi çözülebilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        Sample [] s = new Sample[10];

        for (int i = 0; i < 10; ++i)
            s[i] = new Sample(i * 10);

        for (int i = 0; i < 10; ++i)
            System.out.println(s[i].x);
    }
}


class Sample {
    public int x;

    public Sample(int a)
    {
        x = a;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Yukarıdaki problem aşağıdaki gibi de çözülebilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        Sample [] s = new Sample[10];
        Sample k = new Sample(67);

        for (int i = 0; i < 9; ++i)
            s[i] = new Sample(i * 10);

        s[9] = k;

        for (int i = 0; i < 10; ++i)
            System.out.println(s[i].x);
    }
}


class Sample {
    public int x;

    public Sample(int a)
    {
        x = a;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Referans dizilerine ilk değer verilmesi
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        Sample k = new Sample(67);
        Sample [] s = {new Sample(10), k, new Sample(100)};


        for (int i = 0; i < s.length; ++i)
            System.out.println(s[i].x);
    }
}


class Sample {
    public int x;

    public Sample(int a)
    {
        x = a;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    String türden referans dizilerine aşağıdaki gibi ilk değer verilebilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        String [] cities = {"ankara", "istanbul", "izmir"};

        for (int i = 0; i < cities.length; ++i)
            System.out.println(cities[i]);

    }
}


/*----------------------------------------------------------------------------------------------------------------------
    DateUtil sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.samples.date.DateUtil;

import java.util.Scanner;

class App {
    public static void main(String [] args)
    {
        Scanner kb = new Scanner(System.in);

        for (;;) {
            System.out.print("Gün?");
            int day = Integer.parseInt(kb.nextLine());

            if (day == 0)
                break;

            System.out.print("Ay?");
            int mon = Integer.parseInt(kb.nextLine());

            System.out.print("Yıl?");
            int year = Integer.parseInt(kb.nextLine());

            DateUtil.displayDateTR(day, mon, year);
            DateUtil.displayDateEN(day, mon, year);
        }
    }
}


package org.csystem.samples.date;

public class DateUtil {
	public static int [] daysOfMonths = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
	public static String [] weekDaysTR = {"Pazar", "Pazartesi", "Salı", "Çarşamba", "Perşembe", "Cuma", "Cumartesi"};
	public static String [] weekDaysEN = {"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"};

	public static void displayDateTR(int day, int mon, int year)
	{
		int dayOfWeek = getDayOfWeek(day, mon, year);

		if (dayOfWeek == -1) {
			System.out.println("Geçersiz tarih");
			return;
		}

		System.out.printf("%02d/%02d/%04d %s%n", day, mon, year, weekDaysTR[dayOfWeek]);

		if (isWeekend(day, mon, year))
			System.out.println("Bugün kurs günü. Tekrar yaptın mı?");
		else
			System.out.println("Hafta içi takrar yapınız!!!");

	}

	public static void displayDateEN(int day, int mon, int year)
	{
		int dayOfWeek = getDayOfWeek(day, mon, year);

		if (dayOfWeek == -1) {
			System.out.println("Invalid date");
			return;
		}

		System.out.printf("%02d/%02d/%04d %s%n", day, mon, year, weekDaysEN[dayOfWeek]);

	}

	public static boolean isWeekend(int day, int mon, int year)
	{
		int dayOfWeek = getDayOfWeek(day, mon, year);

		return dayOfWeek == 0 || dayOfWeek == 6;
	}

	public static boolean isWeekday(int day, int mon, int year)
	{
		if (!isValidDate(day, mon, year))
			return false;

		return !isWeekend(day, mon, year);
	}

	public static int getDayOfWeek(int day, int mon, int year)
	{
		int totalDays = getDayOfYear(day, mon, year);

		if (totalDays == -1 || year < 1900)
			return -1;

		for (int y = 1900; y < year; ++y)
			totalDays += isLeapYear(y) ? 366 : 365;

		return totalDays % 7;
	}

	public static int getDayOfYear(int day, int mon, int year)
	{
		if (!isValidDate(day, mon, year))
			return -1;

		int dayOfYear = day;

		for (int m = mon - 1; m >= 1; --m)
			dayOfYear += daysOfMonths[m];

		if (mon > 2 && isLeapYear(year))
			++dayOfYear;

		return dayOfYear;
	}

	public static boolean isValidDate(int day, int mon, int year)
	{
		if (day < 1 || day > 31 || mon < 1 || mon > 12)
			return false;

		int days = isLeapYear(year) && mon == 2 ? 29 : daysOfMonths[mon];

		return day <= days;
	}

	public static boolean isLeapYear(int year)
	{
		return year % 4 == 0 && year % 100 != 0 || year % 400 == 0;
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Klavyeden bir n değeri isteyiniz. n değeri kadar yazıyı bir String dizisi içerisinde saklayınız.
	Bu işlemden sonra dizi içerisindeki yazıları aralarında virgül olacak şekilde birleştirip bir String elde
	eden programı yazınız
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;

import java.util.Scanner;

class App {
    public static void main(String [] args)
    {
        Scanner kb = new Scanner(System.in);

        System.out.print("n değerini giriniz:");
        int n = Integer.parseInt(kb.nextLine());
        String [] s = new String[n];

        for (int i = 0; i < n; ++i) {
            System.out.print("Bir yazı giriniz:");
            s[i] = kb.nextLine();
        }

        String str = ArrayUtil.join(s, ',');

        System.out.println(str);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı en fazla 3 basamaklı bir sayının okunuşunu döndüren
	NumToTextMax3Digits metodunu yazınız ve test ediniz
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.NumberUtil;

import java.util.Scanner;

class App {
    public static void main(String [] args)
    {
        Scanner kb = new Scanner(System.in);

        for (;;) {
            System.out.print("Üç basamaklı bir sayı giriniz:");
            int val = Integer.parseInt(kb.nextLine());

            System.out.printf("%d:%s%n", val, NumberUtil.numToTextMax3DigitsTR(val));

            if (val == 0)
                break;
        }
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıf Çalışması: Parametresi ile aldığı en fazla 3 basamaklı bir sayının okunuşunu döndüren
	NumToTextMax3Digits metodunu yazınız ve test ediniz
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.NumberUtil;

import java.util.Scanner;

class App {
    public static void main(String [] args)
    {
        Scanner kb = new Scanner(System.in);

        for (;;) {
            System.out.print("Üç basamaklı bir sayı giriniz:");
            int val = Integer.parseInt(kb.nextLine());

            System.out.printf("%d:%s%n", val, NumberUtil.numToTextMax3DigitsTR(val));

            if (val == 0)
                break;
        }
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    15.02.2020
    String sınıfının split metodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        String s = "Bugün hava çok güzel";

        String [] words = s.split(" ");

        for (int i = 0; i < words.length; ++i)
            System.out.println(words[i]);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    String sınıfının split metodu ile birden fazla ayraç [] içerisinde verilmelidir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        String s = "Bugün,hava.çok,güzel";

        String [] words = s.split("[.,]");

        for (int i = 0; i < words.length; ++i)
            System.out.println(words[i]);
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    String sınıfının split metodu örneğin nokta gibi özel karakterler [] içerisinde gerçek anlamında
    kullanılabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        String s = "Bugün.hava.çok.güzel";

        String [] words = s.split("[.]");

        for (int i = 0; i < words.length; ++i)
            System.out.println(words[i]);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    String sınıfının split metodu örneğin nokta gibi özel karakterler [] içerisinde gerçek anlamında
    kullanılabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        String s = "Bugün hava çok güzel. Bu güzel hava Java, tekrar mı edilir!!";

        String [] words = s.split("[. ,]");

        for (int i = 0; i < words.length; ++i)
            System.out.println(words[i]);
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    String sınıfının split metodunda ayraçların yanyana gelmesi durumunda aralarındaki boş string'in
    diziye eklenmesi istenmiyorsa aşağıdaki gibi yapılmalıdır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        String s = "Bugün hava çok güzel. Bu güzel hava Java,,,,,,,, tekrar mı edilir!!";

        String [] words = s.split("[. ,]+");

        for (int i = 0; i < words.length; ++i)
            System.out.println(words[i]);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    String sınıfının split metodunda [] karakterlerinin ayraç olarak kullanımı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        String s = "Bugün[hava çok] güzel";

        String [] words = s.split("[ \\[\\]]+");

        for (int i = 0; i < words.length; ++i)
            System.out.println(words[i]);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Matris kullanımı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        int [][] a = new int[3][];

        for (int i = 0; i < a.length; ++i)
            a[i] = new int[4];

        for (int i = 0; i < a.length; ++i)
            for (int j = 0; j < a[i].length; ++j)
                a[i][j] = i + j;

        for (int i = 0; i < a.length; ++i) {
            for (int j = 0; j < a[i].length; ++j)
                System.out.printf("%02d ", a[i][j]);
            System.out.println();
        }
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Bir matris aşağıdaki gibi kolay bir biçimde yaratılabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        int [][] a = new int[3][4];

        for (int i = 0; i < a.length; ++i)
            for (int j = 0; j < a[i].length; ++j)
                a[i][j] = i + j;

        for (int i = 0; i < a.length; ++i) {
            for (int j = 0; j < a[i].length; ++j)
                System.out.printf("%02d ", a[i][j]);
            System.out.println();
        }
    }
}
/*----------------------------------------------------------------------------------------------------------------------
    Dizi dizisi dönen ve dizi dizisi parametreli metotlar
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;

class App {
    public static void main(String [] args)
    {
        int [][] a = ArrayUtil.getRandomMatrix(3, 4, 1, 100);

        ArrayUtil.display(a, 2);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Sınıf Çalışması: Parametresi ile aldığı bir dizi dizisi referansının bir matris olup olmadığını test
    eden isMatrix isimli metodu yazınız
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;

class App {
    public static void main(String [] args)
    {
        int [][] a = new int[5][];

        a[0] = new int[3];
        a[1] = new int[4];
        a[2] = new int[3];
        a[3] = new int[3];
        a[4] = new int[3];

        System.out.println(ArrayUtil.isMatrix(a));
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Sınıf Çalışması: Parametresi ile aldığı bir dizi dizisi referansının bir kare matris olup olmadığını
    test eden isSquareMatrix isimli metodu yazınız
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;

class App {
    public static void main(String [] args)
    {
        int [][] a = new int[5][4];

        System.out.println(ArrayUtil.isSquareMatrix(a) ? "kare matris" : "Kare matris değil");
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Sınıf Çalışması: Parametresi ile aldığı int türden n, min ve max değerlerine göre n * n boyutlu
    her bir elemanı [min, max) aralığında rasgele üretilmiş elemanlardan oluşan bir kare matris döndüren
    getRandomSquareMatrix isimli metodu yazınız ve test ediniz
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;

class App {
    public static void main(String [] args)
    {
        int [][] a = ArrayUtil.getRandomSquareMatrix(10, 1, 100);

        ArrayUtil.display(a, 2);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Sınıf Çalışması: Parametresi ile aldığı bir kare matrisin esas köşegeni üzerindeki sayıların toplamını
    döndüren sumDiagonal isimli metodu yazınız. Metot kare matris olmaması durumu için herhangi bir kontrol
    yapmayacaktır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;

class App {
    public static void main(String [] args)
    {
        int [][] a = ArrayUtil.getRandomSquareMatrix(5, 1, 100);

        ArrayUtil.display(a, 2);

        System.out.printf("Esas köşegen elemanları toplamı:%d%n", ArrayUtil.sumDiagonal(a));
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Bir matrise ilk değer verilmesi
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;

class App {
    public static void main(String [] args)
    {
        int [][] a = {{1, 2, 3, 4, 5}, {6, 7, 8, 9, 10}, {11, 12, 13, 14, 15}};

        ArrayUtil.display(a, 2);
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Bir matrise ilk değer verilmesi
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;

class App {
    public static void main(String [] args)
    {
        int [][] a;

        a = new int[][]{{1, 2, 3, 4, 5}, {6, 7, 8, 9, 10}, {11, 12, 13, 14, 15}};

        ArrayUtil.display(a, 2);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Bir dizi dizisine ilk değer verilmesi
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;

class App {
    public static void main(String [] args)
    {
        int [][] a = {{1, 2, 3, 4, 5, 89, 90}, {6, 7, 8, 9}, {11, 12, 13, 14, 15}};

        ArrayUtil.display(a, 2);
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Bir dizi sıfır elemanlı olabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        int [] a = {};


        System.out.println(a.length);
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Bir dizi sıfır elemanlı olabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        int [] a = new int[0];


        System.out.println(a.length);
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Sıfır elemanlı bir dizi bazı durumlarda kontrol amaçlı kullanılabilir. Aşağıdaki örnekte getRandomArray
    metodu geçersiz argümanlar için sıfır elemanlı dizi döndürmektedir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Random;

class App {
    public static void main(String [] args)
    {
        int [] a = Util.getRandomArray(new Random(), 10, 11, -9);


        System.out.println(a.length);
    }
}

class Util {
    public static int[] getRandomArray(Random r, int n, int min, int max)
    {
        if (n <= 0 || min > max)
            return new int[0];

        int [] a = new int[n];

        for (int i = 0; i < n; ++i)
            a[i] = r.nextInt(max - min) + min;

        return a;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Dizi dizilerinde karmaşık bildirimler
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        int [][][] a = new int[3][4][5];

        //...
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Dizi dizilerinde karmaşık bildirimler
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        int [][][][] a;

        //...
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    16.02.2020
    Dizi dizileri (jagged array)
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;

class App {
    public static void main(String [] args)
    {
        int [][] a = new int[4][];

        a[0] = new int[3];
        a[1] = new int[10];
        a[2] = new int[10];
        a[3] = new int[20];

        ArrayUtil.display(a);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Dizi dizileri (jagged array)
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;

import java.util.Random;

class App {
    public static void main(String [] args)
    {
        int [][] a = new int[4][];
        Random r = new Random();


        a[0] = ArrayUtil.getRandomArray(r, 3, 1, 100);
        a[1] =  ArrayUtil.getRandomArray(r, 10, 1, 100);
        a[2] =  ArrayUtil.getRandomArray(r, 10, 1, 100);
        a[3] =  ArrayUtil.getRandomArray(r, 20, 1, 100);

        ArrayUtil.display(a, 2);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Dizi dizileri (jagged array)
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;

class App {
    public static void main(String [] args)
    {
        int [][] a = new int[4][5];


        ArrayUtil.display(a, 2);

        a[0] = new int[10];

        System.out.println("**********");
        ArrayUtil.display(a, 2);
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Lottary sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.samples.lottaryapp.Lottary;
import org.csystem.util.ArrayUtil;

import java.util.Scanner;

class App {
    public static void main(String [] args)
    {
        Scanner kb = new Scanner(System.in);
        System.out.print("Kaç kupon oynamak istiyorsunuz?");
        int n = Integer.parseInt(kb.nextLine());

        Lottary lottary = new Lottary();

        ArrayUtil.display(lottary.getColums(n), 2);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Lottary sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.samples.lottaryapp;

import java.util.Random;

public class Lottary {
    public Random rand;

    public Lottary()
    {
        rand = new Random();
    }

    public boolean[] getFlags()
    {
        boolean [] flags = new boolean[50];
        int val;

        for (int i = 0; i < 6; ++i) {
            for (;;) {
                val = rand.nextInt(49) + 1;
                if (!flags[val])
                    break;
            }
            flags[val] = true;
        }
        return flags;
    }

    public int [] getNumbers(boolean [] flags)
    {
        int [] numbers = new int[6];
        int index = 0;

        for (int i = 1; i < 50; ++i)
            if (flags[i])
                numbers[index++] = i;

        return numbers;
    }

    public int [] getNumbers()
    {
        return getNumbers(getFlags());
    }

    public int[][] getColums(int n)
    {
        int [][] columns = new int[n][];

        for (int i = 0; i < n; ++i)
            columns[i] = getNumbers();

        return columns;
    }
}
/*----------------------------------------------------------------------------------------------------------------------
    Sınıf Çalışması: Parametresi ile aldığı bir matrisin devriğini (transpose) döndüren getTransposedMatrix
    isimli metodu yazınız ve test ediniz

    1 2 3
    4 5 6

    1 4
    2 5
    3 6
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;

class App {
    public static void main(String [] args)
    {
        int [][]  a = ArrayUtil.getRandomMatrix(5, 3, 1, 100);

        ArrayUtil.display(a, 2);
        System.out.println("*************");
        ArrayUtil.display(ArrayUtil.getTransposedMatrix(a), 2);
        System.out.println("*************");
        ArrayUtil.display(a, 2);
    }
}
/*----------------------------------------------------------------------------------------------------------------------
    Sınıf Çalışması: Bir okulda ortak Matematik sınavı yapılacak olsun. Kaç tane sınıfın (şubenin) sınava gireceği
    ve her bir şubenin öğrenci sayısı klavyeden girilsin. Öğrencilerin notları rasgele olarak belirlensin.
    Bu işlemlerden sonra Matematik sınavı için her bir şubenin not ortalaması ve tüm okulun ortalamsını bulan
    programı yazınız
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.samples.examsimulation.ExamSimulation;

class App {
    public static void main(String [] args)
    {
        ExamSimulation examSimulation = new ExamSimulation("Matematik");

        examSimulation.run();
        examSimulation.report();
    }
}

package org.csystem.samples.examsimulation;

import org.csystem.util.ArrayUtil;

import java.util.Random;
import java.util.Scanner;

public class ExamSimulation {
    public String lectureName;
    public int [][] grades;
    public double [] averages;
    public double average;

    public void fillGrades()
    {
        Scanner kb = new Scanner(System.in);
        Random r = new Random();
        System.out.print("Şube sayısını giriniz:");
        grades = new int[Integer.parseInt(kb.nextLine())][];
        averages = new double[grades.length];

        for (int i = 0; i < grades.length; ++i) {
            System.out.printf("%d. şube öğrenci sayısını giriniz:", i + 1);
            int n = Integer.parseInt(kb.nextLine());
            grades[i] = ArrayUtil.getRandomArray(r, n, 0, 101);
        }
    }

    public void calculateAverages()
    {
        int totalGrades = 0, numberOfStudents = 0;


        for (int i = 0; i < grades.length; ++i) {
            int sumOfGrades = ArrayUtil.sum(grades[i]);

            totalGrades += sumOfGrades;
            numberOfStudents += grades[i].length;
            averages[i] = (double)sumOfGrades / grades[i].length;
        }

        average = (double)totalGrades / numberOfStudents;
    }

    public ExamSimulation(String name)
    {
        lectureName = name;
    }

    public void displayGrades()
    {
        ArrayUtil.display(grades, 2);

        System.out.println("***************************");
    }

    public void report()
    {
        System.out.printf("%s dersi sınav raporu:%n", lectureName);
        for (int i = 0; i < grades.length; ++i) {
            System.out.printf("%d.sınıf:", i + 1);
            for (int k = 0; k < grades[i].length; ++k)
                System.out.printf("%02d ", grades[i][k]);

            System.out.printf("Ortalama:%f%n", averages[i]);
        }

        System.out.printf("Okul Ortalaması:%f%n", average);
    }

    public void run()
    {
        fillGrades();
        displayGrades();
        calculateAverages();
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Homework-013 için bir iskelet
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.samples.commandprompt.CommandPromptApp;

class App {
    public static void main(String [] args)
    {
        CommandPromptApp commandPromptApp = new CommandPromptApp("CSD");

        commandPromptApp.run();
    }
}

package org.csystem.samples.commandprompt;

import org.csystem.util.StringUtil;

import java.util.Scanner;

public class CommandPromptApp {
    public String prompt;
    public static String [] commands = {"length", "reverse", "upper", "lower", "change"};

    public int getCommandIndex(String cmdStr)
    {
        if (cmdStr.length() < 3)
            return -1;

        for (int i = 0; i < commands.length; ++i)
            if (commands[i].startsWith(cmdStr))
                return i;

        return -1;
    }

    public void lengthProc(String [] commandsInfo)
    {
        System.out.println(commandsInfo[1].length());
    }

    public void reverseProc(String [] commandsInfo)
    {
        System.out.println(StringUtil.reverse(commandsInfo[1]));
    }

    public void upperProc(String [] commandsInfo)
    {
        System.out.println(commandsInfo[1].toUpperCase());
    }

    public void lowerProc(String [] commandsInfo)
    {
        System.out.println(commandsInfo[1].toLowerCase());
    }

    public void changeProc(String [] commandsInfo)
    {
        prompt = commandsInfo[1];
    }

    public CommandPromptApp(String p)
    {
        prompt = p;
    }

    public void run()
    {
        Scanner kb = new Scanner(System.in);

        for (;;) {
            System.out.print(prompt + ">");
            String cmdStr = kb.nextLine().trim();

            String [] commandsInfo = cmdStr.split("[ \t]+");

            if (commandsInfo.length == 1 && commandsInfo[0].equals("quit"))
                break;

            int index = getCommandIndex(commandsInfo[0]);

            switch (index) {
                case 0:
                    lengthProc(commandsInfo);
                    break;
                case 1:
                    reverseProc(commandsInfo);
                    break;
                case 2:
                    upperProc(commandsInfo);
                    break;
                case 3:
                    lowerProc(commandsInfo);
                    break;
                case 4:
                    changeProc(commandsInfo);
                    break;
                default:
                    System.out.println("Geçersiz komut");
            }
        }

        System.out.println("Tekrar yapınız!!!");
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    ArrayUtil sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.util;

import java.util.Random;

public class ArrayUtil {
    public static double average(int [] a)
    {
        return  (double)sum(a) / a.length;
    }
    public static void display(int [] a)
    {
        display(a, 1);
    }

    public static void display(int [] a, int n)
    {
        String fmt = String.format("%%0%dd ", n);

        for (int i = 0; i < a.length; ++i)
            System.out.printf(fmt, a[i]);

        System.out.println();
    }

    public static void display(int [][] a)
    {
        display(a, 1);
    }
    public static void display(int [][] a, int n)
    {
        for (int i = 0; i < a.length; ++i)
            display(a[i], n);
    }

    public static void drawHistogram(int [] hist, int n, char ch)
    {
        int maxVal = max(hist);

        for (int i = 0; i < hist.length; ++i) {
            int nCh = hist[i] * n / maxVal; //(int)Math.round(hist[i] * n / (double)maxVal);

            while (nCh-- > 0)
                System.out.print(ch);

            System.out.println();
        }
    }

    public static int [] getHistogramData(int [] a, int n) //[0, n]
    {
        int [] counts = new int[n + 1];

        for (int i = 0; i < a.length; ++i)
            ++counts[a[i]];

        return counts;
    }

    public static int[] getRandomArray(int n, int min, int max) //[min, max)
    {
        return getRandomArray(new Random(), n, min, max);
    }

    public static int[] getRandomArray(Random r, int n, int min, int max) //[min, max)
    {
        int [] a = new int[n];

        for (int i = 0; i < n; ++i)
            a[i] = r.nextInt(max - min) + min;

        return a;
    }

    public static int[][] getRandomMatrix(int m, int n, int min, int max) //[min, max)
    {
        return getRandomMatrix(new Random(), m, n, min, max);
    }

    public static int[][] getRandomMatrix(Random r, int m, int n, int min, int max) //[min, max)
    {
        int [][] a = new int[m][];

        for (int i = 0; i < m; ++i)
            a[i] = getRandomArray(r, n, min, max);

        return a;
    }

    public static int [][] getRandomSquareMatrix(int n, int min, int max)
    {
        return getRandomSquareMatrix(new Random(), n, min, max);
    }

    public static int [][] getRandomSquareMatrix(Random r, int n, int min, int max)
    {
        return getRandomMatrix(r, n, n, min, max);
    }

    public static int [][] getTransposedMatrix(int [][] a)
    {
        if (!isMatrix(a))
            return new int[0][];

        int row = a[0].length;
        int col = a.length;
        int [][] t = new int[row][col];

        for (int i = 0; i < row; ++i)
            for (int j = 0; j < col; ++j)
                t[i][j] = a[j][i];

        return t;
    }

    public static boolean isMatrix(int [][] a)
    {
        int col = a[0].length;

        for (int i = 1; i < a.length; ++i)
            if (a[i].length != col)
                return false;

        return true;
    }

    public static boolean isSquareMatrix(int [][] a)
    {
        return isMatrix(a) && a.length == a[0].length;
    }

    public static String join(String [] s, char delim)
    {
        return join(s, delim + "");
    }

    public static  String join(String [] s, String delim)
    {
        String str = "";

        for (int i = 0; i < s.length; ++i)
            str += s[i] + delim;

        return str.substring(0, str.length() - delim.length());
    }

    public static int max(int [] a)
    {
        int result = a[0];

        for (int i = 1; i < a.length; ++i)
            result = Math.max(result, a[i]);

        return result;
    }

    public static int min(int [] a)
    {
        int result = a[0];

        for (int i = 1; i < a.length; ++i)
            result = Math.min(result, a[i]);

        return result;
    }

    public static void reverse(int [] a) //by Emre Onsur
    {
        int temp;
        int halfLen = a.length / 2;

        for(int i = 0; i < halfLen; ++i) {
            temp = a[i];
            a[i] = a[a.length - 1 - i];
            a[a.length - 1 - i] = temp;
        }
    }

    public static void reverse(char [] a)
    {
        char temp;
        int halfLen = a.length / 2;

        for(int i = 0; i < halfLen; ++i) {
            temp = a[i];
            a[i] = a[a.length - 1 - i];
            a[a.length - 1 - i] = temp;
        }
    }

    public static int sum(int [] a)
    {
        int result = 0;

        for (int i = 0; i < a.length; ++i)
            result += a[i];

        return result;
    }

    public static int sumDiagonal(int [][] a)
    {
        //...

        int sum = 0;

        for (int i = 0; i < a.length; ++i)
            sum += a[i][i];

        return sum;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	NumberUtil sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.util;

import java.util.Random;

public class NumberUtil {
	public static String [] onesTR = {"", "bir", "iki", "üç", "dört", "beş", "altı", "yedi", "sekiz", "dokuz"};
	public static String [] tensTR = {"", "on", "yirmi", "otuz", "kırk", "elli", "altmış", "yetmiş", "seksen", "doksan"};

	public static String numToTextMax3DigitsTR(int val)
	{
		if (val == 0)
			return "sıfır";

		String str = val < 0 ? "eksi" : "";

		val = Math.abs(val);

		int a = val / 100;
		int b = val / 10 % 10;
		int c = val % 10;

		if (a != 0) {
			if (a != 1)
				str += onesTR[a];
			str += "yüz";
		}

		if (b != 0)
			str += tensTR[b];

		if (c != 0)
			str += onesTR[c];

		return str;
	}

	public static int [] getDigits(int n, int val)
	{
		val = Math.abs(val);
		int len = val == 0 ? 1 : (int)Math.log10(val) / n + 1;
		int [] a = new int[len];

		for (int i = len - 1; i >= 0; --i) {
			int pow = (int)Math.pow(10, n);

			a[i] = val % pow;
			val /= pow;
		}

		return a;
	}

	public static long factorial(int n)
	{
		if (n < 0)
			return -1;

		long result = 1;

		for (int i = 2; i <= n; ++i)
			result *= i;

		return result;
	}

	public static int [] getDigits(int val)
	{
		return getDigits(1, val);
	}

	public static int [] getDigitsInThree(int val)
	{
		return getDigits(3, val);
	}

	public static int getDigitsCount(int val)
	{
		return val == 0 ? 1 : (int)Math.log10(Math.abs(val)) + 1;
	}

	public static int getDigitsSum(int val)
	{
		int sum = 0;

		while (val != 0) {
			sum += val % 10;
			val /= 10;
		}

		return Math.abs(sum);
	}

	public static int getNextFibonacciNumber(int val)
	{
		if (val < 0)
			return 0;

		int prev1 = 0, prev2 = 1, number = 0;

		for (;;) {
			number = prev1 + prev2;
			if (number > val)
				return number;

			prev1 = prev2;
			prev2 = number;
		}
	}

	public static int getFibonnaciNumber(int n)
	{
		if (n <= 0)
			return -1;

		if (n <= 2)
			return n - 1;

		int prev1 = 0, prev2 = 1, val = 0;

		for (int i = 2; i < n; ++i) {
			val = prev1 + prev2;
			prev1 = prev2;
			prev2 = val;
		}

		return val;
	}

	public static int getPrime(int n)
	{
		if (n <= 0)
			return -1;

		int count = 0, val = 0;

		for (int i = 2; count < n; ++i) {
			if (isPrime(i)) {
				++count;
				val = i;
			}
		}

		return val;
	}

	public static int getRandom4DigitsNumber()
	{
		return getRandom4DigitsNumber(new Random());
	}

	public static int getRandom4DigitsNumber(Random r)
	{
		boolean [] flags = new boolean[10];
		int result = 0;
		int val = r.nextInt(9) + 1;

		flags[val] = true;
		result = val * 1000;

		for (int i = 3; i >= 1; --i) {
			for (;;) {
				val = r.nextInt(10);
				if (!flags[val])
					break;
			}
			result += val * (int)Math.pow(10, i - 1);
			flags[val] = true;
		}

		return result;
	}

	public static int getReverse(int val)
	{
		int rev = 0;

		while (val != 0) {
			rev = rev * 10 + val % 10;
			val /= 10;
		}

		return rev;
	}

	public static int getSum(int val)
	{
		int n = getDigitsCount(val);

		int sum = 0;

		while (val != 0) {
			sum += pow(val % 10, n);
			val /= 10;
		}

		return sum;
	}

	public static boolean isArmstrong(int val)
	{
		if (val < 0)
			return false;

		return val == getSum(val);
	}

	public static boolean isEven(int val)
	{
		return val % 2 == 0;
	}

	public static boolean isNegative(int val)
	{
		return val < 0;
	}

	public static boolean isOdd(int val)
	{
		return !isEven(val);
	}

	public static boolean isPalindrome(int val)
	{
		return getReverse(val) == val;
	}

	public static boolean isPrime(int val)
	{
		if (val <= 1)
			return false;

		if (val % 2 == 0)
			return val == 2;

		if (val % 3 == 0)
			return val == 3;

		if (val % 5 == 0)
			return val == 5;

		if (val % 7 == 0)
			return val == 7;

		for (int i = 11; i * i <= val; i += 2)
			if (val % i == 0)
				return false;

		return true;
	}

	public static boolean isPositive(int val)
	{
		return val > 0;
	}

	public static int pow(int a, int b)
	{
		b = Math.abs(b);
		int result = 1;

		while (b-- > 0)
			result *= a;

		return result;
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	StringUtil sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.util;

import java.util.Random;

public class StringUtil {
	public static String capitalize(String str)
	{
		str = str.trim();

		return !str.isEmpty() ? Character.toUpperCase(str.charAt(0)) + str.substring(1).toLowerCase() : "";
	}

	public static int getCount(String s1, String s2)
	{
		int count = 0;

		for (int index = -1; (index = s1.indexOf(s2, index + 1)) != -1; ++count)
				;

		return count;
	}

	public static String generateRandomPassword(java.util.Random r, int n)
	{
		String chars = "abcçdefgğhıijklmnoöpqrsştuüwxvyz0123456789.:?-_";

		char [] c = new char[n];

		for (int i = 0; i < n; ++i)  {
			char ch = chars.charAt(r.nextInt(chars.length()));

			c[i] = r.nextBoolean() ? Character.toUpperCase(ch) : ch;
		}

		return new String(c);
	}

	public static String generateRandomPassword(int n)
	{
		return generateRandomPassword(new java.util.Random(), n);
	}

	public static String getRandomString(java.util.Random r, int n, String str)
	{
		char [] c = new char[n];

		for (int i = 0; i < n; ++i)
			c[i] = str.charAt(r.nextInt(str.length()));

		return new String(c);
	}

	public static String getRandomText(Random r, int n, String alphabet)
	{
		char [] c = new char[n];

		for (int i = 0; i < n; ++i) {
			char ch = alphabet.charAt(r.nextInt(alphabet.length()));

			c[i] = r.nextBoolean() ? Character.toUpperCase(ch) : ch;
		}

		return new String(c);
	}

	public static String getRandomTextEN(java.util.Random r, int n)
	{
		String alphabet = "abcdefghijklmnopqrstuwvxyz";

		return getRandomText(r, n, alphabet);
	}

	public static String getRandomTextEN(int n)
	{
		return getRandomTextEN(new java.util.Random(), n);
	}

	public static String getRandomTextTR(java.util.Random r, int n)
	{
		String alphabet = "abcçdefgğhıijklmnoöprsştuüvyz";

		return getRandomText(r, n, alphabet);
	}

	public static String getRandomTextTR(int n)
	{
		return getRandomTextTR(new java.util.Random(), n);
	}

	public static boolean isPalindrome(String s)
	{
		s = removeNonalphabetics(s);

		int len = s.length();
		int halfLen = len / 2;

		for (int i = 0; i < halfLen; ++i) {
			char ch1 = Character.toLowerCase(s.charAt(i));
			char ch2 = Character.toLowerCase(s.charAt(len - 1 - i));

			if (ch1 != ch2)
				return false;
		}

		return true;
	}

	public static boolean isPangram(String s, String alphabet)
	{
		int len = alphabet.length();

		for (int i = 0; i < len; ++i)
			if (!s.contains(alphabet.charAt(i) + ""))
				return false;

		return true;
	}

	public static boolean isPangramTR(String s)
	{
		return isPangram(s.toLowerCase(), "abcçdefgğhıijklmnoöprsştuüvyz");
	}

	public static boolean isPangramEN(String s)
	{
		return isPangram(s.toLowerCase(), "abcdefghijklmnopqrstuvwxyz");
	}

	public static String padLeft(String s, int len, char ch)
	{
		if (len <= s.length())
			return s;

		return repeat(len - s.length(), ch) + s;
	}

	public static String padLeft(String s, int len)
	{
		return padLeft(s, len, ' ');
	}

	public static String padRight(String s, int len, char ch)
	{
		if (len <= s.length())
			return s;

		return s + repeat(len - s.length(), ch);
	}

	public static String padRight(String s, int len)
	{
		return padRight(s, len, ' ');
	}

	public static String removeNonalphabetics(String s)
	{
		String str = "";

		int len = s.length();

		for (int i = 0; i < len; ++i) {
			char ch = s.charAt(i);

			if (Character.isLetter(ch))
				str += ch;
		}

		return str;
	}

	public static String repeat(int n, char ch)
	{
		char [] c = new char[n];

		while (n-- > 0)
			c[n] += ch;

		return new String(c);
	}

	public static String reverse(String str)
	{
		char [] c = str.toCharArray();

		ArrayUtil.reverse(c);

		return new String(c);
	}


	public static String trimEnd(String s)
	{
		int i;

		for (i = s.length() - 1; i >= 0 && Character.isWhitespace(s.charAt(i)); --i)
			;

		return s.substring(0, i + 1);
	}

	public static String trimStart(String s)
	{
		int i;

		int len = s.length();

		for (i = 0; i < len && Character.isWhitespace(s.charAt(i)); ++i)
			;

		return s.substring(i);
	}
}


/*----------------------------------------------------------------------------------------------------------------------
    22.02.2020
    for (<tür> <değişken> : <dolaşılabilecek tür referansı>)
        <deyim>

    dolaşılabilen (iterable) türlerden biri de dizilerdir
----------------------------------------------------------------------------------------------------------------------*/
/*----------------------------------------------------------------------------------------------------------------------
   for-each döngü deyiminde her adımda dizinin elemanı döngü değişkenine atanır. Yani dizi baştan sona dolaşılmış
   olur:

     {
        int val;

       for (int i = 0; i < a.length; ++i) {
            val = a[i];

            System.out.printf("%d ", val);
       }
   }
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        int [] a = {1, 2, 3, 4, 5};

        for (int val : a)
            System.out.printf("%d ", val);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
   for-each döngü deyiminde döngü değişkeni for-each döngüsü boyunca görülebilirdir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        int [] a = {1, 2, 3, 4, 5};

        for (int val : a)
            System.out.printf("%d ", val);


        val = 10; //error
    }
}

/*----------------------------------------------------------------------------------------------------------------------
   for-each döngü deyiminde :'den sonraki kısım bir kez yapılır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        for (int val : Sample.getArray())
            System.out.printf("%d ", val);
    }
}

class Sample {
    public static int [] getArray()
    {
        System.out.println("getArray");

        return new int[] {1, 2, 3, 4, 5};
    }
}

/*----------------------------------------------------------------------------------------------------------------------
   for-each döngü deyiminde döngü değişkeni dolaşılabilen türe ilişkin her elemanın atanabileceği türde olmalıdır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        for (short val : Sample.getArray()) //error
            System.out.printf("%d ", val);
    }
}

class Sample {
    public static int [] getArray()
    {
        System.out.println("getArray");

        return new int[] {1, 2, 3, 4, 5};
    }
}

/*----------------------------------------------------------------------------------------------------------------------
   Dizi dizilerinin for-each döngü deyimi ile dolaşılması
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        int [][] a = {{1, 2, 3}, {5, 6, 7}, {9, 10, 11}};

        for (int [] array : a) {
            for (int val : array)
                System.out.printf("%02d ", val);

            System.out.println();
        }

    }
}

/*----------------------------------------------------------------------------------------------------------------------
   String sınıfı for-each döngü deyimi ile dolaşılamaz
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String[] args)
    {
        String s = "ankara";

        for (char ch : s) //error:
            System.out.println(ch);
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Bubble sort algoritmasının basit bir çözümü
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.ArrayUtil;

class App {
    public static void main(String[] args)
    {
       int [] a = {1, -9, 9, -4, 3, 5};

        ArrayUtil.bubbleSort(a);

        ArrayUtil.display(a);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Bubble sort algoritmasının basit bir çözümü
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.util;

import java.util.Random;

public class ArrayUtil {
    public static double average(int [] a)
    {
        return  (double)sum(a) / a.length;
    }

    public static void bubbleSort(int [] a)
    {
        bubbleSort(a, false);
    }

    public static void bubbleSort(int [] a, boolean desc)
    {
        if (desc) {
            for (int i = 0; i < a.length - 1; ++i) {
                for (int k = 0; k < a.length - 1 - i; ++k)
                    if (a[k] < a[k + 1]) {
                        int temp = a[k];
                        a[k] = a[k + 1];
                        a[k + 1] = temp;
                    }
            }
        }
        else {
            for (int i = 0; i < a.length - 1; ++i) {
                for (int k = 0; k < a.length - 1 - i; ++k)
                    if (a[k] > a[k + 1]) {
                        int temp = a[k];
                        a[k] = a[k + 1];
                        a[k + 1] = temp;
                    }
            }
        }
    }

    public static void display(int [] a)
    {
        display(a, 1);
    }

    public static void display(int [] a, int n)
    {
        String fmt = String.format("%%0%dd ", n);

        for (int val : a)
            System.out.printf(fmt, val);

        System.out.println();
    }

    public static void display(int [][] a)
    {
        display(a, 1);
    }
    public static void display(int [][] a, int n)
    {
        for (int [] array : a)
            display(array, n);
    }

    public static void drawHistogram(int [] hist, int n, char ch)
    {
        int maxVal = max(hist);

        for (int val : hist) {
            int nCh = val * n / maxVal;

            while (nCh-- > 0)
                System.out.print(ch);

            System.out.println();
        }
    }

    public static int [] getHistogramData(int [] a, int n) //[0, n]
    {
        int [] counts = new int[n + 1];

        for (int val : a)
            ++counts[val];

        return counts;
    }

    public static int[] getRandomArray(int n, int min, int max) //[min, max)
    {
        return getRandomArray(new Random(), n, min, max);
    }

    public static int[] getRandomArray(Random r, int n, int min, int max) //[min, max)
    {
        int [] a = new int[n];

        for (int i = 0; i < n; ++i)
            a[i] = r.nextInt(max - min) + min;

        return a;
    }

    public static int[][] getRandomMatrix(int m, int n, int min, int max) //[min, max)
    {
        return getRandomMatrix(new Random(), m, n, min, max);
    }

    public static int[][] getRandomMatrix(Random r, int m, int n, int min, int max) //[min, max)
    {
        int [][] a = new int[m][];

        for (int i = 0; i < m; ++i)
            a[i] = getRandomArray(r, n, min, max);

        return a;
    }

    public static int [][] getRandomSquareMatrix(int n, int min, int max)
    {
        return getRandomSquareMatrix(new Random(), n, min, max);
    }

    public static int [][] getRandomSquareMatrix(Random r, int n, int min, int max)
    {
        return getRandomMatrix(r, n, n, min, max);
    }

    public static int [][] getTransposedMatrix(int [][] a)
    {
        if (!isMatrix(a))
            return new int[0][];

        int row = a[0].length;
        int col = a.length;
        int [][] t = new int[row][col];

        for (int i = 0; i < row; ++i)
            for (int j = 0; j < col; ++j)
                t[i][j] = a[j][i];

        return t;
    }

    public static boolean isMatrix(int [][] a)
    {
        int col = a[0].length;

        for (int i = 1; i < a.length; ++i)
            if (a[i].length != col)
                return false;

        return true;
    }

    public static boolean isSquareMatrix(int [][] a)
    {
        return isMatrix(a) && a.length == a[0].length;
    }

    public static String join(String [] s, char delim)
    {
        return join(s, delim + "");
    }

    public static  String join(String [] s, String delim)
    {
        String str = "";

        for (String sval : s)
            str += sval + delim;

        return str.substring(0, str.length() - delim.length());
    }

    public static int max(int [] a)
    {
        int result = a[0];

        for (int i = 1; i < a.length; ++i)
            result = Math.max(result, a[i]);

        return result;
    }

    public static int min(int [] a)
    {
        int result = a[0];

        for (int i = 1; i < a.length; ++i)
            result = Math.min(result, a[i]);

        return result;
    }

    public static void reverse(int [] a) //by Emre Onsur
    {
        int temp;
        int halfLen = a.length / 2;

        for(int i = 0; i < halfLen; ++i) {
            temp = a[i];
            a[i] = a[a.length - 1 - i];
            a[a.length - 1 - i] = temp;
        }
    }

    public static void reverse(char [] a)
    {
        char temp;
        int halfLen = a.length / 2;

        for(int i = 0; i < halfLen; ++i) {
            temp = a[i];
            a[i] = a[a.length - 1 - i];
            a[a.length - 1 - i] = temp;
        }
    }

    public static int sum(int [] a)
    {
        int result = 0;

        for (int val : a)
            result += val;

        return result;
    }

    public static int sumDiagonal(int [][] a)
    {
        //...

        int sum = 0;

        for (int i = 0; i < a.length; ++i)
            sum += a[i][i];

        return sum;
    }
}


/*----------------------------------------------------------------------------------------------------------------------
	NumberUtil sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.util;

import java.util.Random;

public class NumberUtil {
	public static String [] onesTR = {"", "bir", "iki", "üç", "dört", "beş", "altı", "yedi", "sekiz", "dokuz"};
	public static String [] tensTR = {"", "on", "yirmi", "otuz", "kırk", "elli", "altmış", "yetmiş", "seksen", "doksan"};

	public static String numToTextMax3DigitsTR(int val)
	{
		if (val == 0)
			return "sıfır";

		String str = val < 0 ? "eksi" : "";

		val = Math.abs(val);

		int a = val / 100;
		int b = val / 10 % 10;
		int c = val % 10;

		if (a != 0) {
			if (a != 1)
				str += onesTR[a];
			str += "yüz";
		}

		if (b != 0)
			str += tensTR[b];

		if (c != 0)
			str += onesTR[c];

		return str;
	}

	public static int [] getDigits(int n, int val)
	{
		val = Math.abs(val);
		int len = val == 0 ? 1 : (int)Math.log10(val) / n + 1;
		int [] a = new int[len];

		for (int i = len - 1; i >= 0; --i) {
			int pow = (int)Math.pow(10, n);

			a[i] = val % pow;
			val /= pow;
		}

		return a;
	}

	public static long factorial(int n)
	{
		if (n < 0)
			return -1;

		long result = 1;

		for (int i = 2; i <= n; ++i)
			result *= i;

		return result;
	}

	public static int [] getDigits(int val)
	{
		return getDigits(1, val);
	}

	public static int [] getDigitsInThree(int val)
	{
		return getDigits(3, val);
	}

	public static int getDigitsCount(int val)
	{
		return val == 0 ? 1 : (int)Math.log10(Math.abs(val)) + 1;
	}

	public static int getDigitsSum(int val)
	{
		int sum = 0;

		while (val != 0) {
			sum += val % 10;
			val /= 10;
		}

		return Math.abs(sum);
	}

	public static int getNextFibonacciNumber(int val)
	{
		if (val < 0)
			return 0;

		int prev1 = 0, prev2 = 1, number = 0;

		for (;;) {
			number = prev1 + prev2;
			if (number > val)
				return number;

			prev1 = prev2;
			prev2 = number;
		}
	}

	public static int getFibonnaciNumber(int n)
	{
		if (n <= 0)
			return -1;

		if (n <= 2)
			return n - 1;

		int prev1 = 0, prev2 = 1, val = 0;

		for (int i = 2; i < n; ++i) {
			val = prev1 + prev2;
			prev1 = prev2;
			prev2 = val;
		}

		return val;
	}

	public static int getPrime(int n)
	{
		if (n <= 0)
			return -1;

		int count = 0, val = 0;

		for (int i = 2; count < n; ++i) {
			if (isPrime(i)) {
				++count;
				val = i;
			}
		}

		return val;
	}

	public static int getRandom4DigitsNumber()
	{
		return getRandom4DigitsNumber(new Random());
	}

	public static int getRandom4DigitsNumber(Random r)
	{
		boolean [] flags = new boolean[10];
		int result = 0;
		int val = r.nextInt(9) + 1;

		flags[val] = true;
		result = val * 1000;

		for (int i = 3; i >= 1; --i) {
			for (;;) {
				val = r.nextInt(10);
				if (!flags[val])
					break;
			}
			result += val * (int)Math.pow(10, i - 1);
			flags[val] = true;
		}

		return result;
	}

	public static int getReverse(int val)
	{
		int rev = 0;

		while (val != 0) {
			rev = rev * 10 + val % 10;
			val /= 10;
		}

		return rev;
	}

	public static int getSum(int val)
	{
		int n = getDigitsCount(val);

		int sum = 0;

		while (val != 0) {
			sum += pow(val % 10, n);
			val /= 10;
		}

		return sum;
	}

	public static boolean isArmstrong(int val)
	{
		if (val < 0)
			return false;

		return val == getSum(val);
	}

	public static boolean isEven(int val)
	{
		return val % 2 == 0;
	}

	public static boolean isNegative(int val)
	{
		return val < 0;
	}

	public static boolean isOdd(int val)
	{
		return !isEven(val);
	}

	public static boolean isPalindrome(int val)
	{
		return getReverse(val) == val;
	}

	public static boolean isPrime(int val)
	{
		if (val <= 1)
			return false;

		if (val % 2 == 0)
			return val == 2;

		if (val % 3 == 0)
			return val == 3;

		if (val % 5 == 0)
			return val == 5;

		if (val % 7 == 0)
			return val == 7;

		for (int i = 11; i * i <= val; i += 2)
			if (val % i == 0)
				return false;

		return true;
	}

	public static boolean isPositive(int val)
	{
		return val > 0;
	}

	public static int pow(int a, int b)
	{
		b = Math.abs(b);
		int result = 1;

		while (b-- > 0)
			result *= a;

		return result;
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	StringUtil sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.util;

import java.util.Random;

public class StringUtil {
	public static String capitalize(String str)
	{
		str = str.trim();

		return !str.isEmpty() ? Character.toUpperCase(str.charAt(0)) + str.substring(1).toLowerCase() : "";
	}

	public static int getCount(String s1, String s2)
	{
		int count = 0;

		for (int index = -1; (index = s1.indexOf(s2, index + 1)) != -1; ++count)
				;

		return count;
	}

	public static String generateRandomPassword(java.util.Random r, int n)
	{
		String chars = "abcçdefgğhıijklmnoöpqrsştuüwxvyz0123456789.:?-_";

		char [] c = new char[n];

		for (int i = 0; i < n; ++i)  {
			char ch = chars.charAt(r.nextInt(chars.length()));

			c[i] = r.nextBoolean() ? Character.toUpperCase(ch) : ch;
		}

		return new String(c);
	}

	public static String generateRandomPassword(int n)
	{
		return generateRandomPassword(new java.util.Random(), n);
	}

	public static String getRandomString(java.util.Random r, int n, String str)
	{
		char [] c = new char[n];

		for (int i = 0; i < n; ++i)
			c[i] = str.charAt(r.nextInt(str.length()));

		return new String(c);
	}

	public static String getRandomText(Random r, int n, String alphabet)
	{
		char [] c = new char[n];

		for (int i = 0; i < n; ++i) {
			char ch = alphabet.charAt(r.nextInt(alphabet.length()));

			c[i] = r.nextBoolean() ? Character.toUpperCase(ch) : ch;
		}

		return new String(c);
	}

	public static String getRandomTextEN(java.util.Random r, int n)
	{
		String alphabet = "abcdefghijklmnopqrstuwvxyz";

		return getRandomText(r, n, alphabet);
	}

	public static String getRandomTextEN(int n)
	{
		return getRandomTextEN(new java.util.Random(), n);
	}

	public static String getRandomTextTR(java.util.Random r, int n)
	{
		String alphabet = "abcçdefgğhıijklmnoöprsştuüvyz";

		return getRandomText(r, n, alphabet);
	}

	public static String getRandomTextTR(int n)
	{
		return getRandomTextTR(new java.util.Random(), n);
	}

	public static boolean isPalindrome(String s)
	{
		s = removeNonalphabetics(s);

		int len = s.length();
		int halfLen = len / 2;

		for (int i = 0; i < halfLen; ++i) {
			char ch1 = Character.toLowerCase(s.charAt(i));
			char ch2 = Character.toLowerCase(s.charAt(len - 1 - i));

			if (ch1 != ch2)
				return false;
		}

		return true;
	}

	public static boolean isPangram(String s, String alphabet)
	{
		int len = alphabet.length();

		for (int i = 0; i < len; ++i)
			if (!s.contains(alphabet.charAt(i) + ""))
				return false;

		return true;
	}

	public static boolean isPangramTR(String s)
	{
		return isPangram(s.toLowerCase(), "abcçdefgğhıijklmnoöprsştuüvyz");
	}

	public static boolean isPangramEN(String s)
	{
		return isPangram(s.toLowerCase(), "abcdefghijklmnopqrstuvwxyz");
	}

	public static String padLeft(String s, int len, char ch)
	{
		if (len <= s.length())
			return s;

		return repeat(len - s.length(), ch) + s;
	}

	public static String padLeft(String s, int len)
	{
		return padLeft(s, len, ' ');
	}

	public static String padRight(String s, int len, char ch)
	{
		if (len <= s.length())
			return s;

		return s + repeat(len - s.length(), ch);
	}

	public static String padRight(String s, int len)
	{
		return padRight(s, len, ' ');
	}

	public static String removeNonalphabetics(String s)
	{
		String str = "";

		int len = s.length();

		for (int i = 0; i < len; ++i) {
			char ch = s.charAt(i);

			if (Character.isLetter(ch))
				str += ch;
		}

		return str;
	}

	public static String repeat(int n, char ch)
	{
		char [] c = new char[n];

		while (n-- > 0)
			c[n] += ch;

		return new String(c);
	}

	public static String reverse(String str)
	{
		char [] c = str.toCharArray();

		ArrayUtil.reverse(c);

		return new String(c);
	}


	public static String trimEnd(String s)
	{
		int i;

		for (i = s.length() - 1; i >= 0 && Character.isWhitespace(s.charAt(i)); --i)
			;

		return s.substring(0, i + 1);
	}

	public static String trimStart(String s)
	{
		int i;

		int len = s.length();

		for (i = 0; i < len && Character.isWhitespace(s.charAt(i)); ++i)
			;

		return s.substring(i);
	}
}
/*----------------------------------------------------------------------------------------------------------------------
	Sınıfın elemanlarının erişim belilrleyicileri:
	public, protected, no-modifier, private

	Sınıf içerisinde erişim belirleyici anlamında bir kısıt yoktur. Bu erişim belirleyiciler sınıf dışından erişim
	için kullanılır. Sınıf dışı başka bir sınıfın içi demektir
----------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------
	Sınıfın public elemanları sınıf dışında erişilebilir. public elemanlar için aynı pakette olmanın ya da olmamanın
	bir farkı yotur
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
	public static void main(String[] args)
	{

	}
}

class B {
	public void bar()
	{
		A x = new A();

		x.a = 20;
		x.foo();
	}
}

class A {
	public int a;
	public void foo()
	{

	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıfın public elemanları sınıf dışında erişilebilir. public elemanlar için aynı pakette olmanın ya da olmamanın
	bir farkı yotur
----------------------------------------------------------------------------------------------------------------------*/
package test;

public class A {
    public int a;
    public void foo()
    {

    }
}

package mest;

import test.A;

public class B {
    public void bar()
    {
        A x = new A();

        x.a = 20;
        x.foo();
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıfın private elemanlarına yalnızca o  sınıf içerisinde erişilebilir. Sınıf dışında erişilemez.
	private elemanlar için de aynı pakette olmanın ya da olmamanın bir farkı yotur
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
	public static void main(String[] args)
	{

	}
}

class B {
	public void bar()
	{
		A x = new A(); //error

		x.a = 20; //error
		x.foo(); //error
	}
}

class A {
	private A() {}
	private int a;
	private void foo()
	{

	}
}


/*----------------------------------------------------------------------------------------------------------------------
	Sınıfın private elemanlarına yalnızca o  sınıf içerisinde erişilebilir. Sınıf dışında erişilemez.
	private elemanlar için aynı pakette olmanın ya da olmamanın bir farkı yotur
----------------------------------------------------------------------------------------------------------------------*/
package test;

public class A {
    private A() {}
    private int a;
    private void foo()
    {

    }
}
package mest;

import test.A;

public class B {
    public void bar()
    {
        A x = new A(); //error

        x.a = 20; //error
        x.foo(); //error
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıfın protected elemanları aynı paketteki diğer sınıflar için public anlamındadır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
	public static void main(String[] args)
	{

	}
}

class B {
	public void bar()
	{
		A x = new A();

		x.a = 20;
		x.foo();
	}
}

class A {
	protected A() {}
	protected int a;
	protected void foo()
	{
		a *= 2;
	}
}



/*----------------------------------------------------------------------------------------------------------------------
	Sınıfın protected elemanları farklı paketteki diğer sınıflar için türetme (inheritance) söz konusu değilse
	private anlamındadır. Türetme konusu ve protected'ın anlamı ileride ele alınacaktır
----------------------------------------------------------------------------------------------------------------------*/
package test;

public class A {
    protected A() {}
    protected int a;
    protected void foo()
    {

    }
}
package mest;
 üniversite 1’de iken otonom araç projesinde, otonom elektrik süpürgesi yaptım 3 kişi ile.
import test.A;

public class B {
    public void bar()
    {
        A x = new A(); //error

        x.a = 20; //error
        x.foo(); //error
    }
}


/*----------------------------------------------------------------------------------------------------------------------
	Sınıfın no-modifier (hiç bir erişim belirleyici almayan) elemanları aynı paketteki diğer sınıflar için public
	anlamındadır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
	public static void main(String[] args)
	{

	}
}

class B {
	public void bar()
	{
		A x = new A();

		x.a = 20;
		x.foo();
	}
}

class A {
	A() {}
	int a;
	void foo()
	{
		a *= 2;
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	Sınıfın no-modifier (hiç bir erişim belirleyici almayan) elemanları farklı paketteki diğer
	sınıflar için private anlamındadır
----------------------------------------------------------------------------------------------------------------------*/

package test;

public class A {
    A() {}
    int a;
    void foo()
    {

    }
}

package mest;

import test.A;

public class B {
    public void bar()
    {
        A x = new A(); //error

        x.a = 20; //error
        x.foo(); //error
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Erişim belirleyici   Kendi sınıfı  Aynı paketteki sınıflar  Farklı paketteki sınıflar  Türemiş sınıflar
    public                  T               T                           T                       T
    protected               T               T                           F                       T
    no-modifier             T               T                           F                       F
    private                 T               F                           F                       F
----------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------
	23.02.2020
	Aşağıdaki durumlardan en az bir tanesi olduğunda verinin gizlenmesi gerekir:

	1. Sınıf tasarımının ilerleyen versiyonlarında veri elemanlarının isimlerinin hatta türlerinin
	değişmesi durumuna çok sık rastlanmaktadır. Bu durumda değişimden eski kodların etkilenmemesi için
	veri gizlenmelidir.

	2. Bir veri elemanının sınır değerleri olabilir. Sınır değerlerinin dışında değerlerin verilmemesi için veri
	gizlenmelidir.

	3. Bir veri elemanının değeri değiştiğinde başka bir veri elemanının değerinin hesaplanması gerekiyor
	olabilir. Bu durumda da veri gizlenmelidir.

	4. Bir veri elemanı değiştiğinde sınıfın değişen değere göre başka bir iş yapması gerekiyor olabilir. Bu durumda
	da verinin gizlenmesi gerekir.

	Bu durumların dışında (% 3-5 arası) elemanlar public yapılabilir
----------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------
    Bir veri elemanına erişme için kullanılar metotlar "accessors" denir. Gizlenmiş veri elemanlarının değerlerine
    erişmek için yazılan metotlara get metotları (getters) denir. Veri elemanını değiştirmek için kullanılan
    metotlara ise set metotları (setters) denir. Sınıfların get metotları genel olarak get ile başlatılır. Bazı
    ortamlar (framework) bunu default olarak isterler. Sınıfın set metotları da genel olarak set ile başlatılır. Benzer
    şekilde bazı ortamlar default olarak bu ismi kullanırlar.
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        Date birthDate = new Date(10, 9, 1976);

        System.out.printf("%02d/%02d/%04d%n", birthDate.getDay(), birthDate.getMon(), birthDate.getYear());

        birthDate.setDay(11);
        birthDate.setMon(7);
        birthDate.setYear(1983);

        System.out.printf("%02d/%02d/%04d%n", birthDate.getDay(), birthDate.getMon(), birthDate.getYear());
    }
}

class Date {
    private int m_day, m_mon, m_year;

    public Date(int day, int mon, int year)
    {
        //...
        m_day = day;
        m_mon = mon;
        m_year = year;
    }

    public int getDay() {return m_day;}

    public void setDay(int day)
    {
        //...
        m_day = day;
    }

    public int getMon()
    {
        return m_mon;
    }

    public void setMon(int mon)
    {
        //...
        m_mon = mon;
    }

    public int getYear()
    {
        return m_year;
    }

    public void setYear(int year)
    {
        //...
        m_year = year;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    boolean bir eleman için get metotlarında is kullanılması tavsiye edilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        //...
    }
}

class Person {
    private int m_id;
    private String m_name;
    private boolean m_married;

    public int getId()
    {
        return m_id;
    }

    public void setId(int id)
    {
        m_id = id;
    }

    public String getName()
    {
        return m_name;
    }

    public void setName(String name)
    {
        m_name = name;
    }

    public boolean isMarried()
    {
        return m_married;
    }

    public void setMarried(boolean married)
    {
        m_married = married;
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki örnekte Date sınıfının iç yapısı değişmesine rağmen kullanan kodlar (client codes) bundan
    etkilenmemiştir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        Date birthDate = new Date(10, 9, 1976);

        System.out.printf("%02d/%02d/%04d%n", birthDate.getDay(), birthDate.getMon(), birthDate.getYear());

        birthDate.setDay(11);
        birthDate.setMon(7);
        birthDate.setYear(1983);

        System.out.printf("%02d/%02d/%04d%n", birthDate.getDay(), birthDate.getMon(), birthDate.getYear());
    }
}

class Date {
    private String m_date;

    public Date(int day, int mon, int year)
    {
        //...
        m_date = String.format("%02d/%02d/%04d", day, mon, year);
    }

    public int getDay()
    {
        return Integer.parseInt(m_date.substring(0, 2));
    }

    public void setDay(int day)
    {
        //...
        m_date = String.format("%02d/%02d/%04d", day,getMon(), getYear());
    }

    public int getMon()
    {
        return Integer.parseInt(m_date.substring(3, 5));
    }

    public void setMon(int mon)
    {
        //...
        m_date = String.format("%02d/%02d/%04d", getDay(), mon, getYear());
    }

    public int getYear()
    {
        return Integer.parseInt(m_date.substring(6));
    }

    public void setYear(int year)
    {
        //...
        m_date = String.format("%02d/%02d/%04d", getDay(), getMon(), year);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Circle sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.math.geometry.Circle;

class App {
    public static void main(String [] args)
    {
        Circle c = new Circle();

        System.out.printf("Yarıçap:%f%n", c.getRadius());
        System.out.printf("Alan:%f%n", c.getArea());
        System.out.printf("Çevre:%f%n", c.getCircumference());

        c.setRadius(-6.7);

        System.out.printf("Yarıçap:%f%n", c.getRadius());
        System.out.printf("Alan:%f%n", c.getArea());
        System.out.printf("Çevre:%f%n", c.getCircumference());

    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Circle sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.math.geometry;

public class Circle {
    private double m_r;
    private double m_area, m_circumference;

    private void calculate()
    {
        m_area = Math.PI * m_r * m_r;
        m_circumference = 2 * Math.PI * m_r;
    }

    public Circle()
    {}

    public Circle(double r)
    {
        setRadius(r);
    }

    public void setRadius(double r)
    {
        m_r = Math.abs(r);
        calculate();
    }

    public double getRadius() {return m_r;}
    public double getArea() {return m_area;}
    public double getCircumference() {return m_circumference;}
}


/*----------------------------------------------------------------------------------------------------------------------
    Circle sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.math.geometry.Circle;

class App {
    public static void main(String [] args)
    {
        Circle c = new Circle();

        System.out.printf("Yarıçap:%f%n", c.getRadius());
        System.out.printf("Alan:%f%n", c.getArea());
        System.out.printf("Çevre:%f%n", c.getCircumference());

        c.setRadius(-6.7);

        System.out.printf("Yarıçap:%f%n", c.getRadius());
        System.out.printf("Alan:%f%n", c.getArea());
        System.out.printf("Çevre:%f%n", c.getCircumference());

    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Circle sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.math.geometry;

public class Circle {
    private double m_r;

    public Circle()
    {}

    public Circle(double r)
    {
        setRadius(r);
    }

    public void setRadius(double r)
    {
        m_r = Math.abs(r);
    }

    public double getRadius() {return m_r;}
    public double getArea() {return Math.PI * m_r * m_r;}
    public double getCircumference() {return 2  * Math.PI * m_r;}
}


/*----------------------------------------------------------------------------------------------------------------------
	29.02.2020
	Complex sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.math;

import static java.lang.Math.sqrt;

public class Complex {
	private static Complex plus(double a1, double b1, double a2, double b2)
	{
		return new Complex(a1 + a2, b1 + b2);
	}

	private static Complex minus(double a1, double b1, double a2, double b2)
	{
		return plus(a1, b1, -a2, -b2);
	}

	public double a, b;

	public Complex() {}

	public Complex(double re)
	{
		a = re;
	}

	public Complex(double re, double im)
	{
		a = re;
		b = im;
	}

	public double getNorm() {return sqrt(a * a + b * b);}

	public Complex getConjugate() {return new Complex(a, -b);}

	//plus methods

	public static Complex plus(double val, Complex z)
	{
		return plus(val, 0, z.a, z.b);
	}

	public Complex plus(Complex z)
	{
		return plus(a, b, z.a, z.b);
	}

	public Complex plus(double val)
	{
		return plus(a, b, val, 0);
	}

	//minus methods

	public static Complex minus(double val, Complex z)
	{
		return minus(val, 0, z.a, z.b);
	}

	public Complex minus(Complex z)
	{
		return minus(a, b, z.a, z.b);
	}

	public Complex minus(double val)
	{
		return minus(a, b, val, 0);
	}

	//inc methods

	public void inc()
	{
		inc(1);
	}

	public void inc(int amount)
	{
		a += amount;
	}

	//dec methods

	public void dec()
	{
		dec(1);
	}

	public void dec(int amount)
	{
		inc(-amount);
	}

	public String toString()
	{
		return String.format("|%.2f + %.2fi|=%f", a, b, getNorm());
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	NumberUtil sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.util;

import java.util.Random;

public class NumberUtil {
	private static String [] ms_onesTR = {"", "bir", "iki", "üç", "dört", "beş", "altı", "yedi", "sekiz", "dokuz"};
	private static String [] ms_tensTR = {"", "on", "yirmi", "otuz", "kırk", "elli", "altmış", "yetmiş", "seksen", "doksan"};

	private static String numToTextMax3DigitsTR(int val)
	{
		if (val == 0)
			return "sıfır";

		String str = val < 0 ? "eksi" : "";

		val = Math.abs(val);

		int a = val / 100;
		int b = val / 10 % 10;
		int c = val % 10;

		if (a != 0) {
			if (a != 1)
				str += ms_onesTR[a];
			str += "yüz";
		}

		if (b != 0)
			str += ms_tensTR[b];

		if (c != 0)
			str += ms_onesTR[c];

		return str;
	}

	private static int [] getDigits(int n, int val)
	{
		val = Math.abs(val);
		int len = val == 0 ? 1 : (int)Math.log10(val) / n + 1;
		int [] a = new int[len];

		for (int i = len - 1; i >= 0; --i) {
			int pow = (int)Math.pow(10, n);

			a[i] = val % pow;
			val /= pow;
		}

		return a;
	}

	public static long factorial(int n)
	{
		if (n < 0)
			return -1;

		long result = 1;

		for (int i = 2; i <= n; ++i)
			result *= i;

		return result;
	}

	public static int [] getDigits(int val)
	{
		return getDigits(1, val);
	}

	public static int [] getDigitsInThree(int val)
	{
		return getDigits(3, val);
	}

	public static int getDigitsCount(int val)
	{
		return val == 0 ? 1 : (int)Math.log10(Math.abs(val)) + 1;
	}

	public static int getDigitsSum(int val)
	{
		int sum = 0;

		while (val != 0) {
			sum += val % 10;
			val /= 10;
		}

		return Math.abs(sum);
	}

	public static int getNextFibonacciNumber(int val)
	{
		if (val < 0)
			return 0;

		int prev1 = 0, prev2 = 1, number = 0;

		for (;;) {
			number = prev1 + prev2;
			if (number > val)
				return number;

			prev1 = prev2;
			prev2 = number;
		}
	}

	public static int getFibonnaciNumber(int n)
	{
		if (n <= 0)
			return -1;

		if (n <= 2)
			return n - 1;

		int prev1 = 0, prev2 = 1, val = 0;

		for (int i = 2; i < n; ++i) {
			val = prev1 + prev2;
			prev1 = prev2;
			prev2 = val;
		}

		return val;
	}

	public static int getPrime(int n)
	{
		if (n <= 0)
			return -1;

		int count = 0, val = 0;

		for (int i = 2; count < n; ++i) {
			if (isPrime(i)) {
				++count;
				val = i;
			}
		}

		return val;
	}

	public static int getRandom4DigitsNumber()
	{
		return getRandom4DigitsNumber(new Random());
	}

	public static int getRandom4DigitsNumber(Random r)
	{
		boolean [] flags = new boolean[10];
		int result = 0;
		int val = r.nextInt(9) + 1;

		flags[val] = true;
		result = val * 1000;

		for (int i = 3; i >= 1; --i) {
			for (;;) {
				val = r.nextInt(10);
				if (!flags[val])
					break;
			}
			result += val * (int)Math.pow(10, i - 1);
			flags[val] = true;
		}

		return result;
	}

	public static int getReverse(int val)
	{
		int rev = 0;

		while (val != 0) {
			rev = rev * 10 + val % 10;
			val /= 10;
		}

		return rev;
	}

	public static int getSum(int val)
	{
		int n = getDigitsCount(val);

		int sum = 0;

		while (val != 0) {
			sum += pow(val % 10, n);
			val /= 10;
		}

		return sum;
	}

	public static boolean isArmstrong(int val)
	{
		if (val < 0)
			return false;

		return val == getSum(val);
	}

	public static boolean isEven(int val)
	{
		return val % 2 == 0;
	}

	public static boolean isNegative(int val)
	{
		return val < 0;
	}

	public static boolean isOdd(int val)
	{
		return !isEven(val);
	}

	public static boolean isPalindrome(int val)
	{
		return getReverse(val) == val;
	}

	public static boolean isPrime(int val)
	{
		if (val <= 1)
			return false;

		if (val % 2 == 0)
			return val == 2;

		if (val % 3 == 0)
			return val == 3;

		if (val % 5 == 0)
			return val == 5;

		if (val % 7 == 0)
			return val == 7;

		for (int i = 11; i * i <= val; i += 2)
			if (val % i == 0)
				return false;

		return true;
	}

	public static boolean isPositive(int val)
	{
		return val > 0;
	}

	public static int pow(int a, int b)
	{
		b = Math.abs(b);
		int result = 1;

		while (b-- > 0)
			result *= a;

		return result;
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	StringUtil sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.util;

import java.util.Random;

public class StringUtil {
	private static String ms_alphabetTR = "abcçdefgğhıijklmnoöprsştuüvyz";
	private static String ms_alphabetEN = "abcdefghijklmnopqrstuwvxyz";

	public static String capitalize(String str)
	{
		str = str.trim();

		return !str.isEmpty() ? Character.toUpperCase(str.charAt(0)) + str.substring(1).toLowerCase() : "";
	}

	public static int getCount(String s1, String s2)
	{
		int count = 0;

		for (int index = -1; (index = s1.indexOf(s2, index + 1)) != -1; ++count)
				;

		return count;
	}

	public static String generateRandomPassword(Random r, int n)
	{
		String chars = "abcçdefgğhıijklmnoöpqrsştuüwxvyz0123456789.:?-_";

		char [] c = new char[n];

		for (int i = 0; i < n; ++i)  {
			char ch = chars.charAt(r.nextInt(chars.length()));

			c[i] = r.nextBoolean() ? Character.toUpperCase(ch) : ch;
		}

		return new String(c);
	}

	public static String generateRandomPassword(int n)
	{
		return generateRandomPassword(new java.util.Random(), n);
	}

	public static String getRandomString(Random r, int n, String str)
	{
		char [] c = new char[n];

		for (int i = 0; i < n; ++i)
			c[i] = str.charAt(r.nextInt(str.length()));

		return new String(c);
	}

	public static String getRandomText(Random r, int n, String str)
	{
		char [] c = new char[n];

		for (int i = 0; i < n; ++i) {
			char ch = str.charAt(r.nextInt(str.length()));

			c[i] = r.nextBoolean() ? Character.toUpperCase(ch) : ch;
		}

		return new String(c);
	}

	public static String getRandomTextEN(java.util.Random r, int n)
	{
		return getRandomText(r, n, ms_alphabetEN);
	}

	public static String getRandomTextEN(int n)
	{
		return getRandomTextEN(new java.util.Random(), n);
	}

	public static String getRandomTextTR(java.util.Random r, int n)
	{
		return getRandomText(r, n, ms_alphabetTR);
	}

	public static String getRandomTextTR(int n)
	{
		return getRandomTextTR(new java.util.Random(), n);
	}

	public static boolean isPalindrome(String s)
	{
		s = removeNonalphabetics(s);

		int len = s.length();
		int halfLen = len / 2;

		for (int i = 0; i < halfLen; ++i) {
			char ch1 = Character.toLowerCase(s.charAt(i));
			char ch2 = Character.toLowerCase(s.charAt(len - 1 - i));

			if (ch1 != ch2)
				return false;
		}

		return true;
	}

	public static boolean isPangram(String s, String alphabet)
	{
		int len = alphabet.length();

		for (int i = 0; i < len; ++i)
			if (!s.contains(alphabet.charAt(i) + ""))
				return false;

		return true;
	}

	public static boolean isPangramTR(String s)
	{
		return isPangram(s.toLowerCase(), ms_alphabetTR);
	}

	public static boolean isPangramEN(String s)
	{
		return isPangram(s.toLowerCase(), ms_alphabetEN);
	}

	public static String padLeft(String s, int len, char ch)
	{
		if (len <= s.length())
			return s;

		return repeat(len - s.length(), ch) + s;
	}

	public static String padLeft(String s, int len)
	{
		return padLeft(s, len, ' ');
	}

	public static String padRight(String s, int len, char ch)
	{
		if (len <= s.length())
			return s;

		return s + repeat(len - s.length(), ch);
	}

	public static String padRight(String s, int len)
	{
		return padRight(s, len, ' ');
	}

	public static String removeNonalphabetics(String s)
	{
		String str = "";

		int len = s.length();

		for (int i = 0; i < len; ++i) {
			char ch = s.charAt(i);

			if (Character.isLetter(ch))
				str += ch;
		}

		return str;
	}

	public static String repeat(int n, char ch)
	{
		char [] c = new char[n];

		while (n-- > 0)
			c[n] += ch;

		return new String(c);
	}

	public static String reverse(String str)
	{
		char [] c = str.toCharArray();

		ArrayUtil.reverse(c);

		return new String(c);
	}


	public static String trimEnd(String s)
	{
		int i;

		for (i = s.length() - 1; i >= 0 && Character.isWhitespace(s.charAt(i)); --i)
			;

		return s.substring(0, i + 1);
	}

	public static String trimStart(String s)
	{
		int i;

		int len = s.length();

		for (i = 0; i < len && Character.isWhitespace(s.charAt(i)); ++i)
			;

		return s.substring(i);
	}
}


/*----------------------------------------------------------------------------------------------------------------------
    CommandPromptApp sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.samples.commandprompt.CommandPromptApp;

class App {
    public static void main(String [] args)
    {
        CommandPromptApp app = new CommandPromptApp("CSD");

        app.run();
    }
}

package org.csystem.samples.commandprompt;

import org.csystem.util.StringUtil;

import java.util.Scanner;

public class CommandPromptApp {
    private String m_prompt;
    private String [] m_commands = {"length", "reverse", "upper", "lower", "change"};

    private int getCommandIndex(String cmdStr)
    {
        if (cmdStr.length() < 3)
            return -1;

        for (int i = 0; i < m_commands.length; ++i)
            if (m_commands[i].startsWith(cmdStr))
                return i;

        return -1;
    }

    private void lengthProc(String [] commandsInfo)
    {
        System.out.println(commandsInfo[1].length());
    }

    private void reverseProc(String [] commandsInfo)
    {
        System.out.println(StringUtil.reverse(commandsInfo[1]));
    }

    private void upperProc(String [] commandsInfo)
    {
        System.out.println(commandsInfo[1].toUpperCase());
    }

    private void lowerProc(String [] commandsInfo)
    {
        System.out.println(commandsInfo[1].toLowerCase());
    }

    private void changeProc(String [] commandsInfo)
    {
        m_prompt = commandsInfo[1];
    }

    public CommandPromptApp(String p)
    {
        m_prompt = p;
    }

    public void run()
    {
        Scanner kb = new Scanner(System.in);

        for (;;) {
            System.out.print(m_prompt + ">");
            String cmdStr = kb.nextLine().trim();

            String [] commandsInfo = cmdStr.split("[ \t]+");

            if (commandsInfo.length == 1 && commandsInfo[0].equals("quit"))
                break;

            int index = getCommandIndex(commandsInfo[0]);

            switch (index) {
                case 0:
                    lengthProc(commandsInfo);
                    break;
                case 1:
                    reverseProc(commandsInfo);
                    break;
                case 2:
                    upperProc(commandsInfo);
                    break;
                case 3:
                    lowerProc(commandsInfo);
                    break;
                case 4:
                    changeProc(commandsInfo);
                    break;
                default:
                    System.out.println("Geçersiz komut");
            }
        }

        System.out.println("Tekrar yapınız!!!");
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    ExamSimulation sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.samples.examsimulation.ExamSimulation;

class App {
    public static void main(String [] args)
    {
        ExamSimulation examSimulation = new ExamSimulation("Matematik");

        examSimulation.run();
        examSimulation.report();
    }
}

package org.csystem.samples.examsimulation;

import org.csystem.util.ArrayUtil;

import java.util.Random;
import java.util.Scanner;

public class ExamSimulation {
    private String m_lectureName;
    private int [][] m_grades;
    private double [] m_averages;
    private double m_average;

    private Scanner m_kb;

    private void getGradesInfo()
    {
        System.out.print("Şube sayısını giriniz:");
        m_grades = new int[Integer.parseInt(m_kb.nextLine())][];
        m_averages = new double[m_grades.length];
    }

    private void fillGrades()
    {
        Random r = new Random();

        for (int i = 0; i < m_grades.length; ++i) {
            System.out.printf("%d. şube öğrenci sayısını giriniz:", i + 1);
            int n = Integer.parseInt(m_kb.nextLine());
            m_grades[i] = ArrayUtil.getRandomArray(r, n, 0, 101);
        }
    }

    private void calculateAverages()
    {
        int totalGrades = 0, numberOfStudents = 0;


        for (int i = 0; i < m_grades.length; ++i) {
            int sumOfGrades = ArrayUtil.sum(m_grades[i]);

            totalGrades += sumOfGrades;
            numberOfStudents += m_grades[i].length;
            m_averages[i] = (double)sumOfGrades / m_grades[i].length;
        }

        m_average = (double)totalGrades / numberOfStudents;
    }

    public ExamSimulation(String name)
    {
        m_lectureName = name;
        m_kb = new Scanner(System.in);
    }


    public double[] getAverages()
    {
        return m_averages;
    }

    public double getAverage()
    {
        return m_average;
    }

    public String getLectureName()
    {
        return m_lectureName;
    }

    public void setLectureName(String lectureName)
    {
        m_lectureName = lectureName;
    }

    public void displayGrades()
    {
        ArrayUtil.display(m_grades, 2);

        System.out.println("***************************");
    }

    public void report()
    {
        System.out.printf("%s dersi sınav raporu:%n", m_lectureName);
        for (int i = 0; i < m_grades.length; ++i) {
            System.out.printf("%d.sınıf:", i + 1);
            for (int k = 0; k < m_grades[i].length; ++k)
                System.out.printf("%02d ", m_grades[i][k]);

            System.out.printf("Ortalama:%f%n", m_averages[i]);
        }

        System.out.printf("Okul Ortalaması:%f%n", m_average);
    }

    public void run()
    {
        getGradesInfo();
        fillGrades();
        calculateAverages();
    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Lottary sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.samples.lottaryapp;

import java.util.Random;

public class Lottary {
    private Random m_random;

    private boolean[] getFlags()
    {
        boolean [] flags = new boolean[50];
        int val;

        for (int i = 0; i < 6; ++i) {
            for (;;) {
                val = m_random.nextInt(49) + 1;
                if (!flags[val])
                    break;
            }
            flags[val] = true;
        }
        return flags;
    }

    private int [] getNumbers(boolean [] flags)
    {
        int [] numbers = new int[6];
        int index = 0;

        for (int i = 1; i < 50; ++i)
            if (flags[i])
                numbers[index++] = i;

        return numbers;
    }

    private int [] getNumbers()
    {
        return getNumbers(getFlags());
    }

    public Lottary()
    {
        m_random = new Random();
    }

    public int[][] getColums(int n)
    {
        int [][] columns = new int[n][];

        for (int i = 0; i < n; ++i)
            columns[i] = getNumbers();

        return columns;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    ctor private olabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        Sample s = new Sample(); //error

    }
}

class Sample {
    private Sample() {}
}


/*----------------------------------------------------------------------------------------------------------------------
    Math sınıfının ctor elemanı sınıfın tüm elemanları static olduğundan private yapılmıştır. Bu tüm
    bu tarz sınıflar için yapılmalıdır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        Math m = new Math();

    }
}

/*----------------------------------------------------------------------------------------------------------------------
    ArrayUtil sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.util;

import java.util.Random;

public class ArrayUtil {
    private ArrayUtil() {}
    public static double average(int [] a)
    {
        return  (double)sum(a) / a.length;
    }

    public static void bubbleSort(int [] a)
    {
        bubbleSort(a, false);
    }

    public static void bubbleSort(int [] a, boolean desc)
    {
        if (desc) {
            for (int i = 0; i < a.length - 1; ++i) {
                for (int k = 0; k < a.length - 1 - i; ++k)
                    if (a[k] < a[k + 1]) {
                        int temp = a[k];
                        a[k] = a[k + 1];
                        a[k + 1] = temp;
                    }
            }
        }
        else {
            for (int i = 0; i < a.length - 1; ++i) {
                for (int k = 0; k < a.length - 1 - i; ++k)
                    if (a[k] > a[k + 1]) {
                        int temp = a[k];
                        a[k] = a[k + 1];
                        a[k + 1] = temp;
                    }
            }
        }
    }

    public static void display(int [] a)
    {
        display(a, 1);
    }

    public static void display(int [] a, int n)
    {
        String fmt = String.format("%%0%dd ", n);

        for (int val : a)
            System.out.printf(fmt, val);

        System.out.println();
    }

    public static void display(int [][] a)
    {
        display(a, 1);
    }
    public static void display(int [][] a, int n)
    {
        for (int [] array : a)
            display(array, n);
    }

    public static void drawHistogram(int [] hist, int n, char ch)
    {
        int maxVal = max(hist);

        for (int val : hist) {
            int nCh = val * n / maxVal;

            while (nCh-- > 0)
                System.out.print(ch);

            System.out.println();
        }
    }

    public static int [] getHistogramData(int [] a, int n) //[0, n]
    {
        int [] counts = new int[n + 1];

        for (int val : a)
            ++counts[val];

        return counts;
    }

    public static int[] getRandomArray(int n, int min, int max) //[min, max)
    {
        return getRandomArray(new Random(), n, min, max);
    }

    public static int[] getRandomArray(Random r, int n, int min, int max) //[min, max)
    {
        int [] a = new int[n];

        for (int i = 0; i < n; ++i)
            a[i] = r.nextInt(max - min) + min;

        return a;
    }

    public static int[][] getRandomMatrix(int m, int n, int min, int max) //[min, max)
    {
        return getRandomMatrix(new Random(), m, n, min, max);
    }

    public static int[][] getRandomMatrix(Random r, int m, int n, int min, int max) //[min, max)
    {
        int [][] a = new int[m][];

        for (int i = 0; i < m; ++i)
            a[i] = getRandomArray(r, n, min, max);

        return a;
    }

    public static int [][] getRandomSquareMatrix(int n, int min, int max)
    {
        return getRandomSquareMatrix(new Random(), n, min, max);
    }

    public static int [][] getRandomSquareMatrix(Random r, int n, int min, int max)
    {
        return getRandomMatrix(r, n, n, min, max);
    }

    public static int [][] getTransposedMatrix(int [][] a)
    {
        if (!isMatrix(a))
            return new int[0][];

        int row = a[0].length;
        int col = a.length;
        int [][] t = new int[row][col];

        for (int i = 0; i < row; ++i)
            for (int j = 0; j < col; ++j)
                t[i][j] = a[j][i];

        return t;
    }

    public static boolean isMatrix(int [][] a)
    {
        int col = a[0].length;

        for (int i = 1; i < a.length; ++i)
            if (a[i].length != col)
                return false;

        return true;
    }

    public static boolean isSquareMatrix(int [][] a)
    {
        return isMatrix(a) && a.length == a[0].length;
    }

    public static String join(String [] s, char delim)
    {
        return join(s, delim + "");
    }

    public static  String join(String [] s, String delim)
    {
        String str = "";

        for (String sval : s)
            str += sval + delim;

        return str.substring(0, str.length() - delim.length());
    }

    public static int max(int [] a)
    {
        int result = a[0];

        for (int i = 1; i < a.length; ++i)
            result = Math.max(result, a[i]);

        return result;
    }

    public static int min(int [] a)
    {
        int result = a[0];

        for (int i = 1; i < a.length; ++i)
            result = Math.min(result, a[i]);

        return result;
    }

    public static void reverse(int [] a) //by Emre Onsur
    {
        int temp;
        int halfLen = a.length / 2;

        for(int i = 0; i < halfLen; ++i) {
            temp = a[i];
            a[i] = a[a.length - 1 - i];
            a[a.length - 1 - i] = temp;
        }
    }

    public static void reverse(char [] a)
    {
        char temp;
        int halfLen = a.length / 2;

        for(int i = 0; i < halfLen; ++i) {
            temp = a[i];
            a[i] = a[a.length - 1 - i];
            a[a.length - 1 - i] = temp;
        }
    }

    public static int sum(int [] a)
    {
        int result = 0;

        for (int val : a)
            result += val;

        return result;
    }

    public static int sumDiagonal(int [][] a)
    {
        //...
        int sum = 0;

        for (int i = 0; i < a.length; ++i)
            sum += a[i][i];

        return sum;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	NumberUtil sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.util;

import java.util.Random;

public class NumberUtil {
	private static String [] ms_onesTR = {"", "bir", "iki", "üç", "dört", "beş", "altı", "yedi", "sekiz", "dokuz"};
	private static String [] ms_tensTR = {"", "on", "yirmi", "otuz", "kırk", "elli", "altmış", "yetmiş", "seksen", "doksan"};

	private NumberUtil() {}
	private static String numToTextMax3DigitsTR(int val)
	{
		if (val == 0)
			return "sıfır";

		String str = val < 0 ? "eksi" : "";

		val = Math.abs(val);

		int a = val / 100;
		int b = val / 10 % 10;
		int c = val % 10;

		if (a != 0) {
			if (a != 1)
				str += ms_onesTR[a];
			str += "yüz";
		}

		if (b != 0)
			str += ms_tensTR[b];

		if (c != 0)
			str += ms_onesTR[c];

		return str;
	}

	private static int [] getDigits(int n, int val)
	{
		val = Math.abs(val);
		int len = val == 0 ? 1 : (int)Math.log10(val) / n + 1;
		int [] a = new int[len];

		for (int i = len - 1; i >= 0; --i) {
			int pow = (int)Math.pow(10, n);

			a[i] = val % pow;
			val /= pow;
		}

		return a;
	}

	public static long factorial(int n)
	{
		if (n < 0)
			return -1;

		long result = 1;

		for (int i = 2; i <= n; ++i)
			result *= i;

		return result;
	}

	public static int [] getDigits(int val)
	{
		return getDigits(1, val);
	}

	public static int [] getDigitsInThree(int val)
	{
		return getDigits(3, val);
	}

	public static int getDigitsCount(int val)
	{
		return val == 0 ? 1 : (int)Math.log10(Math.abs(val)) + 1;
	}

	public static int getDigitsSum(int val)
	{
		int sum = 0;

		while (val != 0) {
			sum += val % 10;
			val /= 10;
		}

		return Math.abs(sum);
	}

	public static int getNextFibonacciNumber(int val)
	{
		if (val < 0)
			return 0;

		int prev1 = 0, prev2 = 1, number = 0;

		for (;;) {
			number = prev1 + prev2;
			if (number > val)
				return number;

			prev1 = prev2;
			prev2 = number;
		}
	}

	public static int getFibonnaciNumber(int n)
	{
		if (n <= 0)
			return -1;

		if (n <= 2)
			return n - 1;

		int prev1 = 0, prev2 = 1, val = 0;

		for (int i = 2; i < n; ++i) {
			val = prev1 + prev2;
			prev1 = prev2;
			prev2 = val;
		}

		return val;
	}

	public static int getPrime(int n)
	{
		if (n <= 0)
			return -1;

		int count = 0, val = 0;

		for (int i = 2; count < n; ++i) {
			if (isPrime(i)) {
				++count;
				val = i;
			}
		}

		return val;
	}

	public static int getRandom4DigitsNumber()
	{
		return getRandom4DigitsNumber(new Random());
	}

	public static int getRandom4DigitsNumber(Random r)
	{
		boolean [] flags = new boolean[10];
		int result = 0;
		int val = r.nextInt(9) + 1;

		flags[val] = true;
		result = val * 1000;

		for (int i = 3; i >= 1; --i) {
			for (;;) {
				val = r.nextInt(10);
				if (!flags[val])
					break;
			}
			result += val * (int)Math.pow(10, i - 1);
			flags[val] = true;
		}

		return result;
	}

	public static int getReverse(int val)
	{
		int rev = 0;

		while (val != 0) {
			rev = rev * 10 + val % 10;
			val /= 10;
		}

		return rev;
	}

	public static int getSum(int val)
	{
		int n = getDigitsCount(val);

		int sum = 0;

		while (val != 0) {
			sum += pow(val % 10, n);
			val /= 10;
		}

		return sum;
	}

	public static boolean isArmstrong(int val)
	{
		if (val < 0)
			return false;

		return val == getSum(val);
	}

	public static boolean isEven(int val)
	{
		return val % 2 == 0;
	}

	public static boolean isNegative(int val)
	{
		return val < 0;
	}

	public static boolean isOdd(int val)
	{
		return !isEven(val);
	}

	public static boolean isPalindrome(int val)
	{
		return getReverse(val) == val;
	}

	public static boolean isPrime(int val)
	{
		if (val <= 1)
			return false;

		if (val % 2 == 0)
			return val == 2;

		if (val % 3 == 0)
			return val == 3;

		if (val % 5 == 0)
			return val == 5;

		if (val % 7 == 0)
			return val == 7;

		for (int i = 11; i * i <= val; i += 2)
			if (val % i == 0)
				return false;

		return true;
	}

	public static boolean isPositive(int val)
	{
		return val > 0;
	}

	public static int pow(int a, int b)
	{
		b = Math.abs(b);
		int result = 1;

		while (b-- > 0)
			result *= a;

		return result;
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	StringUtil sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.util;

import java.util.Random;

public class StringUtil {
	private static String ms_alphabetTR = "abcçdefgğhıijklmnoöprsştuüvyz";
	private static String ms_alphabetEN = "abcdefghijklmnopqrstuwvxyz";

	private StringUtil() {}
	public static String capitalize(String str)
	{
		str = str.trim();

		return !str.isEmpty() ? Character.toUpperCase(str.charAt(0)) + str.substring(1).toLowerCase() : "";
	}

	public static int getCount(String s1, String s2)
	{
		int count = 0;

		for (int index = -1; (index = s1.indexOf(s2, index + 1)) != -1; ++count)
				;

		return count;
	}

	public static String generateRandomPassword(Random r, int n)
	{
		String chars = "abcçdefgğhıijklmnoöpqrsştuüwxvyz0123456789.:?-_";

		char [] c = new char[n];

		for (int i = 0; i < n; ++i)  {
			char ch = chars.charAt(r.nextInt(chars.length()));

			c[i] = r.nextBoolean() ? Character.toUpperCase(ch) : ch;
		}

		return new String(c);
	}

	public static String generateRandomPassword(int n)
	{
		return generateRandomPassword(new java.util.Random(), n);
	}

	public static String getRandomString(Random r, int n, String str)
	{
		char [] c = new char[n];

		for (int i = 0; i < n; ++i)
			c[i] = str.charAt(r.nextInt(str.length()));

		return new String(c);
	}

	public static String getRandomText(Random r, int n, String str)
	{
		char [] c = new char[n];

		for (int i = 0; i < n; ++i) {
			char ch = str.charAt(r.nextInt(str.length()));

			c[i] = r.nextBoolean() ? Character.toUpperCase(ch) : ch;
		}

		return new String(c);
	}

	public static String getRandomTextEN(java.util.Random r, int n)
	{
		return getRandomText(r, n, ms_alphabetEN);
	}

	public static String getRandomTextEN(int n)
	{
		return getRandomTextEN(new java.util.Random(), n);
	}

	public static String getRandomTextTR(java.util.Random r, int n)
	{
		return getRandomText(r, n, ms_alphabetTR);
	}

	public static String getRandomTextTR(int n)
	{
		return getRandomTextTR(new java.util.Random(), n);
	}

	public static boolean isPalindrome(String s)
	{
		s = removeNonalphabetics(s);

		int len = s.length();
		int halfLen = len / 2;

		for (int i = 0; i < halfLen; ++i) {
			char ch1 = Character.toLowerCase(s.charAt(i));
			char ch2 = Character.toLowerCase(s.charAt(len - 1 - i));

			if (ch1 != ch2)
				return false;
		}

		return true;
	}

	public static boolean isPangram(String s, String alphabet)
	{
		int len = alphabet.length();

		for (int i = 0; i < len; ++i)
			if (!s.contains(alphabet.charAt(i) + ""))
				return false;

		return true;
	}

	public static boolean isPangramTR(String s)
	{
		return isPangram(s.toLowerCase(), ms_alphabetTR);
	}

	public static boolean isPangramEN(String s)
	{
		return isPangram(s.toLowerCase(), ms_alphabetEN);
	}

	public static String padLeft(String s, int len, char ch)
	{
		if (len <= s.length())
			return s;

		return repeat(len - s.length(), ch) + s;
	}

	public static String padLeft(String s, int len)
	{
		return padLeft(s, len, ' ');
	}

	public static String padRight(String s, int len, char ch)
	{
		if (len <= s.length())
			return s;

		return s + repeat(len - s.length(), ch);
	}

	public static String padRight(String s, int len)
	{
		return padRight(s, len, ' ');
	}

	public static String removeNonalphabetics(String s)
	{
		String str = "";

		int len = s.length();

		for (int i = 0; i < len; ++i) {
			char ch = s.charAt(i);

			if (Character.isLetter(ch))
				str += ch;
		}

		return str;
	}

	public static String repeat(int n, char ch)
	{
		char [] c = new char[n];

		while (n-- > 0)
			c[n] += ch;

		return new String(c);
	}

	public static String reverse(String str)
	{
		char [] c = str.toCharArray();

		ArrayUtil.reverse(c);

		return new String(c);
	}


	public static String trimEnd(String s)
	{
		int i;

		for (i = s.length() - 1; i >= 0 && Character.isWhitespace(s.charAt(i)); --i)
			;

		return s.substring(0, i + 1);
	}

	public static String trimStart(String s)
	{
		int i;

		int len = s.length();

		for (i = 0; i < len && Character.isWhitespace(s.charAt(i)); ++i)
			;

		return s.substring(i);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
    Singleton kalıbının bir implementasyonu (lazy implementation)
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        Singleton s = Singleton.getInstance();
        Singleton k = Singleton.getInstance();

        System.out.println(k == s);
    }
}

class Singleton {
    //...
    private static Singleton ms_instance;

    private Singleton() {}

    public static Singleton getInstance()
    {
        if (ms_instance == null)
            ms_instance = new Singleton();

        return ms_instance;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Time sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.datetime.Time;

class App {
    public static void main(String [] args)
    {
        Time time = new Time(23, 3, 45, 4);

        System.out.println(time.toString());
        System.out.println(time.toLongTimeString());
        System.out.println(time.toShortTimeString());
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Time sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.datetime.Time;

class App {
    public static void main(String [] args)
    {
        for (;;) {
            Time now = new Time();

            System.out.printf("%s\r", now.toString());
        }
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Time sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.datetime.Time;

class App {
    public static void main(String [] args)
    {
        for (;;) {
            Time now = new Time();

            System.out.printf("%s\r", now.toLongTimeString());
        }
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    01.03.2020
    Time sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.datetime.Time;

class App {
    public static void main(String [] args)
    {
        System.out.println(Time.randomTime().toLongTimeString());
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Time sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.util.datetime;

import java.util.Calendar;
import java.util.Random;

public class Time {
    private int m_hour, m_minute, m_second, m_millisecond;

    private static void doWorkForException(String msg)
    {
        System.out.println(msg);
        System.exit(-1); //exception işlemlerine kadar sabredin
    }

    private static boolean isValidForBounds(int val, int min, int max)
    {
        return min <= val && val <= max;
    }

    private static boolean isValidForTime(int hour, int minute, int second, int millisecond)
    {
        return isValidForHour(hour) && isValidForMinute(minute) && isValidForSecond(second)
                && isValidForMillisecond(millisecond);
    }

    private static boolean isValidForHour(int val)
    {
        return isValidForBounds(val, 0, 23);
    }

    private static boolean isValidForMinute(int val)
    {
        return isValidForBounds(val, 0, 59);
    }

    private static boolean isValidForSecond(int val)
    {
        return isValidForBounds(val, 0, 59);
    }

    private static boolean isValidForMillisecond(int val)
    {
        return isValidForBounds(val, 0, 999);
    }

    private static void control(int hour, int minute, int second, int millisecond)
    {
        if (!isValidForTime(hour, minute, second, millisecond))
            doWorkForException("Invalid time");
    }

    private static void controlForHour(int val)
    {
        if (!isValidForHour(val))
            doWorkForException("Invalid hour");
    }

    private static void controlForMinute(int val)
    {
        if (!isValidForMinute(val))
            doWorkForException("Invalid minute");
    }

    private static void controlForSecond(int val)
    {
        if (!isValidForSecond(val))
            doWorkForException("Invalid second");
    }

    private static void controlForMillisecond(int val)
    {
        if (!isValidForMillisecond(val))
            doWorkForException("Invalid millisecond");
    }

    private void set(int hour, int minute, int second, int millisecond)
    {
        m_hour = hour;
        m_minute = minute;
        m_second = second;
        m_millisecond = millisecond;
    }

    public static Time randomTime()
    {
        return randomTime(new Random());
    }

    public static Time randomTime(Random r)
    {
        return new Time(r.nextInt(24), r.nextInt(60), r.nextInt(60), r.nextInt(1000));
    }

    //...

    public Time() //Bu kısmın detayları önemsiz
    {
        Calendar now = Calendar.getInstance();

        set(now.get(Calendar.HOUR_OF_DAY), now.get(Calendar.MINUTE), now.get(Calendar.SECOND), now.get(Calendar.MILLISECOND));
    }

    public Time(int hour, int minute, int second, int millisecond)
    {
        control(hour, minute, second, millisecond);
        set(hour, minute, second, millisecond);
    }

    public void setHour(int hour)
    {
        if (hour == m_hour)
            return;

        controlForHour(hour);
        m_hour = hour;
    }

    public void setMinute(int minute)
    {
        if (minute == m_minute)
            return;

        controlForMinute(minute);
        m_minute = minute;
    }

    public void setSecond(int second)
    {
        if (second == m_second)
            return;

        controlForSecond(second);
        m_second = second;
    }

    public void setMillisecond(int millisecond)
    {
        if (millisecond == m_millisecond)
            return;

        controlForMillisecond(millisecond);
        m_millisecond = millisecond;
    }

    public int getHour()
    {
        return m_hour;
    }

    public int getMinute()
    {
        return m_minute;
    }

    public int getSecond()
    {
        return m_second;
    }

    public int getMillisecond()
    {
        return m_millisecond;
    }

    public String toString()
    {
        return String.format("%s:%02d", toShortTimeString(), m_second);
    }

    public String toShortTimeString()
    {
        return String.format("%02d:%02d", m_hour, m_minute);
    }

    public String toLongTimeString()
    {
        return String.format("%s.%03d", toString(), m_millisecond);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Date sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.datetime.Date;

class App {
    public static void main(String [] args)
    {
        Date d = new Date(1, 3, 2020);

        System.out.println(d.toString('.'));
        System.out.println(d.toStringTR());
        System.out.println(d.toStringEN());

    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Date sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.datetime.Date;

import java.util.Random;

class App {
    public static void main(String [] args)
    {
        Random r = new Random();

        for (int i = 0; i < 5; ++i) {
            Date d = Date.randomDate(r);

            System.out.println(d.toStringTR('.'));
        }
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Date sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.datetime.Date;

import java.util.Random;

class App {
    public static void main(String [] args)
    {
        Random r = new Random();

        for (int i = 0; i < 5; ++i) {
            Date d = Date.randomDate(r, 1900, 2100);

            System.out.println(d.toStringTR('.'));
        }

    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Date sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.util.datetime;

import java.util.Calendar;
import java.util.Random;

public class Date {
    private static int [] ms_daysOfMonths = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
    private static String [] ms_weekDaysTR = {"Pazar", "Pazartesi", "Salı", "Çarşamba", "Perşembe", "Cuma", "Cumartesi"};
    private static String [] ms_weekDaysEN = {"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"};

    private int m_day, m_mon, m_year;
    private int m_dayOfWeek;

    private static int getDayOfWeek(int day, int mon, int year)
    {
        int totalDays = getDayOfYear(day, mon, year);

        for (int y = 1900; y < year; ++y)
            totalDays += isLeapYear(y) ? 366 : 365;

        return totalDays % 7;
    }

    private static int getDayOfYear(int day, int mon, int year)
    {
        int dayOfYear = day;

        for (int m = mon - 1; m >= 1; --m)
            dayOfYear += ms_daysOfMonths[m];

        if (mon > 2 && isLeapYear(year))
            ++dayOfYear;

        return dayOfYear;
    }

    private static boolean isLeapYear(int year)
    {
        return year % 4 == 0 && year % 100 != 0 || year % 400 == 0;
    }

    private static boolean isValidDate(int day, int mon, int year)
    {
        if (day < 1 || day > 31 || mon < 1 || mon > 12)
            return false;

        int days = isLeapYear(year) && mon == 2 ? 29 : ms_daysOfMonths[mon];

        return day <= days;
    }

    private static void doWorkForException(String msg)
    {
        System.out.println(msg);
        System.exit(-1); //exception konusuna kadar sabredin
    }

    private static void control(int day, int mon, int year, String msg)
    {
        if (!isValidDate(day, mon, year))
            doWorkForException(msg);
    }

    private void controlForDay(int day)
    {
        control(day, m_mon, m_year, "Invalid day");
    }

    private void controlForMonValue(int monVal)
    {
        control(m_day, monVal, m_year, "Invalid month");
    }

    private void controlForYear(int year)
    {
        control(m_day, m_mon, year, "Invalid year");
    }

    private void set(int day, int mon, int year)
    {
        m_day = day;
        m_mon = mon;
        m_year = year;
        m_dayOfWeek = getDayOfWeek(m_day, m_mon, m_year);
    }

    public static Date randomDate()
    {
        return randomDate(new Random());
    }

    public static Date randomDate(Random r)
    {
        Date now = new Date();

        return randomDate(r, now.m_year, now.m_year);
    }

    public static Date randomDate(int year)
    {
        return randomDate(new Random(), year);
    }

    public static Date randomDate(Random r, int year)
    {
        return randomDate(r, year, year);
    }
    public static Date randomDate(int minYear, int maxYear)
    {
        return randomDate(new Random(), minYear, maxYear);
    }

    public static Date randomDate(Random r, int minYear, int maxYear)
    {
        int year = r.nextInt(maxYear - minYear + 1) + minYear;
        int mon = r.nextInt(12) + 1;
        int days = isLeapYear(year) && mon == 2 ? 29 : ms_daysOfMonths[mon];
        int day = r.nextInt(days) + 1;

        return new Date(day, mon, year);
    }

    public Date()
    {
        Calendar now = Calendar.getInstance();

        m_day = now.get(Calendar.DAY_OF_MONTH);
        m_mon = now.get(Calendar.MONTH) + 1;
        m_year = now.get(Calendar.YEAR);
    }

    public Date(int day, int mon, int year)
    {
        control(day, mon, year, "Invalid date");
        set(day, mon, year);
    }

    public void setDay(int day)
    {
        if (day == m_day)
            return;

        controlForDay(day);
        set(day, m_mon, m_year);
    }

    public void setMonthValue(int mon)
    {
        if (m_mon == mon)
            return;

        controlForMonValue(mon);
        set(m_day, mon, m_year);
    }

    public void setYear(int year)
    {
        if (m_year == year)
            return;

        controlForYear(year);
        set(m_day, m_mon, year);
    }

    public int getDay()
    {
        return m_day;
    }

    public int getMonthValue()
    {
        return m_mon;
    }

    public int getYear()
    {
        return m_year;
    }

    public int getDayOfWeekValue() {return m_dayOfWeek;}
    public String getDayOfWeekTR() {return ms_weekDaysTR[getDayOfWeekValue()];}
    public String getDayOfWeekEN() {return ms_weekDaysEN[getDayOfWeekValue()];}
    public int getDayOfYear() {return getDayOfYear(m_day, m_mon, m_year);}

    public boolean isLeapYear()
    {
        return isLeapYear(m_year);
    }

    public boolean isWeekend()
    {
        return m_dayOfWeek == 0 || m_dayOfWeek == 6;
    }

    public boolean isWeekday()
    {
        return !isWeekend();
    }

    public String toString(char delim)
    {
        return String.format("%02d%c%02d%c%04d", m_day, delim, m_mon, delim, m_year);
    }

    public String toString()
    {
        return toString('/');
    }

    public String toStringTR()
    {
        return toStringTR('/');
    }

    public String toStringTR(char delim)
    {
        return String.format("%s %s", toString(delim), getDayOfWeekTR());
    }

    public String toStringEN()
    {
        return toStringEN('/');
    }

    public String toStringEN(char delim)
    {
        return String.format("%s %s", toString(delim), getDayOfWeekEN());
    }

    public String toLongDateStringTR()
    {
        //TODO:
        return toStringTR();
    }

    public String toLongDateStringEN()
    {
        //TODO:
        return toStringEN();
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Rational sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.math.Rational;

class App {
    public static void main(String [] args)
    {
        Rational r = new Rational(3, -4);

        System.out.println(r.toString());
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Rational sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.math.Rational;

class App {
    public static void main(String [] args)
    {
        Rational r = new Rational(0, 0);

        System.out.println(r.toString());
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Rational sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.math.Rational;

class App {
    public static void main(String [] args)
    {
        Rational r = new Rational(0, 34);

        System.out.println(r.toString());
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Rational sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.math.Rational;

class App {
    public static void main(String [] args)
    {
        Rational r = new Rational(-12, -6);

        System.out.println(r.toString());
    }
}



/*----------------------------------------------------------------------------------------------------------------------
    07.03.2020
    Rational sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.math.Rational;

class App {
    public static void main(String [] args)
    {
        Rational r = new Rational(0, -6);

        System.out.println(r.toString());

        r.setNumerator(13);

        System.out.println(r.toString());
        r.setDenominator(0);
        System.out.println(r.toString());

    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Rational sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.math.Rational;

class App {
    public static void main(String [] args)
    {
        Rational r = new Rational(3, -4);

        System.out.println(r.toString());
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Rational sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.math.Rational;

class App {
    public static void main(String [] args)
    {
        Rational r = new Rational(34, -7);

        System.out.println(r.toString(10));
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Rational sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.math.Rational;

class App {
    public static void main(String [] args)
    {
        Rational r1 = new Rational(3, -7);
        Rational r2 = new Rational(-6, 5);

        Rational r;

        r = r1.plus(r2);

        System.out.println(r.toString());

        r = r1.plus(3);

        System.out.println(r.toString());

        r = Rational.plus(3, r1);

        System.out.println(r.toString());
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Rational sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.math.Rational;

class App {
    public static void main(String [] args)
    {
        Rational r1 = new Rational(3, 4);
        Rational r2 = new Rational(2, 5);

        Rational r;

        r = r1.minus(r2);

        System.out.println(r.toString());

        r = r1.minus(3);

        System.out.println(r.toString());

        r = Rational.minus(3, r1);

        System.out.println(r.toString());
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Rational sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.math.Rational;

class App {
    public static void main(String [] args)
    {
        Rational r1 = new Rational(3, 4);
        Rational r2 = new Rational(2, 5);

        Rational r;

        r = r1.multiply(r2);

        System.out.println(r.toString());

        r = r1.multiply(3);

        System.out.println(r.toString());

        r = Rational.multiply(3, r1);

        System.out.println(r.toString());
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Rational sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.math.Rational;

class App {
    public static void main(String [] args)
    {
        Rational r1 = new Rational(3, 4);
        Rational r2 = new Rational(2, 5);

        Rational r;

        r = r1.div(r2);

        System.out.println(r.toString());

        r = r1.div(3);

        System.out.println(r.toString());

        r = Rational.div(3, r1);

        System.out.println(r.toString());
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Rational sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.math.Rational;

class App {
    public static void main(String [] args)
    {
        Rational r = new Rational(3, 4);

        r.inc();

        System.out.println(r.toString());

    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Rational sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.math.Rational;

class App {
    public static void main(String [] args)
    {
        Rational r = new Rational(3, 4);

        r.dec();

        System.out.println(r.toString());

    }
}


/*----------------------------------------------------------------------------------------------------------------------
    Rational sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.math.Rational;

class App {
    public static void main(String [] args)
    {
        Rational r = new Rational(-3, 4);

        r.pow(3);

        System.out.println(r.toString());

    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Rational sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.math.Rational;

class App {
    public static void main(String [] args)
    {
        for (int i = 0; i < 50; ++i)
            System.out.println(Rational.randomRational(-10, 100));
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Rational sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.math.Rational;

class App {
    public static void main(String [] args)
    {
        Rational r1 = new Rational(3, 4);
        Rational r2 = new Rational(3, 5);

        System.out.println(r2.compareTo(r1));
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Rational sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.math;

import java.util.Random;

public class Rational {
    private int m_a, m_b;

    private static Rational plus(int a1, int b1, int a2, int b2)
    {
        return new Rational(a1 * b2 + a2 * b1, b1 * b2);
    }

    private static Rational minus(int a1, int b1, int a2, int b2)
    {
        return plus(a1, b1, -a2, b2);
    }

    private static Rational multiply(int a1, int b1, int a2, int b2)
    {
        return new Rational(a1 * a2, b1 * b2);
    }

    private static Rational div(int a1, int b1, int a2, int b2)
    {
        return multiply(a1, b1, b2, a2);
    }

    private static void control(int a, int b)
    {
        if (b == 0) {
            System.out.println(a == 0 ? "Belirsiz" : "Tanımsız");
            System.exit(-1); //exception konusuna sabredin
        }
    }

    private void calibrateSigns()
    {
        if (m_b < 0) {
            m_a *= -1;
            m_b *= -1;
        }
    }

    private void set(int a, int b)
    {
        m_a = a;
        if (m_a == 0) {
            m_b = 1;
            return;
        }

        m_b = b;
        calibrateSigns();
        simplify();
    }

    private void simplify()
    {
        int a = Math.abs(m_a);
        int b = m_b;

        int min = a > b ? b : a;

        for (int i = min; i >= 2; --i) {
            if (a % i == 0 && b % i == 0) {
                m_a /= i;
                m_b /= i;
                break;
            }
        }
    }

    public static Rational randomRational(int min, int max) //[min, max)
    {
        return randomRational(new Random(), min, max);
    }

    public static Rational randomRational(Random r, int min, int max)  //[min, max)
    {
        return new Rational(r.nextInt(max - min) + min, r.nextInt(max - min) + min);
    }

    public Rational()
    {
        m_b = 1;
    }

    public Rational(int a, int b)
    {
        control(a, b);
        set(a, b);
    }

    public void setNumerator(int val)
    {
        if (m_a == val)
            return;

        set(val, m_b);
    }

    public void setDenominator(int val)
    {
        if (m_b == val)
            return;

        control(m_a, val);
        set(m_a, val);
    }

    public int getNumerator()
    {
        return m_a;
    }

    public int getDenominator()
    {
        return m_b;
    }

    public double toDouble()
    {
        return (double)m_a / m_b;
    }

    //plus methods
    public static Rational plus(int val, Rational r)
    {
        return plus(val, 1, r.m_a, r.m_b);
    }

    public Rational plus(Rational r)
    {
        return plus(m_a, m_b, r.m_a, r.m_b);
    }

    public Rational plus(int val)
    {
        return plus(m_a, m_b, val, 1);
    }

    //minus methods
    public static Rational minus(int val, Rational r)
    {
        return minus(val, 1, r.m_a, r.m_b);
    }

    public Rational minus(Rational r)
    {
        return minus(m_a, m_b, r.m_a, r.m_b);
    }

    public Rational minus(int val)
    {
        return minus(m_a, m_b, val, 1);
    }

    //multiply methods
    public static Rational multiply(int val, Rational r)
    {
        return multiply(val, 1, r.m_a, r.m_b);
    }

    public Rational multiply(Rational r)
    {
        return multiply(m_a, m_b, r.m_a, r.m_b);
    }

    public Rational multiply(int val)
    {
        return multiply(m_a, m_b, val, 1);
    }

    //div methods
    public static Rational div(int val, Rational r)
    {
        return div(val, 1, r.m_a, r.m_b);
    }

    public Rational div(Rational r)
    {
        return div(m_a, m_b, r.m_a, r.m_b);
    }

    public Rational div(int val)
    {
        return div(m_a, m_b, val, 1);
    }

    //inc methods
    public void inc()
    {
        inc(1);
    }
    public void inc(int amount)
    {
        m_a += amount * m_b;
    }

    //dec methods
    public void dec()
    {
        dec(1);
    }
    public void dec(int amount)
    {
        inc(-amount);
    }

    //pow method
    public void pow(int n)
    {
        m_a = (int)Math.pow(m_a, n);
        m_b = (int)Math.pow(m_b, n);
    }

    public int compareTo(Rational r)
    {
        return m_a * r.m_b - r.m_a * m_b;
    }

    public String toString()
    {
        return toString(6);
    }

    public String toString(int n)
    {
        String fmt = String.format("%%d / %%d = %%.%df", n);

        return String.format(fmt, m_a, m_b, toDouble());
    }
}

/*----------------------------------------------------------------------------------------------------------------------
   Bir değişken final olarak bildirildiğinde o değişkene faaliyet alanı boyunca bir kez atama yapılabilir.
   İkinci bir atama geçersizdir
----------------------------------------------------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------------------------------------------
   final yerel değişkenler
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        final double PI = 3.14;

        PI = 3.15; //error
    }
}

/*----------------------------------------------------------------------------------------------------------------------
   final yerel değişkenler
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        final double PI;

        PI = 3.14;

        PI = 3.15; //error
    }
}

/*----------------------------------------------------------------------------------------------------------------------
   final yerel değişkenler
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import java.util.Scanner;

class App {
    public static void main(String [] args)
    {
        Scanner kb = new Scanner(System.in);
        System.out.printf("Bir sayı giriniz:");
        final double val = Double.parseDouble(kb.nextLine());

        System.out.printf("val=%f%n", val);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
   final parametre değişkenleri
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        Sample.foo(10);
        Sample.foo(20);
    }
}

class Sample {
    public static void foo(final int a)
    {
        System.out.printf("a=%d%n", a);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
   final veri elemanlarına default değer atanmaz
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {

    }
}

class Sample {
    public final int a; //error
    public static final boolean b;  //error
}

/*----------------------------------------------------------------------------------------------------------------------
   Sınıfın non-static ve final olarak bildirilmiş veri elemanlarına bildirim sırasında değer atanabilir.
   Bu durumda artık sınıfın içerisinde hiç bir yerde başka bir değer atanamaz
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {

    }
}

class Sample {
    public final int a = 10;
    public final boolean b = true;
    public Sample(int x, boolean flag)
    {
        a = x;
        b = flag;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
   Sınıfın non-static ve final olarak bildirilmiş veri elemanlarına bildirim sırasında değer atanmamışsa
   herhengi bir ctor'u içerisinde atanabilir. Bu durumda ctor içerisinde tüm non-static ve final veri elemanlarına
   değer ataması yapılmalıdır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {

    }
}

class Sample {
    public final int a;
    public final boolean b; //error
    public int c;

    public Sample()
    {
        a = 0;
        //b = false;
    }

    public Sample(int x, boolean flag)
    {
        a = x;
        b = flag;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
   Sınıfın static ve final olarak bildirilmiş veri elemanlarına default değer atanmaz
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {

    }
}

class Sample {
    public static final double PI; //error
}

/*----------------------------------------------------------------------------------------------------------------------
   Sınıfın static ve final olarak bildirilmiş veri elemanlarına bildirim sırasında değer atanabilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {

    }
}

class Sample {
    public static final double PI = 3.14;
}


/*----------------------------------------------------------------------------------------------------------------------
   Sınıfın static ve final veri elemanları
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        System.out.println(ChemistryUtil.AVOGADRO_NUMBER);
    }
}

class ChemistryUtil {
    public static final double AVOGADRO_NUMBER = 6.02E23;
    //...
}


/*----------------------------------------------------------------------------------------------------------------------
    08.03.2020
    Singleton kalıbının bir implementasyonu (eager implementation)
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        Singleton s = Singleton.INSTANCE;
        Singleton k = Singleton.INSTANCE;

        System.out.println(k == s);
    }
}

class Singleton {
    //...
    private Singleton() {}

    public static final Singleton INSTANCE = new Singleton();
}


/*----------------------------------------------------------------------------------------------------------------------
    Sınıfın static veri elemanlarının yaratılması
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        Singleton.foo();
    }
}

class Singleton {
    //...
    private Singleton()
    {
        System.out.println("Singleton.Singleton()");
    }

    public static void foo()
    {
        System.out.println("foo");
    }

    public static final Singleton INSTANCE = new Singleton();
}

/*----------------------------------------------------------------------------------------------------------------------
    Date sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.util.datetime;

import java.util.Calendar;
import java.util.Random;

public class Date {
    private static final int [] ms_daysOfMonths = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
    private static final String [] ms_weekDaysTR = {"Pazar", "Pazartesi", "Salı", "Çarşamba", "Perşembe", "Cuma", "Cumartesi"};
    private static final String [] ms_weekDaysEN = {"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"};

    private int m_day, m_mon, m_year;
    private int m_dayOfWeek;

    private static int getDayOfWeek(int day, int mon, int year)
    {
        int totalDays = getDayOfYear(day, mon, year);

        for (int y = 1900; y < year; ++y)
            totalDays += isLeapYear(y) ? 366 : 365;

        return totalDays % 7;
    }

    private static int getDayOfYear(int day, int mon, int year)
    {
        int dayOfYear = day;

        for (int m = mon - 1; m >= 1; --m)
            dayOfYear += ms_daysOfMonths[m];

        if (mon > 2 && isLeapYear(year))
            ++dayOfYear;

        return dayOfYear;
    }

    private static boolean isLeapYear(int year)
    {
        return year % 4 == 0 && year % 100 != 0 || year % 400 == 0;
    }

    private static boolean isValidDate(int day, int mon, int year)
    {
        if (day < 1 || day > 31 || mon < 1 || mon > 12)
            return false;

        int days = isLeapYear(year) && mon == 2 ? 29 : ms_daysOfMonths[mon];

        return day <= days;
    }

    private static void doWorkForException(String msg)
    {
        System.out.println(msg);
        System.exit(-1); //exception konusuna kadar sabredin
    }

    private static void control(int day, int mon, int year, String msg)
    {
        if (!isValidDate(day, mon, year))
            doWorkForException(msg);
    }

    private void controlForDay(int day)
    {
        control(day, m_mon, m_year, "Invalid day");
    }

    private void controlForMonValue(int monVal)
    {
        control(m_day, monVal, m_year, "Invalid month");
    }

    private void controlForYear(int year)
    {
        control(m_day, m_mon, year, "Invalid year");
    }

    private void set(int day, int mon, int year)
    {
        m_day = day;
        m_mon = mon;
        m_year = year;
        m_dayOfWeek = getDayOfWeek(m_day, m_mon, m_year);
    }

    public static Date randomDate()
    {
        return randomDate(new Random());
    }

    public static Date randomDate(Random r)
    {
        Date now = new Date();

        return randomDate(r, now.m_year, now.m_year);
    }

    public static Date randomDate(int year)
    {
        return randomDate(new Random(), year);
    }

    public static Date randomDate(Random r, int year)
    {
        return randomDate(r, year, year);
    }
    public static Date randomDate(int minYear, int maxYear)
    {
        return randomDate(new Random(), minYear, maxYear);
    }

    public static Date randomDate(Random r, int minYear, int maxYear)
    {
        int year = r.nextInt(maxYear - minYear + 1) + minYear;
        int mon = r.nextInt(12) + 1;
        int days = isLeapYear(year) && mon == 2 ? 29 : ms_daysOfMonths[mon];
        int day = r.nextInt(days) + 1;

        return new Date(day, mon, year);
    }

    public Date()
    {
        Calendar now = Calendar.getInstance();

        m_day = now.get(Calendar.DAY_OF_MONTH);
        m_mon = now.get(Calendar.MONTH) + 1;
        m_year = now.get(Calendar.YEAR);
    }

    public Date(int day, int mon, int year)
    {
        control(day, mon, year, "Invalid date");
        set(day, mon, year);
    }

    public void setDay(int day)
    {
        if (day == m_day)
            return;

        controlForDay(day);
        set(day, m_mon, m_year);
    }

    public void setMonthValue(int mon)
    {
        if (m_mon == mon)
            return;

        controlForMonValue(mon);
        set(m_day, mon, m_year);
    }

    public void setYear(int year)
    {
        if (m_year == year)
            return;

        controlForYear(year);
        set(m_day, m_mon, year);
    }

    public int getDay()
    {
        return m_day;
    }

    public int getMonthValue()
    {
        return m_mon;
    }

    public int getYear()
    {
        return m_year;
    }

    public int getDayOfWeekValue() {return m_dayOfWeek;}
    public String getDayOfWeekTR() {return ms_weekDaysTR[getDayOfWeekValue()];}
    public String getDayOfWeekEN() {return ms_weekDaysEN[getDayOfWeekValue()];}
    public int getDayOfYear() {return getDayOfYear(m_day, m_mon, m_year);}

    public boolean isLeapYear()
    {
        return isLeapYear(m_year);
    }

    public boolean isWeekend()
    {
        return m_dayOfWeek == 0 || m_dayOfWeek == 6;
    }

    public boolean isWeekday()
    {
        return !isWeekend();
    }

    public String toString(char delim)
    {
        return String.format("%02d%c%02d%c%04d", m_day, delim, m_mon, delim, m_year);
    }

    public String toString()
    {
        return toString('/');
    }

    public String toStringTR()
    {
        return toStringTR('/');
    }

    public String toStringTR(char delim)
    {
        return String.format("%s %s", toString(delim), getDayOfWeekTR());
    }

    public String toStringEN()
    {
        return toStringEN('/');
    }

    public String toStringEN(char delim)
    {
        return String.format("%s %s", toString(delim), getDayOfWeekEN());
    }

    public String toLongDateStringTR()
    {
        //TODO:
        return toStringTR();
    }

    public String toLongDateStringEN()
    {
        //TODO:
        return toStringEN();
    }
}

/*----------------------------------------------------------------------------------------------------------------------
	NumberUtil sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.util;

import java.util.Random;

public class NumberUtil {
	private static final String [] ms_onesTR = {"", "bir", "iki", "üç", "dört", "beş", "altı", "yedi", "sekiz", "dokuz"};
	private static final String [] ms_tensTR = {"", "on", "yirmi", "otuz", "kırk", "elli", "altmış", "yetmiş", "seksen", "doksan"};

	private NumberUtil() {}
	private static String numToTextMax3DigitsTR(int val)
	{
		if (val == 0)
			return "sıfır";

		String str = val < 0 ? "eksi" : "";

		val = Math.abs(val);

		int a = val / 100;
		int b = val / 10 % 10;
		int c = val % 10;

		if (a != 0) {
			if (a != 1)
				str += ms_onesTR[a];
			str += "yüz";
		}

		if (b != 0)
			str += ms_tensTR[b];

		if (c != 0)
			str += ms_onesTR[c];

		return str;
	}

	private static int [] getDigits(int n, int val)
	{
		val = Math.abs(val);
		int len = val == 0 ? 1 : (int)Math.log10(val) / n + 1;
		int [] a = new int[len];

		for (int i = len - 1; i >= 0; --i) {
			int pow = (int)Math.pow(10, n);

			a[i] = val % pow;
			val /= pow;
		}

		return a;
	}

	public static long factorial(int n)
	{
		if (n < 0)
			return -1;

		long result = 1;

		for (int i = 2; i <= n; ++i)
			result *= i;

		return result;
	}

	public static int [] getDigits(int val)
	{
		return getDigits(1, val);
	}

	public static int [] getDigitsInThree(int val)
	{
		return getDigits(3, val);
	}

	public static int getDigitsCount(int val)
	{
		return val == 0 ? 1 : (int)Math.log10(Math.abs(val)) + 1;
	}

	public static int getDigitsSum(int val)
	{
		int sum = 0;

		while (val != 0) {
			sum += val % 10;
			val /= 10;
		}

		return Math.abs(sum);
	}

	public static int getNextFibonacciNumber(int val)
	{
		if (val < 0)
			return 0;

		int prev1 = 0, prev2 = 1, number = 0;

		for (;;) {
			number = prev1 + prev2;
			if (number > val)
				return number;

			prev1 = prev2;
			prev2 = number;
		}
	}

	public static int getFibonnaciNumber(int n)
	{
		if (n <= 0)
			return -1;

		if (n <= 2)
			return n - 1;

		int prev1 = 0, prev2 = 1, val = 0;

		for (int i = 2; i < n; ++i) {
			val = prev1 + prev2;
			prev1 = prev2;
			prev2 = val;
		}

		return val;
	}

	public static int getPrime(int n)
	{
		if (n <= 0)
			return -1;

		int count = 0, val = 0;

		for (int i = 2; count < n; ++i) {
			if (isPrime(i)) {
				++count;
				val = i;
			}
		}

		return val;
	}

	public static int getRandom4DigitsNumber()
	{
		return getRandom4DigitsNumber(new Random());
	}

	public static int getRandom4DigitsNumber(Random r)
	{
		boolean [] flags = new boolean[10];
		int result = 0;
		int val = r.nextInt(9) + 1;

		flags[val] = true;
		result = val * 1000;

		for (int i = 3; i >= 1; --i) {
			for (;;) {
				val = r.nextInt(10);
				if (!flags[val])
					break;
			}
			result += val * (int)Math.pow(10, i - 1);
			flags[val] = true;
		}

		return result;
	}

	public static int getReverse(int val)
	{
		int rev = 0;

		while (val != 0) {
			rev = rev * 10 + val % 10;
			val /= 10;
		}

		return rev;
	}

	public static int getSum(int val)
	{
		int n = getDigitsCount(val);

		int sum = 0;

		while (val != 0) {
			sum += pow(val % 10, n);
			val /= 10;
		}

		return sum;
	}

	public static boolean isArmstrong(int val)
	{
		if (val < 0)
			return false;

		return val == getSum(val);
	}

	public static boolean isEven(int val)
	{
		return val % 2 == 0;
	}

	public static boolean isNegative(int val)
	{
		return val < 0;
	}

	public static boolean isOdd(int val)
	{
		return !isEven(val);
	}

	public static boolean isPalindrome(int val)
	{
		return getReverse(val) == val;
	}

	public static boolean isPrime(int val)
	{
		if (val <= 1)
			return false;

		if (val % 2 == 0)
			return val == 2;

		if (val % 3 == 0)
			return val == 3;

		if (val % 5 == 0)
			return val == 5;

		if (val % 7 == 0)
			return val == 7;

		for (int i = 11; i * i <= val; i += 2)
			if (val % i == 0)
				return false;

		return true;
	}

	public static boolean isPositive(int val)
	{
		return val > 0;
	}

	public static int pow(int a, int b)
	{
		b = Math.abs(b);
		int result = 1;

		while (b-- > 0)
			result *= a;

		return result;
	}
}


/*----------------------------------------------------------------------------------------------------------------------
	StringUtil sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.util;

import java.util.Random;

public class StringUtil {
	private static final String ms_alphabetTR = "abcçdefgğhıijklmnoöprsştuüvyz";
	private static final String ms_alphabetEN = "abcdefghijklmnopqrstuwvxyz";

	private StringUtil() {}
	public static String capitalize(String str)
	{
		str = str.trim();

		return !str.isEmpty() ? Character.toUpperCase(str.charAt(0)) + str.substring(1).toLowerCase() : "";
	}

	public static int getCount(String s1, String s2)
	{
		int count = 0;

		for (int index = -1; (index = s1.indexOf(s2, index + 1)) != -1; ++count)
				;

		return count;
	}

	public static String generateRandomPassword(Random r, int n)
	{
		String chars = "abcçdefgğhıijklmnoöpqrsştuüwxvyz0123456789.:?-_";

		char [] c = new char[n];

		for (int i = 0; i < n; ++i)  {
			char ch = chars.charAt(r.nextInt(chars.length()));

			c[i] = r.nextBoolean() ? Character.toUpperCase(ch) : ch;
		}

		return new String(c);
	}

	public static String generateRandomPassword(int n)
	{
		return generateRandomPassword(new java.util.Random(), n);
	}

	public static String getRandomString(Random r, int n, String str)
	{
		char [] c = new char[n];

		for (int i = 0; i < n; ++i)
			c[i] = str.charAt(r.nextInt(str.length()));

		return new String(c);
	}

	public static String getRandomText(Random r, int n, String str)
	{
		char [] c = new char[n];

		for (int i = 0; i < n; ++i) {
			char ch = str.charAt(r.nextInt(str.length()));

			c[i] = r.nextBoolean() ? Character.toUpperCase(ch) : ch;
		}

		return new String(c);
	}

	public static String getRandomTextEN(java.util.Random r, int n)
	{
		return getRandomText(r, n, ms_alphabetEN);
	}

	public static String getRandomTextEN(int n)
	{
		return getRandomTextEN(new java.util.Random(), n);
	}

	public static String getRandomTextTR(java.util.Random r, int n)
	{
		return getRandomText(r, n, ms_alphabetTR);
	}

	public static String getRandomTextTR(int n)
	{
		return getRandomTextTR(new java.util.Random(), n);
	}

	public static boolean isPalindrome(String s)
	{
		s = removeNonalphabetics(s);

		int len = s.length();
		int halfLen = len / 2;

		for (int i = 0; i < halfLen; ++i) {
			char ch1 = Character.toLowerCase(s.charAt(i));
			char ch2 = Character.toLowerCase(s.charAt(len - 1 - i));

			if (ch1 != ch2)
				return false;
		}

		return true;
	}

	public static boolean isPangram(String s, String alphabet)
	{
		int len = alphabet.length();

		for (int i = 0; i < len; ++i)
			if (!s.contains(alphabet.charAt(i) + ""))
				return false;

		return true;
	}

	public static boolean isPangramTR(String s)
	{
		return isPangram(s.toLowerCase(), ms_alphabetTR);
	}

	public static boolean isPangramEN(String s)
	{
		return isPangram(s.toLowerCase(), ms_alphabetEN);
	}

	public static String padLeft(String s, int len, char ch)
	{
		if (len <= s.length())
			return s;

		return repeat(len - s.length(), ch) + s;
	}

	public static String padLeft(String s, int len)
	{
		return padLeft(s, len, ' ');
	}

	public static String padRight(String s, int len, char ch)
	{
		if (len <= s.length())
			return s;

		return s + repeat(len - s.length(), ch);
	}

	public static String padRight(String s, int len)
	{
		return padRight(s, len, ' ');
	}

	public static String removeNonalphabetics(String s)
	{
		String str = "";

		int len = s.length();

		for (int i = 0; i < len; ++i) {
			char ch = s.charAt(i);

			if (Character.isLetter(ch))
				str += ch;
		}

		return str;
	}

	public static String repeat(int n, char ch)
	{
		char [] c = new char[n];

		while (n-- > 0)
			c[n] += ch;

		return new String(c);
	}

	public static String reverse(String str)
	{
		char [] c = str.toCharArray();

		ArrayUtil.reverse(c);

		return new String(c);
	}


	public static String trimEnd(String s)
	{
		int i;

		for (i = s.length() - 1; i >= 0 && Character.isWhitespace(s.charAt(i)); --i)
			;

		return s.substring(0, i + 1);
	}

	public static String trimStart(String s)
	{
		int i;

		int len = s.length();

		for (i = 0; i < len && Character.isWhitespace(s.charAt(i)); ++i)
			;

		return s.substring(i);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
    CommandPormptApp sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.samples.commandprompt.CommandPromptApp;

class App {
    public static void main(String [] args)
    {
        CommandPromptApp commandPromptApp = new CommandPromptApp("CSD");

        commandPromptApp.run();

    }
}

package org.csystem.samples.commandprompt;

import org.csystem.util.StringUtil;

import java.util.Scanner;

public class CommandPromptApp {
    private String m_prompt;
    private static final String [] ms_commands = {"length", "reverse", "upper", "lower", "change"};

    private int getCommandIndex(String cmdStr)
    {
        if (cmdStr.length() < 3)
            return -1;

        for (int i = 0; i < ms_commands.length; ++i)
            if (ms_commands[i].startsWith(cmdStr))
                return i;

        return -1;
    }

    private void lengthProc(String [] commandsInfo)
    {
        System.out.println(commandsInfo[1].length());
    }

    private void reverseProc(String [] commandsInfo)
    {
        System.out.println(StringUtil.reverse(commandsInfo[1]));
    }

    private void upperProc(String [] commandsInfo)
    {
        System.out.println(commandsInfo[1].toUpperCase());
    }

    private void lowerProc(String [] commandsInfo)
    {
        System.out.println(commandsInfo[1].toLowerCase());
    }

    private void changeProc(String [] commandsInfo)
    {
        m_prompt = commandsInfo[1];
    }

    public CommandPromptApp(String p)
    {
        m_prompt = p;
    }

    public void run()
    {
        Scanner kb = new Scanner(System.in);

        for (;;) {
            System.out.print(m_prompt + ">");
            String cmdStr = kb.nextLine().trim();

            String [] commandsInfo = cmdStr.split("[ \t]+");

            if (commandsInfo.length == 1 && commandsInfo[0].equals("quit"))
                break;

            int index = getCommandIndex(commandsInfo[0]);

            switch (index) {
                case 0:
                    lengthProc(commandsInfo);
                    break;
                case 1:
                    reverseProc(commandsInfo);
                    break;
                case 2:
                    upperProc(commandsInfo);
                    break;
                case 3:
                    lowerProc(commandsInfo);
                    break;
                case 4:
                    changeProc(commandsInfo);
                    break;
                default:
                    System.out.println("Geçersiz komut");
            }
        }

        System.out.println("Tekrar yapınız!!!");
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki örnekte s ile nesne içerisindeki bilgi değiştirilebilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        final Sample s = new Sample();

        s.a = 10;
    }
}

class Sample {
    public int a;
    //...
}

/*----------------------------------------------------------------------------------------------------------------------
    IntValue sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.IntValue;

class App {
    public static void main(String [] args)
    {
        IntValue ival1 = IntValue.of(10);
        IntValue ival2 = IntValue.of(10);

        System.out.println(ival1 == ival2);
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    IntValue sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.IntValue;

class App {
    public static void main(String [] args)
    {
        IntValue a = IntValue.of(10);
        IntValue b = IntValue.of(100);

        IntValue res = a.plus(b);
        IntValue incA = a.inc();

        System.out.println(res.toString());
        System.out.println(incA.toString());
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    IntValue sınıfı ve test kodu
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

import org.csystem.util.IntValue;

class App {
    public static void main(String [] args)
    {
        IntValue sum = IntValue.ZERO;
        IntValue n = IntValue.of(10);

        for (IntValue i = IntValue.ONE; i.compareTo(n) <= 0; i = i.inc())
            sum = sum.plus(i);

        System.out.println(sum.toString());
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    IntValue sınıfı
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.util;

public class IntValue {
    private final int m_val;
    private static final IntValue [] ms_cache = new IntValue[256];

    private IntValue(int val)
    {
        m_val = val;
    }

    public static final IntValue ZERO = of(0);
    public static final IntValue ONE = of(1);

    public static IntValue of(int val)
    {
        if (val < -128 || val > 127)
            return new IntValue(val);

        if (ms_cache[val + 128] == null)
            ms_cache[val + 128] = new IntValue(val);

        return ms_cache[val + 128];
    }


    public int getVal()
    {
        return m_val;
    }

    public IntValue inc()
    {
        return plus(1);
    }

    public IntValue plus(IntValue other)
    {
        return plus(other.m_val);
    }

    public IntValue plus(int val)
    {
        return of(m_val + val);
    }

    public int compareTo(IntValue other)
    {
        return m_val - other.m_val;
    }

    public String toString()
    {
        return m_val + "";
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki örnekte Fighter sınıfına yeni bir özellik eklendiğinde sınıfta bir çok metodun
    değiştirilmesi gerekmektedir. Yani tasarım kötü yapılmıştır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        Fighter f = new Fighter("lokman", 90, 1, 60);

        //...
    }
}

class Fighter {
    private String m_name;
    private int m_health;
    private int m_agility;
    private int m_power;

    public Fighter(String name, int health, int agility, int power)
    {
        m_name = name;
        m_health = health;
        m_agility = agility;
        m_power = power;
    }

    public String getName()
    {
        return m_name;
    }

    public void setName(String name)
    {
        m_name = name;
    }

    public int getHealth()
    {
        return m_health;
    }

    public void setHealth(int health)
    {
        m_health = health;
    }

    public int getAgility()
    {
        return m_agility;
    }

    public void setAgility(int agility)
    {
        m_agility = agility;
    }

    public int getPower()
    {
        return m_power;
    }

    public void setPower(int power)
    {
        m_power = power;
    }

    public int sumOfAbilities()
    {
        return m_agility + m_health + m_power;
    }

    public double averageOfAbilities()
    {
        return sumOfAbilities() / 3.;
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki örnekte yön bilgisine ilişkin elemanlar int türden olduğundan okunabilirlik
    zayıftır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        StickyMan stickyMan = new StickyMan();

        stickyMan.move(1); //right
        stickyMan.move(3); //left
        stickyMan.move(4); //bottom
        stickyMan.move(2); //top

    }
}

class StickyMan {
    //...
    public void move(int direction)
    {
        //...
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki örnekte yazı karşılaştırması yapıldığında göreceli bir yavaşlama olabilir.
    Ayrıca yazının kontrolü derleme zamanında yapılmadığından yazının yanlış olması durumunda
    programcı bunu farkedemeyebilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        StickyMan stickyMan = new StickyMan();

        stickyMan.move("right");
        stickyMan.move("left");
        stickyMan.move("bottom");
        stickyMan.move("top");
    }
}

class StickyMan {
    //...
    public void move(String direction)
    {
        //...
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Aşağıdaki örnekte çağırma sırasında okunabilirlik artmıştır. Ayrıca karşılatırma int türü üzerinden
    yapıldığından String' e göre daha iyidir. Ancak metoda bakıldığında parametreye ilişkin ön bir çıkarım
    yapılamamaktadır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        StickyMan stickyMan = new StickyMan();

        stickyMan.move(Direction.RIGHT);
        stickyMan.move(Direction.LEFT);
        stickyMan.move(Direction.BOTTOM);
        stickyMan.move(Direction.TOP);
    }
}

class Direction {
    private Direction() {}
    public static final int RIGHT = 1;
    public static final int TOP = 2;
    public static final int LEFT = 3;
    public static final int BOTTOM = 4;
}

class StickyMan {
    //...
    public void move(int direction)
    {
        //...
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    Yukarıdaki problemler aşağıdaki gibi bir sunıf yazılarak çözülebilir. Ancak her bu tarz sınıf için
    aynı şekilde bir tasarım yapılması gerekir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        StickyMan stickyMan = new StickyMan();

        stickyMan.move(Direction.RIGHT);
        stickyMan.move(Direction.LEFT);
        stickyMan.move(Direction.BOTTOM);
        stickyMan.move(Direction.TOP);

        System.out.println(Direction.LEFT.ordinal());

        for (Direction d : Direction.values())
            System.out.println(d.ordinal());
    }
}

class Direction {
    private final int m_ordinal;
    private static final Direction [] m_values = {
            new Direction(0),
            new Direction(1),
            new Direction(2),
            new Direction(3)};
    private Direction(int ordinal) {m_ordinal = ordinal;}
    public static final Direction RIGHT = m_values[0];
    public static final Direction TOP =  m_values[1];
    public static final Direction LEFT =  m_values[2];
    public static final Direction BOTTOM =  m_values[3];

    public static Direction [] values() {return m_values;}
    public int ordinal() {return m_ordinal;}
}

class StickyMan {
    //...
    public void move(Direction direction)
    {
        //...
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    enum türü ile artık yukarıdaki işlemler daha da basitleştirilebilir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        StickyMan stickyMan = new StickyMan();

        stickyMan.move(Direction.RIGHT);
        stickyMan.move(Direction.LEFT);
        stickyMan.move(Direction.BOTTOM);
        stickyMan.move(Direction.TOP);

        System.out.println(Direction.LEFT.ordinal());

        for (Direction d : Direction.values())
            System.out.println(d.ordinal());
    }
}

enum Direction {
    RIGHT, TOP, BOTTOM, LEFT
}

class StickyMan {
    //...
    public void move(Direction direction)
    {
        //...
    }
}

/*----------------------------------------------------------------------------------------------------------------------
    enum içerisinde bildirilen isimler enum sabiti olarak adlandırılır. Bu isimler public, static, final ve
    ilgili enum türündendir. Ancak bildirim sırasında public, static, final veya tür ismi yazılamaz.
    enum sınıfının toString metodu ilgili sabitin yazısal karşılığını verir
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        Color c = Color.BLUE;

        System.out.println(c.toString());

    }
}

enum Color {
    RED, GREEN, BLUE
}

/*----------------------------------------------------------------------------------------------------------------------
    Her enum türünün ordinal isimli bir metodu vardır
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        Color c = Color.BLUE;

        System.out.println(c.ordinal());
    }
}

enum Color {
    RED, GREEN, BLUE
}


/*----------------------------------------------------------------------------------------------------------------------
    enum türlerinin static values isimli metodu tüm sabitlerin bulunduğudu bir referans dizisi referansı döndürür
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        for (Color color : Color.values())
            System.out.println(color.toString());
    }
}

enum Color {
    RED, GREEN, BLUE
}

/*----------------------------------------------------------------------------------------------------------------------
    enum türünden nesne hiç biryerde new opearatörü ile yaratılamaz
----------------------------------------------------------------------------------------------------------------------*/
package org.csystem.app;

class App {
    public static void main(String [] args)
    {
        Color c = new Color(); //error
    }
}

enum Color {
    RED, GREEN, BLUE
}




/*----------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------*/

